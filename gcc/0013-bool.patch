diff --git a/gcc/config/frv/frv-protos.h b/gcc/config/frv/frv-protos.h
index 8d79d73f6e0..29d4425c8bb 100644
--- a/gcc/config/frv/frv-protos.h
+++ b/gcc/config/frv/frv-protos.h
@@ -89,73 +89,73 @@ extern int frv_adjust_field_align	(tree, int);
 #endif
 
 #ifdef RTX_CODE
-extern int integer_register_operand	(rtx, machine_mode);
-extern int frv_load_operand		(rtx, machine_mode);
-extern int gpr_or_fpr_operand		(rtx, machine_mode);
-extern int gpr_no_subreg_operand	(rtx, machine_mode);
+extern bool integer_register_operand	(rtx, machine_mode);
+extern bool frv_load_operand		(rtx, machine_mode);
+extern bool gpr_or_fpr_operand		(rtx, machine_mode);
+extern bool gpr_no_subreg_operand	(rtx, machine_mode);
 extern int gpr_or_int6_operand		(rtx, machine_mode);
-extern int fpr_or_int6_operand		(rtx, machine_mode);
-extern int gpr_or_int_operand		(rtx, machine_mode);
-extern int gpr_or_int12_operand		(rtx, machine_mode);
-extern int gpr_fpr_or_int12_operand	(rtx, machine_mode);
-extern int gpr_or_int10_operand		(rtx, machine_mode);
-extern int move_source_operand		(rtx, machine_mode);
-extern int move_destination_operand	(rtx, machine_mode);
-extern int condexec_source_operand	(rtx, machine_mode);
-extern int condexec_dest_operand	(rtx, machine_mode);
-extern int lr_operand			(rtx, machine_mode);
-extern int gpr_or_memory_operand	(rtx, machine_mode);
-extern int fpr_or_memory_operand	(rtx, machine_mode);
-extern int reg_or_0_operand		(rtx, machine_mode);
-extern int fcc_operand			(rtx, machine_mode);
-extern int icc_operand			(rtx, machine_mode);
-extern int cc_operand			(rtx, machine_mode);
-extern int fcr_operand			(rtx, machine_mode);
-extern int icr_operand			(rtx, machine_mode);
-extern int cr_operand			(rtx, machine_mode);
-extern int call_operand			(rtx, machine_mode);
-extern int fpr_operand			(rtx, machine_mode);
-extern int even_reg_operand		(rtx, machine_mode);
-extern int odd_reg_operand		(rtx, machine_mode);
-extern int even_gpr_operand		(rtx, machine_mode);
-extern int odd_gpr_operand		(rtx, machine_mode);
-extern int quad_fpr_operand		(rtx, machine_mode);
-extern int even_fpr_operand		(rtx, machine_mode);
-extern int odd_fpr_operand		(rtx, machine_mode);
-extern int dbl_memory_one_insn_operand	(rtx, machine_mode);
-extern int dbl_memory_two_insn_operand	(rtx, machine_mode);
-extern int int12_operand		(rtx, machine_mode);
-extern int int6_operand			(rtx, machine_mode);
-extern int int5_operand			(rtx, machine_mode);
-extern int uint5_operand		(rtx, machine_mode);
-extern int uint4_operand		(rtx, machine_mode);
-extern int uint1_operand		(rtx, machine_mode);
-extern int int_2word_operand		(rtx, machine_mode);
+extern bool fpr_or_int6_operand		(rtx, machine_mode);
+extern bool gpr_or_int_operand		(rtx, machine_mode);
+extern bool gpr_or_int12_operand	(rtx, machine_mode);
+extern bool gpr_fpr_or_int12_operand	(rtx, machine_mode);
+extern bool gpr_or_int10_operand	(rtx, machine_mode);
+extern bool move_source_operand		(rtx, machine_mode);
+extern bool move_destination_operand	(rtx, machine_mode);
+extern bool condexec_source_operand	(rtx, machine_mode);
+extern bool condexec_dest_operand	(rtx, machine_mode);
+extern bool lr_operand			(rtx, machine_mode);
+extern bool gpr_or_memory_operand	(rtx, machine_mode);
+extern bool fpr_or_memory_operand	(rtx, machine_mode);
+extern bool reg_or_0_operand		(rtx, machine_mode);
+extern bool fcc_operand			(rtx, machine_mode);
+extern bool icc_operand			(rtx, machine_mode);
+extern bool cc_operand			(rtx, machine_mode);
+extern bool fcr_operand			(rtx, machine_mode);
+extern bool icr_operand			(rtx, machine_mode);
+extern bool cr_operand			(rtx, machine_mode);
+extern bool call_operand		(rtx, machine_mode);
+extern bool fpr_operand			(rtx, machine_mode);
+extern bool even_reg_operand		(rtx, machine_mode);
+extern bool odd_reg_operand		(rtx, machine_mode);
+extern bool even_gpr_operand		(rtx, machine_mode);
+extern bool odd_gpr_operand		(rtx, machine_mode);
+extern bool quad_fpr_operand		(rtx, machine_mode);
+extern bool even_fpr_operand		(rtx, machine_mode);
+extern bool odd_fpr_operand		(rtx, machine_mode);
+extern bool dbl_memory_one_insn_operand	(rtx, machine_mode);
+extern bool dbl_memory_two_insn_operand	(rtx, machine_mode);
+extern bool int12_operand		(rtx, machine_mode);
+extern bool int6_operand		(rtx, machine_mode);
+extern bool int5_operand		(rtx, machine_mode);
+extern bool uint5_operand		(rtx, machine_mode);
+extern bool uint4_operand		(rtx, machine_mode);
+extern bool uint1_operand		(rtx, machine_mode);
+extern bool int_2word_operand		(rtx, machine_mode);
 extern int pic_register_operand		(rtx, machine_mode);
 extern int pic_symbolic_operand		(rtx, machine_mode);
 extern int small_data_register_operand	(rtx, machine_mode);
 extern int small_data_symbolic_operand	(rtx, machine_mode);
-extern int upper_int16_operand		(rtx, machine_mode);
-extern int uint16_operand		(rtx, machine_mode);
-extern int symbolic_operand		(rtx, machine_mode);
-extern int relational_operator		(rtx, machine_mode);
+extern bool upper_int16_operand		(rtx, machine_mode);
+extern bool uint16_operand		(rtx, machine_mode);
+extern bool symbolic_operand		(rtx, machine_mode);
+extern bool relational_operator		(rtx, machine_mode);
 extern int signed_relational_operator	(rtx, machine_mode);
 extern int unsigned_relational_operator	(rtx, machine_mode);
-extern int float_relational_operator	(rtx, machine_mode);
-extern int ccr_eqne_operator		(rtx, machine_mode);
-extern int minmax_operator		(rtx, machine_mode);
-extern int condexec_si_binary_operator	(rtx, machine_mode);
-extern int condexec_si_media_operator	(rtx, machine_mode);
-extern int condexec_si_divide_operator	(rtx, machine_mode);
-extern int condexec_si_unary_operator	(rtx, machine_mode);
-extern int condexec_sf_conv_operator	(rtx, machine_mode);
-extern int condexec_sf_add_operator	(rtx, machine_mode);
+extern bool float_relational_operator	(rtx, machine_mode);
+extern bool ccr_eqne_operator		(rtx, machine_mode);
+extern bool minmax_operator		(rtx, machine_mode);
+extern bool condexec_si_binary_operator	(rtx, machine_mode);
+extern bool condexec_si_media_operator	(rtx, machine_mode);
+extern bool condexec_si_divide_operator	(rtx, machine_mode);
+extern bool condexec_si_unary_operator	(rtx, machine_mode);
+extern bool condexec_sf_conv_operator	(rtx, machine_mode);
+extern bool condexec_sf_add_operator	(rtx, machine_mode);
 extern int condexec_memory_operand	(rtx, machine_mode);
-extern int intop_compare_operator	(rtx, machine_mode);
-extern int acc_operand			(rtx, machine_mode);
-extern int even_acc_operand		(rtx, machine_mode);
-extern int quad_acc_operand		(rtx, machine_mode);
-extern int accg_operand			(rtx, machine_mode);
+extern bool intop_compare_operator	(rtx, machine_mode);
+extern bool acc_operand			(rtx, machine_mode);
+extern bool even_acc_operand		(rtx, machine_mode);
+extern bool quad_acc_operand		(rtx, machine_mode);
+extern bool accg_operand			(rtx, machine_mode);
 extern rtx frv_matching_accg_for_acc	(rtx);
 extern void frv_expand_fdpic_call	(rtx *, bool, bool);
 extern rtx frv_gen_GPsym2reg		(rtx, rtx);
diff --git a/gcc/config/m32r/m32r-protos.h b/gcc/config/m32r/m32r-protos.h
index 23313fb9b28..82b2c701be0 100644
--- a/gcc/config/m32r/m32r-protos.h
+++ b/gcc/config/m32r/m32r-protos.h
@@ -49,13 +49,13 @@ extern rtx    m32r_return_addr (int);
 extern rtx    m32r_function_symbol (const char *);
 
 #ifdef HAVE_MACHINE_MODES
-extern int    call_operand (rtx, machine_mode);
-extern int    small_data_operand (rtx, machine_mode);
+extern bool    call_operand (rtx, machine_mode);
+extern bool    small_data_operand (rtx, machine_mode);
 extern int    addr24_operand (rtx, machine_mode);
 extern int    addr32_operand (rtx, machine_mode);
 extern int    call26_operand (rtx, machine_mode);
-extern int    memreg_operand (rtx, machine_mode);
-extern int    small_insn_p (rtx, machine_mode);
+extern bool    memreg_operand (rtx, machine_mode);
+extern bool    small_insn_p (rtx, machine_mode);
 
 #endif /* HAVE_MACHINE_MODES */
 
diff --git a/gcc/config/m32r/m32r.c b/gcc/config/m32r/m32r.c
index 3444ed49eee..1aaba94bb5c 100644
--- a/gcc/config/m32r/m32r.c
+++ b/gcc/config/m32r/m32r.c
@@ -532,7 +532,7 @@ m32r_init_expanders (void)
      to make it easy to experiment.  */
 }
 
-int
+bool
 call_operand (rtx op, machine_mode mode)
 {
   if (!MEM_P (op))
@@ -543,7 +543,7 @@ call_operand (rtx op, machine_mode mode)
 
 /* Return 1 if OP is a reference to an object in .sdata/.sbss.  */
 
-int
+bool
 small_data_operand (rtx op, machine_mode mode ATTRIBUTE_UNUSED)
 {
   if (! TARGET_SDATA_USE)
@@ -674,7 +674,7 @@ easy_df_const (rtx op)
 /* Return 1 if OP is (mem (reg ...)).
    This is used in insn length calcs.  */
 
-int
+bool
 memreg_operand (rtx op, machine_mode mode ATTRIBUTE_UNUSED)
 {
   return MEM_P (op) && REG_P (XEXP (op, 0));
diff --git a/gcc/config/stormy16/stormy16-protos.h b/gcc/config/stormy16/stormy16-protos.h
index c81ea8c2eb0..d8010af9b57 100644
--- a/gcc/config/stormy16/stormy16-protos.h
+++ b/gcc/config/stormy16/stormy16-protos.h
@@ -54,7 +54,7 @@ extern void xstormy16_expand_andqi3 (rtx *);
 #if defined (HAVE_MACHINE_MODES) && defined (RTX_CODE)
 extern void xstormy16_split_cbranch (machine_mode, rtx, rtx, rtx);
 extern int  short_memory_operand (rtx, machine_mode);
-extern int  nonimmediate_nonstack_operand (rtx, machine_mode);
+extern bool  nonimmediate_nonstack_operand (rtx, machine_mode);
 extern enum reg_class xstormy16_secondary_reload_class 
  (enum reg_class, machine_mode, rtx);
 extern void xstormy16_split_move (machine_mode, rtx, rtx);
@@ -63,8 +63,8 @@ extern void xstormy16_expand_arith (machine_mode, enum rtx_code,
 				    rtx, rtx, rtx);
 extern const char * xstormy16_output_shift (machine_mode, enum rtx_code, 
 					    rtx, rtx, rtx);
-extern int  xstormy16_below100_symbol (rtx, machine_mode);
-extern int  xstormy16_splittable_below100_operand (rtx, machine_mode);
+extern bool  xstormy16_below100_symbol (rtx, machine_mode);
+extern bool  xstormy16_splittable_below100_operand (rtx, machine_mode);
 extern bool xstormy16_legitimate_address_p (machine_mode, rtx, bool);
 #endif
 
diff --git a/gcc/config/stormy16/stormy16.c b/gcc/config/stormy16/stormy16.c
index fb7670ff46d..92011fdb518 100644
--- a/gcc/config/stormy16/stormy16.c
+++ b/gcc/config/stormy16/stormy16.c
@@ -516,7 +516,7 @@ xstormy16_preferred_reload_class (rtx x, reg_class_t rclass)
 /* Predicate for symbols and addresses that reflect special 8-bit
    addressing.  */
 
-int
+bool
 xstormy16_below100_symbol (rtx x,
 			   machine_mode mode ATTRIBUTE_UNUSED)
 {
@@ -542,7 +542,7 @@ xstormy16_below100_symbol (rtx x,
 /* Likewise, but only for non-volatile MEMs, for patterns where the
    MEM will get split into smaller sized accesses.  */
 
-int
+bool
 xstormy16_splittable_below100_operand (rtx x, machine_mode mode)
 {
   if (MEM_P (x) && MEM_VOLATILE_P (x))
