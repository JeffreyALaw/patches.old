diff --git a/gcc/config/h8300/addsub.md b/gcc/config/h8300/addsub.md
index 8744ec3db16..f3392856b76 100644
--- a/gcc/config/h8300/addsub.md
+++ b/gcc/config/h8300/addsub.md
@@ -1,16 +1,6 @@
 ;; ----------------------------------------------------------------------
 ;; ADD INSTRUCTIONS
 ;; ----------------------------------------------------------------------
-;;
-;; We could have peepholes which detect the case where
-;; we could use a non-cc-clobbering adds/subs to facilitate using an
-;; earlier instruction to eliminate a compare.
-;;
-;; Alternately we could not have a clobber on the adds/subs variants, but
-;; then those insns would not be available for compare elimination
-;;
-;; It's not clear which approach is better or if it's even worth the
-;; effort
 
 (define_expand "add<mode>3"
   [(set (match_operand:QHSI 0 "register_operand" "")
@@ -19,200 +9,83 @@
   ""
   "")
 
-(define_insn_and_split "*addqi3"
+(define_insn "*addqi3"
   [(set (match_operand:QI 0 "h8300_dst_operand" "=rQ")
 	(plus:QI (match_operand:QI 1 "h8300_dst_operand" "%0")
 		 (match_operand:QI 2 "h8300_src_operand" "rQi")))]
   "h8300_operands_match_p (operands)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (plus:QI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*addqi3_clobber_flags"
-  [(set (match_operand:QI 0 "h8300_dst_operand" "=rQ")
-	(plus:QI (match_operand:QI 1 "h8300_dst_operand" "%0")
-		 (match_operand:QI 2 "h8300_src_operand" "rQi")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed && h8300_operands_match_p (operands)"
-  "add.b	%X2,%X0"
-  [(set_attr "length_table" "add")])
-
-(define_insn "*addqi3_set_flags"
-  [(set (reg:CCZN CC_REG) (compare:CCZN
-			    (plus:QI
-			      (match_operand:QI 1 "register_operand" "%0,0")
-			      (match_operand:QI 2 "h8300_src_operand" "n,r"))
-			    (const_int 0)))
-   (set (match_operand:QI 0 "register_operand" "=r,r")
-	(plus:QI (match_dup 1) (match_dup 2)))]
-  "reload_completed && h8300_operands_match_p (operands)"
   "add.b	%X2,%X0"
-  [(set_attr "length" "2,2")])
+  [(set_attr "length_table" "add")
+   (set_attr "cc" "set_zn")])
 
-(define_insn_and_split "*addhi"
+(define_insn "*addhi3_h8300hs"
   [(set (match_operand:HI 0 "register_operand" "=r,r,r,r,r")
 	(plus:HI (match_operand:HI 1 "register_operand" "%0,0,0,0,0")
 		 (match_operand:HI 2 "h8300_src_operand" "L,N,J,n,r")))]
   "!TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (plus:HI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "addhi3_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r,r,r,r,r")
-	(plus:HI (match_operand:HI 1 "register_operand" "%0,0,0,0,0")
-		 (match_operand:HI 2 "h8300_src_operand" "L,N,J,n,r")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed && !TARGET_H8300SX"
   "@
    adds	%2,%S0
    subs	%G2,%S0
    add.b	%t2,%t0
    add.w	%T2,%T0
    add.w	%T2,%T0"
-  [(set_attr "length" "2,2,2,4,2")])
-
-(define_insn "*addhi3_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (plus:HI
-			(match_operand:HI 1 "register_operand" "%0,0,0,0")
-			(match_operand:HI 2 "h8300_src_operand" "M,O,n,r"))
-		      (const_int 0)))
-   (set (match_operand:HI 0 "register_operand" "=r,r,r,r")
-	(plus:HI (match_dup 1) (match_dup 2)))]
-  "reload_completed && !TARGET_H8300SX"
-  "@
-   inc.w	%T2,%T0
-   dec.w	%G2,%T0
-   add.w	%T2,%T0
-   add.w	%T2,%T0"
-  [(set_attr "length" "2,2,4,2")])
+  [(set_attr "length" "2,2,2,4,2")
+   (set_attr "cc" "none_0hit,none_0hit,clobber,set_zn,set_zn")])
+
+(define_insn "*add<mode>3_incdec"
+  [(set (match_operand:HSI 0 "register_operand" "=r,r")
+	(unspec:HSI [(match_operand:HSI 1 "register_operand" "0,0")
+		     (match_operand:HSI 2 "incdec_operand" "M,O")]
+		    UNSPEC_INCDEC))]
+  ""
+  {
+    if (which_alternative == 0)
+      return <MODE>mode == HImode ? "inc.w\t%2,%T0" : "inc.l\t%2,%S0";
+    else if (which_alternative == 1)
+      return <MODE>mode == HImode ? "dec.w\t%G2,%T0" : "dec.l\t%G2,%S0";
+    gcc_unreachable ();
+   }
+  [(set_attr "length" "2,2")
+   (set_attr "cc" "set_zn,set_zn")])
 
-(define_insn_and_split "*addhi3_h8sx"
+(define_insn "*addhi3_h8sx"
   [(set (match_operand:HI 0 "h8300_dst_operand" "=rU,rU,r,rQ")
 	(plus:HI (match_operand:HI 1 "h8300_dst_operand" "%0,0,0,0")
 		 (match_operand:HI 2 "h8300_src_operand" "P3>X,P3<X,J,rQi")))]
   "TARGET_H8300SX && h8300_operands_match_p (operands)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (plus:HI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*addhi3_h8sx_clobber_flags"
-  [(set (match_operand:HI 0 "h8300_dst_operand" "=rU,rU,r,rQ")
-	(plus:HI (match_operand:HI 1 "h8300_dst_operand" "%0,0,0,0")
-		 (match_operand:HI 2 "h8300_src_operand" "P3>X,P3<X,J,rQi")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed && TARGET_H8300SX && h8300_operands_match_p (operands)"
   "@
    add.w	%T2:3,%T0
    sub.w	%G2:3,%T0
    add.b	%t2,%t0
    add.w	%T2,%T0"
   [(set_attr "length_table" "short_immediate,short_immediate,*,add")
-   (set_attr "length" "*,*,2,*")])
-
-(define_insn "*addhi3_h8sx_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (plus:HI (match_operand:HI 1 "h8300_dst_operand" "%0,0,0,0")
-		   (match_operand:HI 2 "h8300_src_operand" "P3>X,P3<X,J,rQi"))
-	  (const_int 0)))
-   (set (match_operand:HI 0 "h8300_dst_operand" "=rU,rU,r,rQ")
-	(plus:HI (match_dup 1) (match_dup 2)))]
-  "reload_completed && TARGET_H8300SX && h8300_operands_match_p (operands)"
-  "@
-   add.w	%T2:3,%T0
-   sub.w	%G2:3,%T0
-   add.b	%t2,%t0
-   add.w	%T2,%T0"
-  [(set_attr "length_table" "short_immediate,short_immediate,*,add")
-   (set_attr "length" "*,*,2,*")])
+   (set_attr "length" "*,*,2,*")
+   (set_attr "cc" "set_zn")])
 
 (define_split
   [(set (match_operand:HSI 0 "register_operand" "")
 	(plus:HSI (match_dup 0)
 		 (match_operand:HSI 1 "two_insn_adds_subs_operand" "")))]
-  "reload_completed"
+  ""
   [(const_int 0)]
   {
     split_adds_subs (<MODE>mode, operands);
     DONE;
   })
 
-(define_insn_and_split "*addsi_3op"
-  [(set (match_operand:SI 0 "h8300_dst_operand" "=r")
-	(plus:SI (match_operand:SI 1 "h8300_dst_operand" "r")
-		 (match_operand:SI 2 "h8300_src_operand" "A0")))]
- "operands[0] != operands[1]
-   && operands[0] != stack_pointer_rtx
-   && REG_P (operands[0]) && REG_P (operands[1])
-   && REGNO (operands[0]) != REGNO (operands[1])
-   && !satisfies_constraint_L (operands[2])
-   && !satisfies_constraint_N (operands[2])
-   && ((INTVAL (operands[2]) & 0xff) == INTVAL (operands[2])
-       || (INTVAL (operands[2]) & 0xff00) == INTVAL (operands[2])
-       || INTVAL (operands[2]) == 0xffff
-       || INTVAL (operands[2]) == 0xfffe)"
-  "#"
-  "&& reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 2))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
 
-(define_insn_and_split "*addsi"
+(define_insn "*addsi_h8300hs"
   [(set (match_operand:SI 0 "h8300_dst_operand" "=rQ,rQ")
 	(plus:SI (match_operand:SI 1 "h8300_dst_operand" "%0,0")
 		 (match_operand:SI 2 "h8300_src_operand" "i,rQ")))]
   "h8300_operands_match_p (operands)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn_and_split "addsi3_clobber_flags_adds_subs"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(plus:SI (match_dup 0)
-		 (match_operand:SI 1 "two_insn_adds_subs_operand" "")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed"
-  "#"
-  "reload_completed"
-  [(const_int 0)]
-{
-    split_adds_subs (E_SImode, operands);
-    DONE;
-})
-
-(define_insn "addsi3_clobber_flags"
-  [(set (match_operand:SI 0 "h8300_dst_operand" "=rQ,rQ")
-	(plus:SI (match_operand:SI 1 "h8300_dst_operand" "%0,0")
-		 (match_operand:SI 2 "h8300_src_operand" "i,rQ")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed && h8300_operands_match_p (operands)"
 {
-  return output_plussi (operands, false);
+  return output_plussi (operands);
 }
   [(set (attr "length")
-	(symbol_ref "compute_plussi_length (operands, false)"))])
-
-(define_insn "*addsi3_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (plus:SI
-			(match_operand:SI 1 "h8300_dst_operand" "%0,0")
-			(match_operand:SI 2 "h8300_src_operand" "i,rQ"))
-		      (const_int 0)))
-   (set (match_operand:SI 0 "h8300_dst_operand" "=rQ,rQ")
-	(plus:SI (match_dup 1) (match_dup 2)))]
-  "reload_completed && h8300_operands_match_p (operands)"
-{
-  return output_plussi (operands, true);
-}
-  [(set (attr "length")
-	(symbol_ref "compute_plussi_length (operands, true)"))])
+	(symbol_ref "compute_plussi_length (operands)"))
+   (set (attr "cc")
+	(symbol_ref "compute_plussi_cc (operands)"))])
 
 ;; ----------------------------------------------------------------------
 ;; SUBTRACT INSTRUCTIONS
@@ -222,72 +95,24 @@
   [(set (match_operand:QHSI 0 "register_operand" "")
 	(minus:QHSI (match_operand:QHSI 1 "register_operand" "")
 		    (match_operand:QHSI 2 "h8300_src_operand" "")))]
-  "")
+  ""
+  {
+  })
 
-(define_insn_and_split "*subqi3"
+(define_insn "*subqi3"
   [(set (match_operand:QI 0 "h8300_dst_operand" "=rQ")
 	(minus:QI (match_operand:QI 1 "h8300_dst_operand" "0")
 		  (match_operand:QI 2 "h8300_dst_operand" "rQ")))]
   "h8300_operands_match_p (operands)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (minus:QI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*subqi3_clobber_flags"
-  [(set (match_operand:QI 0 "h8300_dst_operand" "=rQ")
-	(minus:QI (match_operand:QI 1 "h8300_dst_operand" "0")
-		  (match_operand:QI 2 "h8300_dst_operand" "rQ")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed && h8300_operands_match_p (operands)"
   "sub.b	%X2,%X0"
-  [(set_attr "length_table" "add")])
+  [(set_attr "length_table" "add")
+   (set_attr "cc" "set_zn")])
 
-(define_insn "*subqi3_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (minus:QI (match_operand:QI 1 "h8300_dst_operand" "0")
-			        (match_operand:QI 2 "h8300_dst_operand" "rQ"))
-		      (const_int 0)))
-   (set (match_operand:QI 0 "h8300_dst_operand" "=rQ")
-	(minus:QI (match_dup 1) (match_dup 2)))]
-  "reload_completed && h8300_operands_match_p (operands)"
-  "sub.b	%X2,%X0"
-  [(set_attr "length_table" "add")])
-
-(define_insn_and_split "*sub<mode>3"
+(define_insn "*sub<mode>3_h8300hs"
   [(set (match_operand:HSI 0 "h8300_dst_operand" "=rQ,rQ")
 	(minus:HSI (match_operand:HSI 1 "h8300_dst_operand" "0,0")
 		   (match_operand:HSI 2 "h8300_src_operand" "rQ,i")))]
   "h8300_operands_match_p (operands)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (minus:HSI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*sub<mode>3_clobber_flags"
-  [(set (match_operand:HSI 0 "h8300_dst_operand" "=rQ,rQ")
-	(minus:HSI (match_operand:HSI 1 "h8300_dst_operand" "0,0")
-		   (match_operand:HSI 2 "h8300_src_operand" "rQ,i")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed && h8300_operands_match_p (operands)"
-  { 
-    if (<MODE>mode == HImode)
-      return "sub.w	%T2,%T0";
-    else if (<MODE>mode == SImode)
-      return "sub.l	%S2,%S0";
-    gcc_unreachable ();
-  }
-  [(set_attr "length_table" "add")])
-
-(define_insn "*sub<mode>3_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (minus:HSI (match_operand:HSI 1 "h8300_dst_operand" "0,0")
-		     (match_operand:HSI 2 "h8300_dst_operand" "rQ,i"))
-	  (const_int 0)))
-   (set (match_operand:HSI 0 "h8300_dst_operand" "=rQ,rQ")
-	(minus:HSI (match_dup 1) (match_dup 2)))]
-  "reload_completed && h8300_operands_match_p (operands)"
   { 
     if (<MODE>mode == HImode)
       return "sub.w	%T2,%T0";
@@ -295,7 +120,8 @@
       return "sub.l	%S2,%S0";
     gcc_unreachable ();
   }
-  [(set_attr "length_table" "add")])
+  [(set_attr "length_table" "add")
+   (set_attr "cc" "set_zn")])
 
 ;; ----------------------------------------------------------------------
 ;; NEGATION INSTRUCTIONS
@@ -307,20 +133,10 @@
   ""
   "")
 
-(define_insn_and_split "*neg<mode>2"
+(define_insn "*neg<mode>2"
   [(set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
 	(neg:QHSI (match_operand:QHSI 1 "h8300_dst_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (neg:QHSI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*neg<mode>2_clobber_flags"
-  [(set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
-	(neg:QHSI (match_operand:QHSI 1 "h8300_dst_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed"
   {
     if (<MODE>mode == E_QImode)
       return "neg	%X0";
@@ -330,40 +146,14 @@
       return "neg.l	%S0";
     gcc_unreachable ();
   }
-  [(set_attr "length_table" "unary")])
+  [(set_attr "length_table" "unary")
+   (set_attr "cc" "set_zn")])
 
-(define_insn "*neg<mode>2_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (neg:QHSI (match_operand:QHSI 1 "h8300_dst_operand" "0"))
-		      (const_int 0)))
-   (set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
-	(neg:QHSI (match_dup 1)))]
-  "reload_completed"
-  {
-    if (<MODE>mode == E_QImode)
-      return "neg	%X0";
-    if (<MODE>mode == E_HImode)
-      return "neg.w	%T0";
-    if (<MODE>mode == E_SImode)
-      return "neg.l	%S0";
-    gcc_unreachable ();
-  }
-  [(set_attr "length_table" "unary")])
 
-(define_insn_and_split "*negsf2"
+(define_insn "*negsf2_h8300hs"
   [(set (match_operand:SF 0 "register_operand" "=r")
-	(neg:SF (match_operand:SF 1 "register_operand" "0")))]
+       (neg:SF (match_operand:SF 1 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (neg:SF (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-  
-(define_insn "*negsf2_clobber_flags"
-  [(set (match_operand:SF 0 "register_operand" "=r")
-       (neg:SF (match_operand:SF 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  "reload_completed"
   "xor.w\\t#32768,%e0"
   [(set_attr "length" "4")])
 
diff --git a/gcc/config/h8300/bitfield.md b/gcc/config/h8300/bitfield.md
index 8fa6fde433a..bed712d830b 100644
--- a/gcc/config/h8300/bitfield.md
+++ b/gcc/config/h8300/bitfield.md
@@ -15,29 +15,12 @@
 ;; Inverted loads with a 16bit destination.
 ;;
 
-(define_insn_and_split ""
-  [(set (match_operand:HI 0 "register_operand" "=&r")
-	(zero_extract:HI (xor:HI (match_operand:HI 1 "register_operand" "r")
-				 (match_operand:HI 3 "const_int_operand" "n"))
-			 (const_int 1)
-			 (match_operand:HI 2 "const_int_operand" "n")))]
-  "(TARGET_H8300SX)
-    && (1 << INTVAL (operands[2])) == INTVAL (operands[3])"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (zero_extract:HI (xor:HI (match_dup 1) (match_dup 3))
-				    (const_int 1)
-				    (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=&r")
 	(zero_extract:HI (xor:HI (match_operand:HI 1 "register_operand" "r")
 				 (match_operand:HI 3 "const_int_operand" "n"))
 			 (const_int 1)
-			 (match_operand:HI 2 "const_int_operand" "n")))
-   (clobber (reg:CC CC_REG))]
+			 (match_operand:HI 2 "const_int_operand" "n")))]
   "(TARGET_H8300SX)
     && (1 << INTVAL (operands[2])) == INTVAL (operands[3])"
   "sub.w	%0,%0\;bild	%Z2,%Y1\;bst	#0,%X0"
@@ -47,25 +30,12 @@
 ;; Normal loads with a 32bit destination.
 ;;
 
-(define_insn_and_split "*extzv_1_r"
+(define_insn "*extzv_1_r_h8300hs"
   [(set (match_operand:SI 0 "register_operand" "=r,r")
 	(zero_extract:SI (match_operand:SI 1 "register_operand" "?0,r")
 			 (const_int 1)
 			 (match_operand 2 "const_int_operand" "n,n")))]
   "INTVAL (operands[2]) < 16"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (zero_extract:SI (match_dup 1) (const_int 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*extzv_1_r_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r,r")
-	(zero_extract:SI (match_operand:SI 1 "register_operand" "?0,r")
-			 (const_int 1)
-			 (match_operand 2 "const_int_operand" "n,n")))
-   (clobber (reg:CC CC_REG))]
-  "INTVAL (operands[2]) < 16"
 {
   return output_simode_bld (0, operands);
 }
@@ -76,7 +46,7 @@
 ;; Inverted loads with a 32bit destination.
 ;;
 
-(define_insn_and_split "*extzv_1_r_inv"
+(define_insn "*extzv_1_r_inv_h8300hs"
   [(set (match_operand:SI 0 "register_operand" "=r,r")
 	(zero_extract:SI (xor:SI (match_operand:SI 1 "register_operand" "?0,r")
 				 (match_operand 3 "const_int_operand" "n,n"))
@@ -84,23 +54,6 @@
 			 (match_operand 2 "const_int_operand" "n,n")))]
   "INTVAL (operands[2]) < 16
     && (1 << INTVAL (operands[2])) == INTVAL (operands[3])"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (zero_extract:SI (xor:SI (match_dup 1) (match_dup 3))
-				    (const_int 1)
-				    (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*extzv_1_r_inv_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r,r")
-	(zero_extract:SI (xor:SI (match_operand:SI 1 "register_operand" "?0,r")
-				 (match_operand 3 "const_int_operand" "n,n"))
-			 (const_int 1)
-			 (match_operand 2 "const_int_operand" "n,n")))
-   (clobber (reg:CC CC_REG))]
-  "INTVAL (operands[2]) < 16
-    && (1 << INTVAL (operands[2])) == INTVAL (operands[3])"
 {
   return output_simode_bld (1, operands);
 }
@@ -154,24 +107,11 @@
     FAIL;
   })
 
-(define_insn_and_split ""
-  [(set (zero_extract:HI (match_operand:HI 0 "register_operand" "+r")
-			 (const_int 1)
-			 (match_operand:HI 1 "immediate_operand" "n"))
-	(match_operand:HI 2 "register_operand" "r"))]
-  ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (zero_extract:HI (match_dup 0) (const_int 1) (match_dup 1))
-		   (match_dup 2))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (zero_extract:HI (match_operand:HI 0 "register_operand" "+r")
 			 (const_int 1)
 			 (match_operand:HI 1 "immediate_operand" "n"))
-	(match_operand:HI 2 "register_operand" "r"))
-   (clobber (reg:CC CC_REG))]
+	(match_operand:HI 2 "register_operand" "r"))]
   ""
   "bld	#0,%R2\;bst	%Z1,%Y0 ; i1"
   [(set_attr "length" "4")])
@@ -224,56 +164,17 @@
 
 ;; BAND, BOR, and BXOR patterns
 
-(define_insn_and_split ""
-  [(set (match_operand:HI 0 "bit_operand" "=Ur")
-	(match_operator:HI 4 "bit_operator"
-	 [(zero_extract:HI (match_operand:HI 1 "register_operand" "r")
-			   (const_int 1)
-			   (match_operand:HI 2 "immediate_operand" "n"))
-	  (match_operand:HI 3 "bit_operand" "0")]))]
-  ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (match_op_dup 4 [(zero_extract:HI (match_dup 1)
-						     (const_int 1)
-						     (match_dup 2))
-				    (match_dup 3)]))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (match_operand:HI 0 "bit_operand" "=Ur")
 	(match_operator:HI 4 "bit_operator"
 	 [(zero_extract:HI (match_operand:HI 1 "register_operand" "r")
 			   (const_int 1)
 			   (match_operand:HI 2 "immediate_operand" "n"))
-	  (match_operand:HI 3 "bit_operand" "0")]))
-   (clobber (reg:CC CC_REG))]
+	  (match_operand:HI 3 "bit_operand" "0")]))]
   ""
   "bld	%Z2,%Y1\;b%c4	#0,%R0\;bst	#0,%R0; bl1"
   [(set_attr "length" "6")])
 
-(define_insn_and_split ""
-  [(set (match_operand:HI 0 "bit_operand" "=Ur")
-	(match_operator:HI 5 "bit_operator"
-	 [(zero_extract:HI (match_operand:HI 1 "register_operand" "r")
-			   (const_int 1)
-			   (match_operand:HI 2 "immediate_operand" "n"))
-	  (zero_extract:HI (match_operand:HI 3 "register_operand" "r")
-			   (const_int 1)
-			   (match_operand:HI 4 "immediate_operand" "n"))]))]
-  ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (match_op_dup 5 [(zero_extract:HI (match_dup 1)
-						     (const_int 1)
-						     (match_dup 2))
-				    (zero_extract:HI (match_dup 3)
-						     (const_int 1)
-						     (match_dup 4))]))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (match_operand:HI 0 "bit_operand" "=Ur")
 	(match_operator:HI 5 "bit_operator"
@@ -282,31 +183,17 @@
 			   (match_operand:HI 2 "immediate_operand" "n"))
 	  (zero_extract:HI (match_operand:HI 3 "register_operand" "r")
 			   (const_int 1)
-			   (match_operand:HI 4 "immediate_operand" "n"))]))
-   (clobber (reg:CC CC_REG))]
+			   (match_operand:HI 4 "immediate_operand" "n"))]))]
   ""
   "bld	%Z2,%Y1\;b%c5	%Z4,%Y3\;bst	#0,%R0; bl3"
   [(set_attr "length" "6")])
 
-(define_insn_and_split "bfld"
+(define_insn "bfld"
   [(set (match_operand:QI 0 "register_operand" "=r")
 	(zero_extract:QI (match_operand:QI 1 "bit_memory_operand" "WU")
 			 (match_operand:QI 2 "immediate_operand" "n")
 			 (match_operand:QI 3 "immediate_operand" "n")))]
   "TARGET_H8300SX && INTVAL (operands[2]) + INTVAL (operands[3]) <= 8"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (zero_extract:QI (match_dup 1) (match_dup 2) (match_dup 3)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "bfld_clobber_flags"
-  [(set (match_operand:QI 0 "register_operand" "=r")
-	(zero_extract:QI (match_operand:QI 1 "bit_memory_operand" "WU")
-			 (match_operand:QI 2 "immediate_operand" "n")
-			 (match_operand:QI 3 "immediate_operand" "n")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX && INTVAL (operands[2]) + INTVAL (operands[3]) <= 8"
 {
   operands[2] = GEN_INT ((1 << (INTVAL (operands[2]) + INTVAL (operands[3])))
 			 - (1 << INTVAL (operands[3])));
@@ -315,25 +202,12 @@
   [(set_attr "cc" "none_0hit")
    (set_attr "length_table" "bitfield")])
 
-(define_insn_and_split "bfst"
+(define_insn "bfst"
   [(set (zero_extract:QI (match_operand:QI 0 "bit_memory_operand" "+WU")
 			 (match_operand:QI 2 "immediate_operand" "n")
 			 (match_operand:QI 3 "immediate_operand" "n"))
 	(match_operand:QI 1 "register_operand" "r"))]
   "TARGET_H8300SX && INTVAL (operands[2]) + INTVAL (operands[3]) <= 8"
-  "#"
-  "reload_completed"
-  [(parallel [(set (zero_extract:QI (match_dup 0) (match_dup 2) (match_dup 3))
-		   (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "bfst_clobber_flags"
-  [(set (zero_extract:QI (match_operand:QI 0 "bit_memory_operand" "+WU")
-			 (match_operand:QI 2 "immediate_operand" "n")
-			 (match_operand:QI 3 "immediate_operand" "n"))
-	(match_operand:QI 1 "register_operand" "r"))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX && INTVAL (operands[2]) + INTVAL (operands[3]) <= 8"
 {
   operands[2] = GEN_INT ((1 << (INTVAL (operands[2]) + INTVAL (operands[3])))
 			 - (1 << INTVAL (operands[3])));
@@ -342,203 +216,225 @@
   [(set_attr "cc" "none_0hit")
    (set_attr "length_table" "bitfield")])
 
-;;(define_expand "cstore<mode>4"
-;;  [(use (match_operator 1 "eqne_operator"
-;;         [(match_operand:QHSI 2 "h8300_dst_operand" "")
-;;          (match_operand:QHSI 3 "h8300_src_operand" "")]))
-;;   (clobber (match_operand:QHSI 0 "register_operand"))]
-;;  "TARGET_H8300SX"
-;;  {
-;;    h8300_expand_store (operands);
-;;    DONE;
-;;  })
-
-;;(define_insn "*bstzhireg"
-;;  [(set (match_operand:HI 0 "register_operand" "=r")
-;;	(match_operator:HI 1 "eqne_operator" [(cc0) (const_int 0)]))]
-;;  "TARGET_H8300SX"
-;;  "mulu.w	#0,%T0\;b%k1	.Lh8BR%=\;inc.w	#1,%T0\\n.Lh8BR%=:"
-;;  [(set_attr "cc" "clobber")])
-
-;;(define_insn_and_split "*cmpstz"
-;;  [(set (zero_extract:QI (match_operand:QI 0 "bit_memory_operand" "+WU,WU")
-;;			 (const_int 1)
-;;			 (match_operand:QI 1 "immediate_operand" "n,n"))
-;;	(match_operator:QI 2 "eqne_operator"
-;;	 [(match_operand 3 "h8300_dst_operand" "r,rQ")
-;;	  (match_operand 4 "h8300_src_operand" "I,rQi")]))]
-;;  "TARGET_H8300SX
-;;   && (GET_MODE (operands[3]) == GET_MODE (operands[4])
-;;       || GET_CODE (operands[4]) == CONST_INT)
-;;   && GET_MODE_CLASS (GET_MODE (operands[3])) == MODE_INT
-;;   && GET_MODE_SIZE (GET_MODE (operands[3])) <= 4"
-;;  "#"
-;;  "reload_completed"
-;;  [(set (cc0) (match_dup 5))
-;;   (set (zero_extract:QI (match_dup 0) (const_int 1) (match_dup 1))
-;;	(match_op_dup:QI 2 [(cc0) (const_int 0)]))]
-;;  {
-;;    operands[5] = gen_rtx_COMPARE (VOIDmode, operands[3], operands[4]);
-;;  }
-;;  [(set_attr "cc" "set_znv,compare")])
-
-;;(define_insn "*bstz"
-;;  [(set (zero_extract:QI (match_operand:QI 0 "bit_memory_operand" "+WU")
-;;			 (const_int 1)
-;;			 (match_operand:QI 1 "immediate_operand" "n"))
-;;	(eq:QI (cc0) (const_int 0)))]
-;;  "TARGET_H8300SX && reload_completed"
-;;  "bstz	%1,%0"
-;;  [(set_attr "cc" "none_0hit")
-;;   (set_attr "length_table" "unary")])
-
-;;(define_insn "*bistz"
-;;  [(set (zero_extract:QI (match_operand:QI 0 "bit_memory_operand" "+WU")
-;;			 (const_int 1)
-;;			 (match_operand:QI 1 "immediate_operand" "n"))
-;;	(ne:QI (cc0) (const_int 0)))]
-;;  "TARGET_H8300SX && reload_completed"
-;;  "bistz	%1,%0"
-;;  [(set_attr "cc" "none_0hit")
-;;   (set_attr "length_table" "unary")])
-
-;;(define_insn_and_split "*cmpcondbset"
-;;  [(set (match_operand:QI 0 "nonimmediate_operand" "=WU,WU")
-;;	(if_then_else:QI (match_operator 1 "eqne_operator"
-;;			  [(match_operand 2 "h8300_dst_operand" "r,rQ")
-;;			   (match_operand 3 "h8300_src_operand" "I,rQi")])
-;;			 (ior:QI (match_operand:QI 4 "bit_memory_operand" "0,0")
-;;				 (match_operand:QI 5 "single_one_operand" "n,n"))
-;;			 (match_dup 4)))]
-;;  "TARGET_H8300SX"
-;;  "#"
-;;  "reload_completed"
-;;  [(set (cc0) (match_dup 6))
-;;   (set (match_dup 0)
-;;	(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])
-;;			 (ior:QI (match_dup 4) (match_dup 5))
-;;			 (match_dup 4)))]
-;;  {
-;;    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);
-;;  }
-;; [(set_attr "cc" "set_znv,compare")])
-
-;;(define_insn "*condbset"
-;;  [(set (match_operand:QI 0 "bit_memory_operand" "=WU")
-;;	(if_then_else:QI (match_operator:QI 2 "eqne_operator"
-;;			  [(cc0) (const_int 0)])
-;;			 (ior:QI (match_operand:QI 3 "bit_memory_operand" "0")
-;;				 (match_operand:QI 1 "single_one_operand" "n"))
-;;			 (match_dup 3)))]
-;;  "TARGET_H8300SX && reload_completed"
-;;  "bset/%j2\t%V1,%0"
-;;  [(set_attr "cc" "none_0hit")
-;;   (set_attr "length_table" "logicb")])
-
-;;(define_insn_and_split "*cmpcondbclr"
-;;  [(set (match_operand:QI 0 "nonimmediate_operand" "=WU,WU")
-;;	(if_then_else:QI (match_operator 1 "eqne_operator"
-;;			  [(match_operand 2 "h8300_dst_operand" "r,rQ")
-;;			   (match_operand 3 "h8300_src_operand" "I,rQi")])
-;;			 (and:QI (match_operand:QI 4 "bit_memory_operand" "0,0")
-;;				 (match_operand:QI 5 "single_zero_operand" "n,n"))
-;;			 (match_dup 4)))]
-;;  "TARGET_H8300SX"
-;;  "#"
-;;  "reload_completed"
-;;  [(set (cc0) (match_dup 6))
-;;   (set (match_dup 0)
-;;	(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])
-;;			 (and:QI (match_dup 4) (match_dup 5))
-;;			 (match_dup 4)))]
-;;  {
-;;    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);
-;;  }
-;;  [(set_attr "cc" "set_znv,compare")])
-
-;;(define_insn "*condbclr"
-;;  [(set (match_operand:QI 0 "bit_memory_operand" "=WU")
-;;	(if_then_else:QI (match_operator:QI 2 "eqne_operator"
-;;			  [(cc0) (const_int 0)])
-;;			 (and:QI (match_operand:QI 3 "bit_memory_operand" "0")
-;;				 (match_operand:QI 1 "single_zero_operand" "n"))
-;;			 (match_dup 3)))]
-;;  "TARGET_H8300SX && reload_completed"
-;;  "bclr/%j2\t%W1,%0"
-;;  [(set_attr "cc" "none_0hit")
-;;   (set_attr "length_table" "logicb")])
-
-;;(define_insn_and_split "*cmpcondbsetreg"
-;;  [(set (match_operand:QI 0 "nonimmediate_operand" "=WU,WU")
-;;	(if_then_else:QI (match_operator 1 "eqne_operator"
-;;			  [(match_operand 2 "h8300_dst_operand" "r,rQ")
-;;			   (match_operand 3 "h8300_src_operand" "I,rQi")])
-;;			 (ior:QI (match_operand:QI 4 "bit_memory_operand" "0,0")
-;;				 (ashift:QI (const_int 1)
-;;					    (match_operand:QI 5 "register_operand" "r,r")))
-;;			 (match_dup 4)))]
-;;  "TARGET_H8300SX"
-;;  "#"
-;;  "reload_completed"
-;;  [(set (cc0) (match_dup 6))
-;;   (set (match_dup 0)
-;;	(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])
-;;			 (ior:QI (match_dup 4)
-;;				 (ashift:QI (const_int 1)
-;;					    (match_operand:QI 5 "register_operand" "r,r")))
-;;			 (match_dup 4)))]
-;;  {
-;;    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);
-;;  }
-;;  [(set_attr "cc" "set_znv,compare")])
-
-;;(define_insn "*condbsetreg"
-;;  [(set (match_operand:QI 0 "bit_memory_operand" "=WU")
-;;	(if_then_else:QI (match_operator:QI 2 "eqne_operator"
-;;			  [(cc0) (const_int 0)])
-;;			 (ior:QI (match_operand:QI 3 "bit_memory_operand" "0")
-;;				 (ashift:QI (const_int 1)
-;;					    (match_operand:QI 1 "register_operand" "r")))
-;;			 (match_dup 3)))]
-;;  "TARGET_H8300SX && reload_completed"
-;;  "bset/%j2\t%R1,%0"
-;;  [(set_attr "cc" "none_0hit")
-;;   (set_attr "length_table" "logicb")])
-
-;;(define_insn_and_split "*cmpcondbclrreg"
-;;  [(set (match_operand:QI 0 "nonimmediate_operand" "=WU,WU")
-;;	(if_then_else:QI (match_operator 1 "eqne_operator"
-;;			  [(match_operand 2 "h8300_dst_operand" "r,rQ")
-;;			   (match_operand 3 "h8300_src_operand" "I,rQi")])
-;;			 (and:QI (match_operand:QI 4 "bit_memory_operand" "0,0")
-;;				 (ashift:QI (const_int 1)
-;;					    (match_operand:QI 5 "register_operand" "r,r")))
-;;			 (match_dup 4)))]
-;;  "TARGET_H8300SX"
-;;  "#"
-;;  "reload_completed"
-;;  [(set (cc0) (match_dup 6))
-;;   (set (match_dup 0)
-;;	(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])
-;;			 (and:QI (match_dup 4)
-;;				 (ashift:QI (const_int 1)
-;;					    (match_operand:QI 5 "register_operand" "r,r")))
-;;			 (match_dup 4)))]
-;;  {
-;;    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);
-;;  }
-;;  [(set_attr "cc" "set_znv,compare")])
-
-;;(define_insn "*condbclrreg"
-;;  [(set (match_operand:QI 0 "bit_memory_operand" "=WU")
-;;	(if_then_else:QI (match_operator:QI 2 "eqne_operator"
-;;			  [(cc0) (const_int 0)])
-;;			 (and:QI (match_operand:QI 3 "bit_memory_operand" "0")
-;;				 (ashift:QI (const_int 1)
-;;					    (match_operand:QI 1 "register_operand" "r")))
-;;			 (match_dup 3)))]
-;;  "TARGET_H8300SX && reload_completed"
-;;  "bclr/%j2\t%R1,%0"
-;;  [(set_attr "cc" "none_0hit")
-;;   (set_attr "length_table" "logicb")])
+(define_expand "cstoreqi4"
+  [(use (match_operator 1 "eqne_operator"
+         [(match_operand:QI 2 "h8300_dst_operand" "")
+          (match_operand:QI 3 "h8300_src_operand" "")]))
+   (clobber (match_operand:HI 0 "register_operand"))]
+  "TARGET_H8300SX"
+  {
+    h8300_expand_store (operands);
+    DONE;
+  })
+
+(define_expand "cstorehi4"
+  [(use (match_operator 1 "eqne_operator"
+         [(match_operand:HI 2 "h8300_dst_operand" "")
+          (match_operand:HI 3 "h8300_src_operand" "")]))
+   (clobber (match_operand:HI 0 "register_operand"))]
+  "TARGET_H8300SX"
+  {
+    h8300_expand_store (operands);
+    DONE;
+  })
+
+(define_expand "cstoresi4"
+  [(use (match_operator 1 "eqne_operator"
+         [(match_operand:SI 2 "h8300_dst_operand" "")
+          (match_operand:SI 3 "h8300_src_operand" "")]))
+   (clobber (match_operand:HI 0 "register_operand"))]
+  "TARGET_H8300SX"
+  {
+    h8300_expand_store (operands);
+    DONE;
+  })
+
+(define_insn "*bstzhireg"
+  [(set (match_operand:HI 0 "register_operand" "=r")
+	(match_operator:HI 1 "eqne_operator" [(cc0) (const_int 0)]))]
+  "TARGET_H8300SX"
+  "mulu.w	#0,%T0\;b%k1	.Lh8BR%=\;inc.w	#1,%T0\\n.Lh8BR%=:"
+  [(set_attr "cc" "clobber")])
+
+(define_insn_and_split "*cmpstz"
+  [(set (zero_extract:QI (match_operand:QI 0 "bit_memory_operand" "+WU,WU")
+			 (const_int 1)
+			 (match_operand:QI 1 "immediate_operand" "n,n"))
+	(match_operator:QI 2 "eqne_operator"
+	 [(match_operand 3 "h8300_dst_operand" "r,rQ")
+	  (match_operand 4 "h8300_src_operand" "I,rQi")]))]
+  "TARGET_H8300SX
+   && (GET_MODE (operands[3]) == GET_MODE (operands[4])
+       || GET_CODE (operands[4]) == CONST_INT)
+   && GET_MODE_CLASS (GET_MODE (operands[3])) == MODE_INT
+   && GET_MODE_SIZE (GET_MODE (operands[3])) <= 4"
+  "#"
+  "reload_completed"
+  [(set (cc0) (match_dup 5))
+   (set (zero_extract:QI (match_dup 0) (const_int 1) (match_dup 1))
+	(match_op_dup:QI 2 [(cc0) (const_int 0)]))]
+  {
+    operands[5] = gen_rtx_COMPARE (VOIDmode, operands[3], operands[4]);
+  }
+  [(set_attr "cc" "set_znv,compare")])
+
+(define_insn "*bstz"
+  [(set (zero_extract:QI (match_operand:QI 0 "bit_memory_operand" "+WU")
+			 (const_int 1)
+			 (match_operand:QI 1 "immediate_operand" "n"))
+	(eq:QI (cc0) (const_int 0)))]
+  "TARGET_H8300SX && reload_completed"
+  "bstz	%1,%0"
+  [(set_attr "cc" "none_0hit")
+   (set_attr "length_table" "unary")])
+
+(define_insn "*bistz"
+  [(set (zero_extract:QI (match_operand:QI 0 "bit_memory_operand" "+WU")
+			 (const_int 1)
+			 (match_operand:QI 1 "immediate_operand" "n"))
+	(ne:QI (cc0) (const_int 0)))]
+  "TARGET_H8300SX && reload_completed"
+  "bistz	%1,%0"
+  [(set_attr "cc" "none_0hit")
+   (set_attr "length_table" "unary")])
+
+(define_insn_and_split "*cmpcondbset"
+  [(set (match_operand:QI 0 "nonimmediate_operand" "=WU,WU")
+	(if_then_else:QI (match_operator 1 "eqne_operator"
+			  [(match_operand 2 "h8300_dst_operand" "r,rQ")
+			   (match_operand 3 "h8300_src_operand" "I,rQi")])
+			 (ior:QI (match_operand:QI 4 "bit_memory_operand" "0,0")
+				 (match_operand:QI 5 "single_one_operand" "n,n"))
+			 (match_dup 4)))]
+  "TARGET_H8300SX"
+  "#"
+  "reload_completed"
+  [(set (cc0) (match_dup 6))
+   (set (match_dup 0)
+	(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])
+			 (ior:QI (match_dup 4) (match_dup 5))
+			 (match_dup 4)))]
+  {
+    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);
+  }
+  [(set_attr "cc" "set_znv,compare")])
+
+(define_insn "*condbset"
+  [(set (match_operand:QI 0 "bit_memory_operand" "=WU")
+	(if_then_else:QI (match_operator:QI 2 "eqne_operator"
+			  [(cc0) (const_int 0)])
+			 (ior:QI (match_operand:QI 3 "bit_memory_operand" "0")
+				 (match_operand:QI 1 "single_one_operand" "n"))
+			 (match_dup 3)))]
+  "TARGET_H8300SX && reload_completed"
+  "bset/%j2\t%V1,%0"
+  [(set_attr "cc" "none_0hit")
+   (set_attr "length_table" "logicb")])
+
+(define_insn_and_split "*cmpcondbclr"
+  [(set (match_operand:QI 0 "nonimmediate_operand" "=WU,WU")
+	(if_then_else:QI (match_operator 1 "eqne_operator"
+			  [(match_operand 2 "h8300_dst_operand" "r,rQ")
+			   (match_operand 3 "h8300_src_operand" "I,rQi")])
+			 (and:QI (match_operand:QI 4 "bit_memory_operand" "0,0")
+				 (match_operand:QI 5 "single_zero_operand" "n,n"))
+			 (match_dup 4)))]
+  "TARGET_H8300SX"
+  "#"
+  "reload_completed"
+  [(set (cc0) (match_dup 6))
+   (set (match_dup 0)
+	(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])
+			 (and:QI (match_dup 4) (match_dup 5))
+			 (match_dup 4)))]
+  {
+    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);
+  }
+  [(set_attr "cc" "set_znv,compare")])
+
+(define_insn "*condbclr"
+  [(set (match_operand:QI 0 "bit_memory_operand" "=WU")
+	(if_then_else:QI (match_operator:QI 2 "eqne_operator"
+			  [(cc0) (const_int 0)])
+			 (and:QI (match_operand:QI 3 "bit_memory_operand" "0")
+				 (match_operand:QI 1 "single_zero_operand" "n"))
+			 (match_dup 3)))]
+  "TARGET_H8300SX && reload_completed"
+  "bclr/%j2\t%W1,%0"
+  [(set_attr "cc" "none_0hit")
+   (set_attr "length_table" "logicb")])
+
+(define_insn_and_split "*cmpcondbsetreg"
+  [(set (match_operand:QI 0 "nonimmediate_operand" "=WU,WU")
+	(if_then_else:QI (match_operator 1 "eqne_operator"
+			  [(match_operand 2 "h8300_dst_operand" "r,rQ")
+			   (match_operand 3 "h8300_src_operand" "I,rQi")])
+			 (ior:QI (match_operand:QI 4 "bit_memory_operand" "0,0")
+				 (ashift:QI (const_int 1)
+					    (match_operand:QI 5 "register_operand" "r,r")))
+			 (match_dup 4)))]
+  "TARGET_H8300SX"
+  "#"
+  "reload_completed"
+  [(set (cc0) (match_dup 6))
+   (set (match_dup 0)
+	(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])
+			 (ior:QI (match_dup 4)
+				 (ashift:QI (const_int 1)
+					    (match_operand:QI 5 "register_operand" "r,r")))
+			 (match_dup 4)))]
+  {
+    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);
+  }
+  [(set_attr "cc" "set_znv,compare")])
+
+(define_insn "*condbsetreg"
+  [(set (match_operand:QI 0 "bit_memory_operand" "=WU")
+	(if_then_else:QI (match_operator:QI 2 "eqne_operator"
+			  [(cc0) (const_int 0)])
+			 (ior:QI (match_operand:QI 3 "bit_memory_operand" "0")
+				 (ashift:QI (const_int 1)
+					    (match_operand:QI 1 "register_operand" "r")))
+			 (match_dup 3)))]
+  "TARGET_H8300SX && reload_completed"
+  "bset/%j2\t%R1,%0"
+  [(set_attr "cc" "none_0hit")
+   (set_attr "length_table" "logicb")])
+
+(define_insn_and_split "*cmpcondbclrreg"
+  [(set (match_operand:QI 0 "nonimmediate_operand" "=WU,WU")
+	(if_then_else:QI (match_operator 1 "eqne_operator"
+			  [(match_operand 2 "h8300_dst_operand" "r,rQ")
+			   (match_operand 3 "h8300_src_operand" "I,rQi")])
+			 (and:QI (match_operand:QI 4 "bit_memory_operand" "0,0")
+				 (ashift:QI (const_int 1)
+					    (match_operand:QI 5 "register_operand" "r,r")))
+			 (match_dup 4)))]
+  "TARGET_H8300SX"
+  "#"
+  "reload_completed"
+  [(set (cc0) (match_dup 6))
+   (set (match_dup 0)
+	(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])
+			 (and:QI (match_dup 4)
+				 (ashift:QI (const_int 1)
+					    (match_operand:QI 5 "register_operand" "r,r")))
+			 (match_dup 4)))]
+  {
+    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);
+  }
+  [(set_attr "cc" "set_znv,compare")])
+
+(define_insn "*condbclrreg"
+  [(set (match_operand:QI 0 "bit_memory_operand" "=WU")
+	(if_then_else:QI (match_operator:QI 2 "eqne_operator"
+			  [(cc0) (const_int 0)])
+			 (and:QI (match_operand:QI 3 "bit_memory_operand" "0")
+				 (ashift:QI (const_int 1)
+					    (match_operand:QI 1 "register_operand" "r")))
+			 (match_dup 3)))]
+  "TARGET_H8300SX && reload_completed"
+  "bclr/%j2\t%R1,%0"
+  [(set_attr "cc" "none_0hit")
+   (set_attr "length_table" "logicb")])
 
diff --git a/gcc/config/h8300/combiner.md b/gcc/config/h8300/combiner.md
index 432c1d88a61..4f49c7fba34 100644
--- a/gcc/config/h8300/combiner.md
+++ b/gcc/config/h8300/combiner.md
@@ -4,193 +4,85 @@
 
 ;; insv:SI
 
-(define_insn_and_split "*insv_si_1_n"
+(define_insn "*insv_si_1_n"
   [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
 			 (const_int 1)
 			 (match_operand:SI 1 "const_int_operand" "n"))
 	(match_operand:SI 2 "register_operand" "r"))]
   "INTVAL (operands[1]) < 16"
-  "#"
-  "reload_completed"
-  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 1) (match_dup 1))
-		   (match_dup 2))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*insv_si_1_n_clobber_flags"
-  [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
-			 (const_int 1)
-			 (match_operand:SI 1 "const_int_operand" "n"))
-	(match_operand:SI 2 "register_operand" "r"))
-   (clobber (reg:CC CC_REG))]
-  "INTVAL (operands[1]) < 16"
   "bld\\t#0,%w2\;bst\\t%Z1,%Y0"
   [(set_attr "length" "4")])
 
-(define_insn_and_split "*insv_si_1_n_lshiftrt"
+(define_insn "*insv_si_1_n_lshiftrt"
   [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
 			 (const_int 1)
 			 (match_operand:SI 1 "const_int_operand" "n"))
 	(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
 		     (match_operand:SI 3 "const_int_operand" "n")))]
   "INTVAL (operands[1]) < 16 && INTVAL (operands[3]) < 16"
-  "#"
-  "reload_completed"
-  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 1) (match_dup 1))
-		   (lshiftrt:SI (match_dup 2) (match_dup 3)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*insv_si_1_n_lshiftrt_clobber_flags"
-  [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
-			 (const_int 1)
-			 (match_operand:SI 1 "const_int_operand" "n"))
-	(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
-		     (match_operand:SI 3 "const_int_operand" "n")))
-   (clobber (reg:CC CC_REG))]
-  "INTVAL (operands[1]) < 16 && INTVAL (operands[3]) < 16"
   "bld\\t%Z3,%Y2\;bst\\t%Z1,%Y0"
   [(set_attr "length" "4")])
 
-(define_insn_and_split "*insv_si_1_n_lshiftrt_16"
+(define_insn "*insv_si_1_n_lshiftrt_16"
   [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
 			 (const_int 1)
 			 (match_operand:SI 1 "const_int_operand" "n"))
 	(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
 		     (const_int 16)))]
   "INTVAL (operands[1]) < 16"
-  "#"
-  "reload_completed"
-  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 1) (match_dup 1))
-		   (lshiftrt:SI (match_dup 2) (const_int 16)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*insv_si_1_n_lshiftrt_16_clobber_flags"
-  [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
-			 (const_int 1)
-			 (match_operand:SI 1 "const_int_operand" "n"))
-	(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
-		     (const_int 16)))
-   (clobber (reg:CC CC_REG))]
-  "INTVAL (operands[1]) < 16"
   "rotr.w\\t%e2\;rotl.w\\t%e2\;bst\\t%Z1,%Y0"
   [(set_attr "length" "6")])
 
-(define_insn_and_split "*insv_si_8_8"
+(define_insn "*insv_si_8_8"
   [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
 			 (const_int 8)
 			 (const_int 8))
 	(match_operand:SI 1 "register_operand" "r"))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))
-		   (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*insv_si_8_8_clobber_flags"
-  [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
-			 (const_int 8)
-			 (const_int 8))
-	(match_operand:SI 1 "register_operand" "r"))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.b\\t%w1,%x0"
   [(set_attr "length" "2")])
 
-(define_insn_and_split "*insv_si_8_8_lshiftrt_8"
+(define_insn "*insv_si_8_8_lshiftrt_8"
   [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
 			 (const_int 8)
 			 (const_int 8))
 	(lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
 		     (const_int 8)))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))
-		   (lshiftrt:SI (match_dup 1) (const_int 8)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*insv_si_8_8_lshiftrt_8_clobber_flags"
-  [(set (zero_extract:SI (match_operand:SI 0 "register_operand" "+r")
-			 (const_int 8)
-			 (const_int 8))
-	(lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-		     (const_int 8)))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.b\\t%x1,%x0"
   [(set_attr "length" "2")])
 
 ;; extzv:SI
 
-(define_insn_and_split "*extzv_8_8"
+(define_insn "*extzv_8_8"
   [(set (match_operand:SI 0 "register_operand" "=r,r")
 	(zero_extract:SI (match_operand:SI 1 "register_operand" "?0,r")
 			 (const_int 8)
 			 (const_int 8)))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (zero_extract:SI (match_dup 1) (const_int 8) (const_int 8)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*extzv_8_8_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r,r")
-	(zero_extract:SI (match_operand:SI 1 "register_operand" "?0,r")
-			 (const_int 8)
-			 (const_int 8)))
-   (clobber (reg:CC CC_REG))]
-  ""
   "@
    mov.b\\t%x1,%w0\;extu.w\\t%f0\;extu.l\\t%S0
    sub.l\\t%S0,%S0\;mov.b\\t%x1,%w0"
   [(set_attr "cc" "set_znv,clobber")
    (set_attr "length" "6,4")])
 
-(define_insn_and_split "*extzv_8_16"
+(define_insn "*extzv_8_16"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(zero_extract:SI (match_operand:SI 1 "register_operand" "r")
 			 (const_int 8)
 			 (const_int 16)))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (zero_extract:SI (match_dup 1) (const_int 8) (const_int 16)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*extzv_8_16_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(zero_extract:SI (match_operand:SI 1 "register_operand" "r")
-			 (const_int 8)
-			 (const_int 16)))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.w\\t%e1,%f0\;extu.w\\t%f0\;extu.l\\t%S0"
   [(set_attr "cc" "set_znv")
    (set_attr "length" "6")])
 
-(define_insn_and_split "*extzv_16_8"
+(define_insn "*extzv_16_8"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(zero_extract:SI (match_operand:SI 1 "register_operand" "r")
 			 (const_int 16)
 			 (const_int 8)))
    (clobber (match_scratch:SI 2 "=&r"))]
   "TARGET_H8300H"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (zero_extract:SI (match_dup 1) (const_int 16) (const_int 8)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*extzv_16_8_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(zero_extract:SI (match_operand:SI 1 "register_operand" "r")
-			 (const_int 16)
-			 (const_int 8)))
-   (clobber (match_scratch:SI 2 "=&r"))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300H"
   "mov.w\\t%e1,%f2\;mov.b\\t%x1,%w0\;mov.b\\t%w2,%x0\;extu.l\\t%S0"
   [(set_attr "length" "8")
    (set_attr "cc" "set_znv")])
@@ -208,13 +100,12 @@
   [(parallel [(set (match_dup 0)
 		   (ashift:SI (match_dup 0)
 			      (const_int 1)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])
+	      (clobber (scratch:QI))])
    (parallel [(set (match_dup 0)
 		   (lshiftrt:SI (match_dup 0)
 				(const_int 24)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])])
+	      (clobber (scratch:QI))])]
+  "")
 
 ;; and:SI
 
@@ -231,13 +122,12 @@
   [(parallel [(set (match_dup 0)
 		   (ashift:SI (match_dup 0)
 			      (const_int 16)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])
+	      (clobber (scratch:QI))])
    (parallel [(set (match_dup 0)
 		   (lshiftrt:SI (match_dup 0)
 				(const_int 1)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])])
+	      (clobber (scratch:QI))])]
+  "")
 
 ;; Transform (SImode << B) & 0xffff into (SImode) (HImode << B).
 
@@ -255,37 +145,20 @@
   [(parallel [(set (match_dup 5)
 		   (ashift:HI (match_dup 5)
 			      (match_dup 2)))
-	      (clobber (match_dup 4))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0)
-		   (zero_extend:SI (match_dup 5)))
-	      (clobber (reg:CC CC_REG))])]
+	      (clobber (match_dup 4))])
+   (set (match_dup 0)
+	(zero_extend:SI (match_dup 5)))]
   {
     operands[5] = gen_rtx_REG (HImode, REGNO (operands[0]));
   })
 
 ;; Accept (A >> 30) & 2 and the like.
 
-(define_insn_and_split "*andsi3_lshiftrt_n_sb"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(and:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "0")
-			     (match_operand:SI 2 "const_int_operand" "n"))
-		(match_operand:SI 3 "single_one_operand" "n")))]
-  "exact_log2 (INTVAL (operands[3])) < 16
-   && INTVAL (operands[2]) + exact_log2 (INTVAL (operands[3])) == 31"
-  "#"
-  ""
-  [(parallel [(set (match_dup 0)
-		   (and:SI (lshiftrt:SI (match_dup 1) (match_dup 2))
-			   (match_dup 3)))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn "*andsi3_lshiftrt_n_sb"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(and:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "0")
 			     (match_operand:SI 2 "const_int_operand" "n"))
-		(match_operand:SI 3 "single_one_operand" "n")))
-   (clobber (reg:CC CC_REG))]
+		(match_operand:SI 3 "single_one_operand" "n")))]
   "exact_log2 (INTVAL (operands[3])) < 16
    && INTVAL (operands[2]) + exact_log2 (INTVAL (operands[3])) == 31"
 {
@@ -302,330 +175,172 @@
   ""
   "#"
   "&& reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (and:SI (lshiftrt:SI (match_dup 0) (const_int 25))
-			   (const_int 64)))
-	      (clobber (reg:CC CC_REG))])
+  [(set (match_dup 0)
+	(and:SI (lshiftrt:SI (match_dup 0)
+			     (const_int 25))
+		(const_int 64)))
    (parallel [(set (match_dup 0)
 		   (ashift:SI (match_dup 0)
 			      (const_int 16)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])])
+	      (clobber (scratch:QI))])]
+  "")
 
 ;; plus:SI
 
-(define_insn_and_split "*addsi3_upper"
+(define_insn "*addsi3_upper"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(plus:SI (mult:SI (match_operand:SI 1 "register_operand" "r")
 			  (const_int 65536))
 		 (match_operand:SI 2 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (plus:SI (mult:SI (match_dup 1) (const_int 65536))
-			    (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*addsi3_upper_clobber_regs"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(plus:SI (mult:SI (match_operand:SI 1 "register_operand" "r")
-			  (const_int 65536))
-		 (match_operand:SI 2 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
   "add.w\\t%f1,%e0"
   [(set_attr "length" "2")])
 
-(define_insn_and_split "*addsi3_lshiftrt_16_zexthi"
+(define_insn "*addsi3_lshiftrt_16_zexthi"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(plus:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
 			      (const_int 16))
 		 (zero_extend:SI (match_operand:HI 2 "register_operand" "0"))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (plus:SI (lshiftrt:SI (match_dup 1) (const_int 16))
-			    (zero_extend:SI (match_dup 2))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*addsi3_lshiftrt_16_zexthi_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(plus:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-			      (const_int 16))
-		 (zero_extend:SI (match_operand:HI 2 "register_operand" "0"))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "add.w\\t%e1,%f0\;xor.w\\t%e0,%e0\;rotxl.w\\t%e0"
   [(set_attr "length" "6")])
 
-;;(define_insn_and_split "*addsi3_and_r_1"
-;;  [(set (match_operand:SI 0 "register_operand" "=r")
-;;	(plus:SI (and:SI (match_operand:SI 1 "register_operand" "r")
-;;			 (const_int 1))
-;;		 (match_operand:SI 2 "register_operand" "0")))]
-;;  ""
-;;  "#"
-;;  "&& reload_completed"
-;;  [(set (cc0) (compare (zero_extract:SI (match_dup 1)
-;;					(const_int 1)
-;;					(const_int 0))
-;;		       (const_int 0)))
-;;   (set (pc)
-;;        (if_then_else (eq (cc0)
-;;			  (const_int 0))
-;;		      (label_ref (match_dup 3))
-;;		      (pc)))
-;;   (set (match_dup 2)
-;;        (plus:SI (match_dup 2)
-;;		 (const_int 1)))
-;;   (match_dup 3)]
-;;  {
-;;    operands[3] = gen_label_rtx ();
-;;  })
-
-;;(define_insn_and_split "*addsi3_and_not_r_1"
-;;  [(set (match_operand:SI 0 "register_operand" "=r")
-;;	(plus:SI (and:SI (not:SI (match_operand:SI 1 "register_operand" "r"))
-;;			 (const_int 1))
-;;		 (match_operand:SI 2 "register_operand" "0")))]
-;;  ""
-;;  "#"
-;;  "&& reload_completed"
-;;  [(set (cc0) (compare (zero_extract:SI (match_dup 1)
-;;					(const_int 1)
-;;					(const_int 0))
-;;		       (const_int 0)))
-;;   (set (pc)
-;;        (if_then_else (ne (cc0)
-;;			  (const_int 0))
-;;		      (label_ref (match_dup 3))
-;;		      (pc)))
-;;   (set (match_dup 2)
-;;        (plus:SI (match_dup 2)
-;;		 (const_int 1)))
-;;   (match_dup 3)]
-;;  {
-;;    operands[3] = gen_label_rtx ();
-;;  })
-
-;; [ix]or:HI
+(define_insn_and_split "*addsi3_and_r_1"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(plus:SI (and:SI (match_operand:SI 1 "register_operand" "r")
+			 (const_int 1))
+		 (match_operand:SI 2 "register_operand" "0")))]
+  ""
+  "#"
+  "&& reload_completed"
+  [(set (cc0) (compare (zero_extract:SI (match_dup 1)
+					(const_int 1)
+					(const_int 0))
+		       (const_int 0)))
+   (set (pc)
+        (if_then_else (eq (cc0)
+			  (const_int 0))
+		      (label_ref (match_dup 3))
+		      (pc)))
+   (set (match_dup 2)
+        (plus:SI (match_dup 2)
+		 (const_int 1)))
+   (match_dup 3)]
+  {
+    operands[3] = gen_label_rtx ();
+  })
 
-(define_insn_and_split "*ixorhi3_zext"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(match_operator:HI 1 "iorxor_operator"
-	 [(zero_extend:HI (match_operand:QI 2 "register_operand" "r"))
-	  (match_operand:HI 3 "register_operand" "0")]))]
+(define_insn_and_split "*addsi3_and_not_r_1"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(plus:SI (and:SI (not:SI (match_operand:SI 1 "register_operand" "r"))
+			 (const_int 1))
+		 (match_operand:SI 2 "register_operand" "0")))]
   ""
   "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (match_op_dup 1 [(zero_extend:HI (match_dup 2))
-				    (match_dup 3)]))
-	      (clobber (reg:CC CC_REG))])])
+  "&& reload_completed"
+  [(set (cc0) (compare (zero_extract:SI (match_dup 1)
+					(const_int 1)
+					(const_int 0))
+		       (const_int 0)))
+   (set (pc)
+        (if_then_else (ne (cc0)
+			  (const_int 0))
+		      (label_ref (match_dup 3))
+		      (pc)))
+   (set (match_dup 2)
+        (plus:SI (match_dup 2)
+		 (const_int 1)))
+   (match_dup 3)]
+  {
+    operands[3] = gen_label_rtx ();
+  })
 
+;; [ix]or:HI
 
-(define_insn "*ixorhi3_zext_clobber_flags"
+(define_insn "*ixorhi3_zext"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(match_operator:HI 1 "iorxor_operator"
 	 [(zero_extend:HI (match_operand:QI 2 "register_operand" "r"))
-	  (match_operand:HI 3 "register_operand" "0")]))
-   (clobber (reg:CC CC_REG))]
+	  (match_operand:HI 3 "register_operand" "0")]))]
   ""
   "%c1.b\\t%X2,%s0"
   [(set_attr "length" "2")])
 
 ;; [ix]or:SI
 
-(define_insn_and_split "*ixorsi3_zext_qi"
+(define_insn "*ixorsi3_zext_qi"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(match_operator:SI 1 "iorxor_operator"
 	 [(zero_extend:SI (match_operand:QI 2 "register_operand" "r"))
 	  (match_operand:SI 3 "register_operand" "0")]))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (match_op_dup 1 [(zero_extend:SI (match_dup 2))
-				    (match_dup 3)]))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*ixorsi3_zext_qi_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(match_operator:SI 1 "iorxor_operator"
-	 [(zero_extend:SI (match_operand:QI 2 "register_operand" "r"))
-	  (match_operand:SI 3 "register_operand" "0")]))
-   (clobber (reg:CC CC_REG))]
-  ""
   "%c1.b\\t%X2,%w0"
   [(set_attr "length" "2")])
 
-(define_insn_and_split "*ixorsi3_zext_hi"
+(define_insn "*ixorsi3_zext_hi"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(match_operator:SI 1 "iorxor_operator"
 	 [(zero_extend:SI (match_operand:HI 2 "register_operand" "r"))
 	  (match_operand:SI 3 "register_operand" "0")]))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (match_op_dup 1 [(zero_extend:SI (match_dup 2))
-				    (match_dup 3)]))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*ixorsi3_zext_hi_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(match_operator:SI 1 "iorxor_operator"
-	 [(zero_extend:SI (match_operand:HI 2 "register_operand" "r"))
-	  (match_operand:SI 3 "register_operand" "0")]))
-   (clobber (reg:CC CC_REG))]
-  ""
   "%c1.w\\t%T2,%f0"
   [(set_attr "length" "2")])
 
-(define_insn_and_split "*ixorsi3_ashift_16"
+(define_insn "*ixorsi3_ashift_16"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(match_operator:SI 1 "iorxor_operator"
 	 [(ashift:SI (match_operand:SI 2 "register_operand" "r")
 		     (const_int 16))
 	  (match_operand:SI 3 "register_operand" "0")]))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (match_op_dup 1 [(ashift:SI (match_dup 2) (const_int 16))
-				    (match_dup 3)]))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*ixorsi3_ashift_16_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(match_operator:SI 1 "iorxor_operator"
-	 [(ashift:SI (match_operand:SI 2 "register_operand" "r")
-		     (const_int 16))
-	  (match_operand:SI 3 "register_operand" "0")]))
-  (clobber (reg:CC CC_REG))]
-  ""
   "%c1.w\\t%f2,%e0"
   [(set_attr "length" "2")])
 
-(define_insn_and_split "*ixorsi3_lshiftrt_16"
+(define_insn "*ixorsi3_lshiftrt_16"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(match_operator:SI 1 "iorxor_operator"
 	 [(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
 		       (const_int 16))
 	  (match_operand:SI 3 "register_operand" "0")]))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (match_op_dup 1 [(lshiftrt:SI (match_dup 2) (const_int 16))
-				    (match_dup 3)]))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*ixorsi3_lshiftrt_16_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(match_operator:SI 1 "iorxor_operator"
-	 [(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
-		       (const_int 16))
-	  (match_operand:SI 3 "register_operand" "0")]))
-   (clobber (reg:CC CC_REG))]
-  ""
   "%c1.w\\t%e2,%f0"
   [(set_attr "length" "2")])
 
 ;; ior:HI
 
-(define_insn_and_split "*iorhi3_ashift_8"
+(define_insn "*iorhi3_ashift_8"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(ior:HI (ashift:HI (match_operand:HI 1 "register_operand" "r")
 			   (const_int 8))
 		(match_operand:HI 2 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:HI (ashift:HI (match_dup 1) (const_int 8))
-			   (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorhi3_ashift_8_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(ior:HI (ashift:HI (match_operand:HI 1 "register_operand" "r")
-			   (const_int 8))
-		(match_operand:HI 2 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
   "or.b\\t%s1,%t0"
   [(set_attr "length" "2")])
 
-(define_insn_and_split "*iorhi3_lshiftrt_8"
+(define_insn "*iorhi3_lshiftrt_8"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(ior:HI (lshiftrt:HI (match_operand:HI 1 "register_operand" "r")
 			     (const_int 8))
 		(match_operand:HI 2 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:HI (lshiftrt:HI (match_dup 1) (const_int 8))
-			   (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorhi3_lshiftrt_8_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(ior:HI (lshiftrt:HI (match_operand:HI 1 "register_operand" "r")
-			     (const_int 8))
-		(match_operand:HI 2 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
   "or.b\\t%t1,%s0"
   [(set_attr "length" "2")])
 
-(define_insn_and_split "*iorhi3_two_qi"
+(define_insn "*iorhi3_two_qi"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(ior:HI (zero_extend:HI (match_operand:QI 1 "register_operand" "0"))
 		(ashift:HI (match_operand:HI 2 "register_operand" "r")
 			   (const_int 8))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:HI (zero_extend:HI (match_dup 1))
-			   (ashift:HI (match_dup 2) (const_int 8))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorhi3_two_qi_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(ior:HI (zero_extend:HI (match_operand:QI 1 "register_operand" "0"))
-		(ashift:HI (match_operand:HI 2 "register_operand" "r")
-			   (const_int 8))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.b\\t%s2,%t0"
   [(set_attr "length" "2")])
 
-(define_insn_and_split "*iorhi3_two_qi_mem"
+(define_insn "*iorhi3_two_qi_mem"
   [(set (match_operand:HI 0 "register_operand" "=&r")
 	(ior:HI (zero_extend:HI (match_operand:QI 1 "memory_operand" "m"))
 		(ashift:HI (subreg:HI (match_operand:QI 2 "memory_operand" "m") 0)
 			   (const_int 8))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:HI (zero_extend:HI (match_dup 1))
-			   (ashift:HI (subreg:HI (match_dup 2) 0)
-				      (const_int 8))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorhi3_two_qi_mem_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=&r")
-	(ior:HI (zero_extend:HI (match_operand:QI 1 "memory_operand" "m"))
-		(ashift:HI (subreg:HI (match_operand:QI 2 "memory_operand" "m") 0)
-			   (const_int 8))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.b\\t%X2,%t0\;mov.b\\t%X1,%s0"
   [(set_attr "length" "16")])
 
@@ -636,34 +351,20 @@
 			   (const_int 8))))]
   "reload_completed
    && byte_accesses_mergeable_p (XEXP (operands[2], 0), XEXP (operands[1], 0))"
-  [(parallel [(set (match_dup 0) (match_dup 3))
-	      (clobber (reg:CC CC_REG))])]
+  [(set (match_dup 0)
+	(match_dup 3))]
   {
     operands[3] = gen_rtx_MEM (HImode, XEXP (operands[2], 0));
   })
 
 ;; ior:SI
 
-(define_insn_and_split "*iorsi3_two_hi"
+(define_insn "*iorsi3_two_hi"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (zero_extend:SI (match_operand:HI 1 "register_operand" "0"))
 		(ashift:SI (match_operand:SI 2 "register_operand" "r")
 			   (const_int 16))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (zero_extend:SI (match_dup 1))
-			   (ashift:SI (match_dup 2) (const_int 16))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi3_two_hi_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (zero_extend:SI (match_operand:HI 1 "register_operand" "0"))
-		(ashift:SI (match_operand:SI 2 "register_operand" "r")
-			   (const_int 16))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.w\\t%f2,%e0"
   [(set_attr "length" "2")])
 
@@ -676,39 +377,23 @@
   ""
   "#"
   "&& reload_completed"
-  [(parallel [(set (match_dup 3)
-		   (ior:HI (zero_extend:HI (match_dup 1))
-			   (ashift:HI (subreg:HI (match_dup 2) 0)
-				      (const_int 8))))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0) (zero_extend:SI (match_dup 3)))
-	      (clobber (reg:CC CC_REG))])]
+  [(set (match_dup 3)
+	(ior:HI (zero_extend:HI (match_dup 1))
+		(ashift:HI (subreg:HI (match_dup 2) 0)
+			   (const_int 8))))
+   (set (match_dup 0)
+	(zero_extend:SI (match_dup 3)))]
   {
     operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));
   })
 
-(define_insn_and_split "*iorsi3_e2f"
+(define_insn "*iorsi3_e2f"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (and:SI (match_operand:SI 1 "register_operand" "0")
 			(const_int -65536))
 		(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
 			     (const_int 16))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (and:SI (match_dup 1) (const_int -65536))
-			   (lshiftrt:SI (match_dup 2) (const_int 16))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi3_e2f_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (and:SI (match_operand:SI 1 "register_operand" "0")
-			(const_int -65536))
-		(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
-			     (const_int 16))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.w\\t%e2,%f0"
   [(set_attr "length" "2")])
 
@@ -720,87 +405,43 @@
   ""
   "#"
   "&& reload_completed"
-  [(parallel [(set (match_dup 3)
-		   (ior:HI (zero_extend:HI (match_dup 1))
-			   (ashift:HI (match_dup 4) (const_int 8))))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0) (sign_extend:SI (match_dup 3)))
-	      (clobber (reg:CC CC_REG))])]
+  [(set (match_dup 3)
+	(ior:HI (zero_extend:HI (match_dup 1))
+		(ashift:HI (match_dup 4)
+			   (const_int 8))))
+   (set (match_dup 0)
+	(sign_extend:SI (match_dup 3)))]
   {
     operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));
     operands[4] = gen_rtx_REG (HImode, REGNO (operands[2]));
   })
 
-(define_insn_and_split "*iorsi3_w"
+(define_insn "*iorsi3_w"
   [(set (match_operand:SI 0 "register_operand" "=r,&r")
 	(ior:SI (and:SI (match_operand:SI 1 "register_operand" "0,0")
 			(const_int -256))
 		(zero_extend:SI (match_operand:QI 2 "general_operand_src" "r,g>"))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (and:SI (match_dup 1) (const_int -256))
-			   (zero_extend:SI (match_dup 2))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi3_w_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r,&r")
-	(ior:SI (and:SI (match_operand:SI 1 "register_operand" "0,0")
-			(const_int -256))
-		(zero_extend:SI (match_operand:QI 2 "general_operand_src" "r,g>"))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.b\\t%X2,%w0"
   [(set_attr "length" "2,8")])
 
-(define_insn_and_split "*iorsi3_ashift_31"
+(define_insn "*iorsi3_ashift_31"
   [(set (match_operand:SI 0 "register_operand" "=&r")
 	(ior:SI (ashift:SI (match_operand:SI 1 "register_operand" "r")
 			   (const_int 31))
 		(match_operand:SI 2 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (ashift:SI (match_dup 1) (const_int 31))
-			   (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi3_ashift_31_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=&r")
-	(ior:SI (ashift:SI (match_operand:SI 1 "register_operand" "r")
-			   (const_int 31))
-		(match_operand:SI 2 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
   "rotxl.l\\t%S0\;bor\\t#0,%w1\;rotxr.l\\t%S0"
   [(set_attr "length" "6")
    (set_attr "cc" "set_znv")])
 
-(define_insn_and_split "*iorsi3_and_ashift"
+(define_insn "*iorsi3_and_ashift"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (and:SI (ashift:SI (match_operand:SI 1 "register_operand" "r")
 				   (match_operand:SI 2 "const_int_operand" "n"))
 			(match_operand:SI 3 "single_one_operand" "n"))
 		(match_operand:SI 4 "register_operand" "0")))]
   "(INTVAL (operands[3]) & ~0xffff) == 0"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (and:SI (ashift:SI (match_dup 1) (match_dup 2))
-				   (match_dup 3))
-			  (match_dup 4)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi3_and_ashift_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (and:SI (ashift:SI (match_operand:SI 1 "register_operand" "r")
-				   (match_operand:SI 2 "const_int_operand" "n"))
-			(match_operand:SI 3 "single_one_operand" "n"))
-		(match_operand:SI 4 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  "(INTVAL (operands[3]) & ~0xffff) == 0"
 {
   rtx srcpos = GEN_INT (exact_log2 (INTVAL (operands[3]))
 			- INTVAL (operands[2]));
@@ -811,29 +452,13 @@
 }
   [(set_attr "length" "6")])
 
-(define_insn_and_split "*iorsi3_and_lshiftrt"
+(define_insn "*iorsi3_and_lshiftrt"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
 				     (match_operand:SI 2 "const_int_operand" "n"))
 			(match_operand:SI 3 "single_one_operand" "n"))
 		(match_operand:SI 4 "register_operand" "0")))]
   "((INTVAL (operands[3]) << INTVAL (operands[2])) & ~0xffff) == 0"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (and:SI (lshiftrt:SI (match_dup 1) (match_dup 2))
-				   (match_dup 3))
-			   (match_dup 4)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi3_and_lshiftrt_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-				     (match_operand:SI 2 "const_int_operand" "n"))
-			(match_operand:SI 3 "single_one_operand" "n"))
-		(match_operand:SI 4 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  "((INTVAL (operands[3]) << INTVAL (operands[2])) & ~0xffff) == 0"
 {
   rtx srcpos = GEN_INT (exact_log2 (INTVAL (operands[3]))
 			+ INTVAL (operands[2]));
@@ -844,60 +469,27 @@
 }
   [(set_attr "length" "6")])
 
-(define_insn_and_split "*iorsi3_zero_extract"
+(define_insn "*iorsi3_zero_extract"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (zero_extract:SI (match_operand:SI 1 "register_operand" "r")
 				 (const_int 1)
 				 (match_operand:SI 2 "const_int_operand" "n"))
 		(match_operand:SI 3 "register_operand" "0")))]
   "INTVAL (operands[2]) < 16"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (zero_extract:SI (match_dup 1)
-					    (const_int 1)
-					    (match_dup 2))
-			   (match_dup 3)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi3_zero_extract_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (zero_extract:SI (match_operand:SI 1 "register_operand" "r")
-				 (const_int 1)
-				 (match_operand:SI 2 "const_int_operand" "n"))
-		(match_operand:SI 3 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  "INTVAL (operands[2]) < 16"
   "bld\\t%Z2,%Y1\;bor\\t#0,%w0\;bst\\t#0,%w0"
   [(set_attr "length" "6")])
 
-(define_insn_and_split "*iorsi3_and_lshiftrt_n_sb"
+(define_insn "*iorsi3_and_lshiftrt_n_sb"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
 				     (const_int 30))
 			(const_int 2))
 		(match_operand:SI 2 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (and:SI (lshiftrt:SI (match_dup 1) (const_int 30))
-				   (const_int 2))
-			   (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi3_and_lshiftrt_n_sb_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-				     (const_int 30))
-			(const_int 2))
-		(match_operand:SI 2 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
   "rotl.l\\t%S1\;rotr.l\\t%S1\;bor\\t#1,%w0\;bst\\t#1,%w0"
   [(set_attr "length" "8")])
 
-(define_insn_and_split "*iorsi3_and_lshiftrt_9_sb"
+(define_insn "*iorsi3_and_lshiftrt_9_sb"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
 				     (const_int 9))
@@ -905,25 +497,6 @@
 		(match_operand:SI 2 "register_operand" "0")))
    (clobber (match_scratch:HI 3 "=&r"))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (and:SI (lshiftrt:SI (match_dup 1) (const_int 9))
-				   (const_int 4194304))
-			   (match_dup 2)))
-	      (clobber (match_dup 3))
-	      (clobber (reg:CC CC_REG))])])
-
-
-(define_insn "*iorsi3_and_lshiftrt_9_sb_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-				     (const_int 9))
-			(const_int 4194304))
-		(match_operand:SI 2 "register_operand" "0")))
-   (clobber (match_scratch:HI 3 "=&r"))
-   (clobber (reg:CC CC_REG))]
-  ""
 {
   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))
     return "shll.l\\t%S1\;xor.w\\t%T3,%T3\;bst\\t#6,%s3\;or.w\\t%T3,%e0";
@@ -955,12 +528,11 @@
   [(parallel [(set (match_dup 3)
 		   (ashift:HI (match_dup 3)
 			      (const_int 7)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0)
-		    (ior:SI (ashift:SI (match_dup 1) (const_int 16))
-			    (match_dup 0)))
-	      (clobber (reg:CC CC_REG))])]
+	      (clobber (scratch:QI))])
+   (set (match_dup 0)
+	(ior:SI (ashift:SI (match_dup 1)
+			   (const_int 16))
+		(match_dup 0)))]
   {
     operands[3] = gen_rtx_REG (HImode, REGNO (operands[1]));
   })
@@ -974,43 +546,27 @@
   "epilogue_completed
    && !(find_regno_note (insn, REG_DEAD, REGNO (operands[1]))
 	&& REGNO (operands[0]) != REGNO (operands[1]))"
-  [(parallel [(set (match_dup 2) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])
+  [(set (match_dup 2)
+	(match_dup 1))
    (parallel [(set (match_dup 3)
 		   (ashift:HI (match_dup 3)
 			      (const_int 7)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0)
-		   (ior:SI (ashift:SI (match_dup 2) (const_int 16))
-			   (match_dup 0)))
-	      (clobber (reg:CC CC_REG))])]
+	      (clobber (scratch:QI))])
+   (set (match_dup 0)
+	(ior:SI (ashift:SI (match_dup 2)
+			   (const_int 16))
+		(match_dup 0)))]
   {
     operands[3] = gen_rtx_REG (HImode, REGNO (operands[2]));
   })
 
-(define_insn_and_split "*iorsi2_and_1_lshiftrt_1"
+(define_insn "*iorsi2_and_1_lshiftrt_1"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (and:SI (match_operand:SI 1 "register_operand" "0")
 			(const_int 1))
 		(lshiftrt:SI (match_dup 1)
 			     (const_int 1))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (ior:SI (and:SI (match_dup 1) (const_int 1))
-			   (lshiftrt:SI (match_dup 1) (const_int 1))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*iorsi2_and_1_lshiftrt_1_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (and:SI (match_operand:SI 1 "register_operand" "0")
-			(const_int 1))
-		(lshiftrt:SI (match_dup 1)
-			     (const_int 1))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "shlr.l\\t%S0\;bor\\t#0,%w0\;bst\\t#0,%w0"
   [(set_attr "length" "6")])
 
@@ -1023,15 +579,14 @@
   ""
   "#"
   "&& reload_completed"
-  [(parallel [(set (match_dup 3)
-		   (ior:HI (ashift:HI (match_dup 4) (const_int 8))
-			   (match_dup 3)))
-	      (clobber (reg:CC CC_REG))])
+  [(set (match_dup 3)
+        (ior:HI (ashift:HI (match_dup 4)
+			   (const_int 8))
+		(match_dup 3)))
    (parallel [(set (match_dup 0)
 		   (ashift:SI (match_dup 0)
 			      (const_int 16)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])]
+	      (clobber (scratch:QI))])]
   {
     operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));
     operands[4] = gen_rtx_REG (HImode, REGNO (operands[2]));
@@ -1047,16 +602,14 @@
   ""
   "#"
   "&& reload_completed"
-  [(parallel [(set (match_dup 3)
-		   (ior:HI (zero_extend:HI (match_dup 1))
-			   (ashift:HI (subreg:HI (match_dup 2) 0)
-				      (const_int 8))))
-	      (clobber (reg:CC CC_REG))])
+  [(set (match_dup 3)
+        (ior:HI (zero_extend:HI (match_dup 1))
+		(ashift:HI (subreg:HI (match_dup 2) 0)
+			   (const_int 8))))
    (parallel [(set (match_dup 0)
 		   (ashift:SI (match_dup 0)
 			      (const_int 16)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])]
+	      (clobber (scratch:QI))])]
   {
     operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));
   })
@@ -1084,12 +637,11 @@
   [(parallel [(set (match_dup 3)
 		   (ashift:HI (match_dup 3)
 			      (const_int 7)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0)
-		   (plus:SI (mult:SI (match_dup 1) (const_int 65536))
-			    (match_dup 0)))
-	      (clobber (reg:CC CC_REG))])]
+	      (clobber (scratch:QI))])
+   (set (match_dup 0)
+	(plus:SI (mult:SI (match_dup 1)
+			  (const_int 65536))
+		 (match_dup 0)))]
   {
     operands[3] = gen_rtx_REG (HImode, REGNO (operands[1]));
   })
@@ -1103,17 +655,16 @@
   "epilogue_completed
    && !(find_regno_note (insn, REG_DEAD, REGNO (operands[1]))
 	&& REGNO (operands[0]) != REGNO (operands[1]))"
-  [(parallel [(set (match_dup 2) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])
+  [(set (match_dup 2)
+	(match_dup 1))
    (parallel [(set (match_dup 3)
 		   (ashift:HI (match_dup 3)
 			      (const_int 7)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0)
-		   (plus:SI (mult:SI (match_dup 2) (const_int 65536))
-			    (match_dup 0)))
-	      (clobber (reg:CC CC_REG))])]
+	      (clobber (scratch:QI))])
+   (set (match_dup 0)
+	(plus:SI (mult:SI (match_dup 2)
+			  (const_int 65536))
+		 (match_dup 0)))]
   {
     operands[3] = gen_rtx_REG (HImode, REGNO (operands[2]));
   })
@@ -1130,37 +681,23 @@
   [(parallel [(set (match_dup 2)
 		   (ashift:HI (match_dup 2)
 			      (const_int 8)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0) (sign_extend:SI (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])
+	      (clobber (scratch:QI))])
+   (set (match_dup 0)
+	(sign_extend:SI (match_dup 2)))
    (parallel [(set (match_dup 0)
 		   (ashiftrt:SI (match_dup 0)
 				(const_int 1)))
-	      (clobber (scratch:QI))
-	      (clobber (reg:CC CC_REG))])]
+	      (clobber (scratch:QI))])]
   {
     operands[2] = gen_rtx_REG (HImode, REGNO (operands[0]));
   })
 
 ;; Storing a part of HImode to QImode.
 
-(define_insn_and_split ""
-  [(set (match_operand:QI 0 "general_operand_dst" "=rm<")
-	(subreg:QI (lshiftrt:HI (match_operand:HI 1 "register_operand" "r")
-				(const_int 8)) 1))]
-  ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (subreg:QI (lshiftrt:HI (match_dup 1)
-							 (const_int 8)) 1))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (match_operand:QI 0 "general_operand_dst" "=rm<")
 	(subreg:QI (lshiftrt:HI (match_operand:HI 1 "register_operand" "r")
-				(const_int 8)) 1))
-   (clobber (reg:CC CC_REG))]
+				(const_int 8)) 1))]
   ""
   "mov.b\\t%t1,%R0"
   [(set_attr "cc" "set_znv")
@@ -1168,111 +705,69 @@
 
 ;; Storing a part of SImode to QImode.
 
-(define_insn_and_split ""
-  [(set (match_operand:QI 0 "general_operand_dst" "=rm<")
-	(subreg:QI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-				(const_int 8)) 3))]
-  ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (subreg:QI (lshiftrt:SI (match_dup 1) (const_int 8)) 3))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (match_operand:QI 0 "general_operand_dst" "=rm<")
 	(subreg:QI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-				(const_int 8)) 3))
-   (clobber (reg:CC CC_REG))]
+				(const_int 8)) 3))]
   ""
   "mov.b\\t%x1,%R0"
   [(set_attr "cc" "set_znv")
    (set_attr "length" "8")])
 
-(define_insn_and_split ""
-  [(set (match_operand:QI 0 "general_operand_dst" "=rm<")
-	(subreg:QI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-				(const_int 16)) 3))
-   (clobber (match_scratch:SI 2 "=&r"))]
-  ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (subreg:QI (lshiftrt:SI (match_dup 1) (const_int 16)) 3))
-	      (clobber (match_dup 2))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (match_operand:QI 0 "general_operand_dst" "=rm<")
 	(subreg:QI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
 				(const_int 16)) 3))
-   (clobber (match_scratch:SI 2 "=&r"))
-   (clobber (reg:CC CC_REG))]
+   (clobber (match_scratch:SI 2 "=&r"))]
   ""
   "mov.w\\t%e1,%f2\;mov.b\\t%w2,%R0"
   [(set_attr "cc" "set_znv")
    (set_attr "length" "10")])
 
-(define_insn_and_split ""
-  [(set (match_operand:QI 0 "general_operand_dst" "=rm<")
-	(subreg:QI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
-				(const_int 24)) 3))
-   (clobber (match_scratch:SI 2 "=&r"))]
-  ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (subreg:QI (lshiftrt:SI (match_dup 1) (const_int 24)) 3))
-	      (clobber (match_dup 2))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (match_operand:QI 0 "general_operand_dst" "=rm<")
 	(subreg:QI (lshiftrt:SI (match_operand:SI 1 "register_operand" "r")
 				(const_int 24)) 3))
-   (clobber (match_scratch:SI 2 "=&r"))
-   (clobber (reg:CC CC_REG))]
+   (clobber (match_scratch:SI 2 "=&r"))]
   ""
   "mov.w\\t%e1,%f2\;mov.b\\t%x2,%R0"
   [(set_attr "cc" "set_znv")
    (set_attr "length" "10")])
 
-;;(define_insn_and_split ""
-;;  [(set (pc)
-;;	(if_then_else (eq (zero_extract:SI (subreg:SI (match_operand:QI 0 "register_operand" "") 0)
-;;					   (const_int 1)
-;;					   (const_int 7))
-;;			  (const_int 0))
-;;		      (label_ref (match_operand 1 "" ""))
-;;		      (pc)))]
-;;  ""
-;;  "#"
-;;  ""
-;;  [(set (cc0) (compare (match_dup 0)
-;;		       (const_int 0)))
-;;   (set (pc)
-;;	(if_then_else (ge (cc0)
-;;			  (const_int 0))
-;;		      (label_ref (match_dup 1))
-;;		      (pc)))]
-;;  "")
-;; 
-;; (define_insn_and_split ""
-;;  [(set (pc)
-;; 	(if_then_else (ne (zero_extract:SI (subreg:SI (match_operand:QI 0 "register_operand" "") 0)
-;; 					   (const_int 1)
-;; 					   (const_int 7))
-;; 			  (const_int 0))
-;; 		      (label_ref (match_operand 1 "" ""))
-;; 		      (pc)))]
-;;   ""
-;;   "#"
-;;   ""
-;;   [(set (cc0) (compare (match_dup 0)
-;; 		       (const_int 0)))
-;;    (set (pc)
-;; 	(if_then_else (lt (cc0)
-;; 			  (const_int 0))
-;; 		      (label_ref (match_dup 1))
-;; 		      (pc)))]
-;;   "")
+(define_insn_and_split ""
+  [(set (pc)
+	(if_then_else (eq (zero_extract:SI (subreg:SI (match_operand:QI 0 "register_operand" "") 0)
+					   (const_int 1)
+					   (const_int 7))
+			  (const_int 0))
+		      (match_operand 1 "pc_or_label_operand" "")
+		      (match_operand 2 "pc_or_label_operand" "")))]
+  "operands[1] == pc_rtx || operands[2] == pc_rtx"
+  "#"
+  ""
+  [(set (cc0) (compare (match_dup 0)
+		       (const_int 0)))
+   (set (pc)
+	(if_then_else (ge (cc0)
+			  (const_int 0))
+		      (match_dup 1)
+		      (match_dup 2)))])
+
+(define_insn_and_split ""
+  [(set (pc)
+	(if_then_else (ne (zero_extract:SI (subreg:SI (match_operand:QI 0 "register_operand" "") 0)
+					   (const_int 1)
+					   (const_int 7))
+			  (const_int 0))
+		      (match_operand 1 "pc_or_label_operand" "")
+		      (match_operand 2 "pc_or_label_operand" "")))]
+  "operands[1] == pc_rtx || operands[2] == pc_rtx"
+  "#"
+  ""
+  [(set (cc0) (compare (match_dup 0)
+		       (const_int 0)))
+   (set (pc)
+	(if_then_else (lt (cc0)
+			  (const_int 0))
+		      (match_dup 1)
+		      (match_dup 2)))])
diff --git a/gcc/config/h8300/constraints.md b/gcc/config/h8300/constraints.md
index 2f6768073a1..d24518225f8 100644
--- a/gcc/config/h8300/constraints.md
+++ b/gcc/config/h8300/constraints.md
@@ -216,14 +216,3 @@
   (and (match_test "TARGET_H8300SX")
        (match_code "mem")
        (match_test "CONSTANT_P (XEXP (op, 0))")))
-
-
-(define_constraint "A0"
-  "@internal"
-  (and (match_code "const_int")
-       (match_test "!satisfies_constraint_L (op)")
-       (match_test "!satisfies_constraint_N (op)")
-       (match_test "((INTVAL (op) & 0xff) == INTVAL (op)
-		     || (INTVAL (op) & 0xff00) == INTVAL (op)
-		     || INTVAL (op) == 0xffff
-		     || INTVAL (op) == 0xfffe)")))
diff --git a/gcc/config/h8300/divmod.md b/gcc/config/h8300/divmod.md
index b5ab6b727bb..7e0d7f09dc9 100644
--- a/gcc/config/h8300/divmod.md
+++ b/gcc/config/h8300/divmod.md
@@ -2,45 +2,23 @@
 ;; DIVIDE/MOD INSTRUCTIONS
 ;; ----------------------------------------------------------------------
 
-(define_insn_and_split "udiv<mode>3"
+(define_insn "udiv<mode>3"
   [(set (match_operand:HSI 0 "register_operand" "=r")
 	(udiv:HSI (match_operand:HSI 1 "register_operand" "0")
 		  (match_operand:HSI 2 "reg_or_nibble_operand" "r IP4>X")))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (udiv:HSI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "udiv<mode>3_clobber_flags"
-  [(set (match_operand:HSI 0 "register_operand" "=r")
-	(udiv:HSI (match_operand:HSI 1 "register_operand" "0")
-		  (match_operand:HSI 2 "reg_or_nibble_operand" "r IP4>X")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   { return <MODE>mode == HImode ? "divu.w\\t%T2,%T0" : "divu.l\\t%S2,%S0"; }
   [(set_attr "length" "4")])
 
-(define_insn_and_split "div<mode>3"
+(define_insn "div<mode>3"
   [(set (match_operand:HSI 0 "register_operand" "=r")
 	(div:HSI (match_operand:HSI 1 "register_operand" "0")
 		 (match_operand:HSI 2 "reg_or_nibble_operand" "r IP4>X")))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (div:HSI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "div<mode>3_clobber_flags"
-  [(set (match_operand:HSI 0 "register_operand" "=r")
-	(div:HSI (match_operand:HSI 1 "register_operand" "0")
-		 (match_operand:HSI 2 "reg_or_nibble_operand" "r IP4>X")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   { return <MODE>mode == HImode ? "divs.w\\t%T2,%T0" : "divs.l\\t%S2,%S0"; }
   [(set_attr "length" "4")])
 
-(define_insn_and_split "udivmodqi4"
+(define_insn "udivmodqi4"
   [(set (match_operand:QI 0 "register_operand" "=r")
 	(truncate:QI
 	  (udiv:HI
@@ -52,30 +30,6 @@
 	    (match_dup 1)
 	    (zero_extend:HI (match_dup 2)))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (truncate:QI
-				   (udiv:HI (match_dup 1)
-					    (zero_extend:HI (match_dup 2)))))
-	      (set (match_dup 3) (truncate:QI
-				   (umod:HI (match_dup 1)
-					    (zero_extend:HI (match_dup 2)))))
-	      (clobber (reg:CC CC_REG))])])
-							
-
-(define_insn "udivmodqi4_clobber_flags"
-  [(set (match_operand:QI 0 "register_operand" "=r")
-	(truncate:QI
-	  (udiv:HI
-	    (match_operand:HI 1 "register_operand" "0")
-	    (zero_extend:HI (match_operand:QI 2 "register_operand" "r")))))
-   (set (match_operand:QI 3 "register_operand" "=r")
-	(truncate:QI
-	  (umod:HI
-	    (match_dup 1)
-	    (zero_extend:HI (match_dup 2)))))
-   (clobber (reg:CC CC_REG))]
-  ""
 {
   if (find_reg_note (insn, REG_UNUSED, operands[3]))
     return "divxu.b\\t%X2,%T0";
@@ -84,7 +38,7 @@
 }
   [(set_attr "length" "4")])
 
-(define_insn_and_split "divmodqi4"
+(define_insn "divmodqi4"
   [(set (match_operand:QI 0 "register_operand" "=r")
 	(truncate:QI
 	  (div:HI
@@ -96,29 +50,6 @@
 	    (match_dup 1)
 	    (sign_extend:HI (match_dup 2)))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (truncate:QI
-				   (div:HI (match_dup 1)
-					   (sign_extend:HI (match_dup 2)))))
-	      (set (match_dup 3) (truncate:QI
-				   (mod:HI (match_dup 1)
-					   (sign_extend:HI (match_dup 2)))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "divmodqi4_clobber_flags"
-  [(set (match_operand:QI 0 "register_operand" "=r")
-	(truncate:QI
-	  (div:HI
-	    (match_operand:HI 1 "register_operand" "0")
-	    (sign_extend:HI (match_operand:QI 2 "register_operand" "r")))))
-   (set (match_operand:QI 3 "register_operand" "=r")
-	(truncate:QI
-	  (mod:HI
-	    (match_dup 1)
-	    (sign_extend:HI (match_dup 2)))))
-   (clobber (reg:CC CC_REG))]
-  ""
 {
   if (find_reg_note (insn, REG_UNUSED, operands[3]))
     return "divxs.b\\t%X2,%T0";
@@ -127,7 +58,7 @@
 }
   [(set_attr "length" "6")])
 
-(define_insn_and_split "udivmodhi4"
+(define_insn "udivmodhi4"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(truncate:HI
 	  (udiv:SI
@@ -139,29 +70,6 @@
 	    (match_dup 1)
 	    (zero_extend:SI (match_dup 2)))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (truncate:HI
-				   (udiv:SI (match_dup 1)
-					    (zero_extend:SI (match_dup 2)))))
-	      (set (match_dup 3) (truncate:HI
-				   (umod:SI (match_dup 1)
-					    (zero_extend:SI (match_dup 2)))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "udivmodhi4_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(truncate:HI
-	  (udiv:SI
-	    (match_operand:SI 1 "register_operand" "0")
-	    (zero_extend:SI (match_operand:HI 2 "register_operand" "r")))))
-   (set (match_operand:HI 3 "register_operand" "=r")
-	(truncate:HI
-	  (umod:SI
-	    (match_dup 1)
-	    (zero_extend:SI (match_dup 2)))))
-   (clobber (reg:CC CC_REG))]
-  ""
 {
   if (find_reg_note (insn, REG_UNUSED, operands[3]))
     return "divxu.w\\t%T2,%S0";
@@ -170,7 +78,7 @@
 }
   [(set_attr "length" "4")])
 
-(define_insn_and_split "divmodhi4"
+(define_insn "divmodhi4"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(truncate:HI
 	  (div:SI
@@ -182,29 +90,6 @@
 	    (match_dup 1)
 	    (sign_extend:SI (match_dup 2)))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (truncate:HI
-				   (div:SI (match_dup 1)
-					   (sign_extend:SI (match_dup 2)))))
-	      (set (match_dup 3) (truncate:HI
-				   (mod:SI (match_dup 1)
-					   (sign_extend:SI (match_dup 2)))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "divmodhi4_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(truncate:HI
-	  (div:SI
-	    (match_operand:SI 1 "register_operand" "0")
-	    (sign_extend:SI (match_operand:HI 2 "register_operand" "r")))))
-   (set (match_operand:HI 3 "register_operand" "=r")
-	(truncate:HI
-	  (mod:SI
-	    (match_dup 1)
-	    (sign_extend:SI (match_dup 2)))))
-   (clobber (reg:CC CC_REG))]
-  ""
 {
   if (find_reg_note (insn, REG_UNUSED, operands[3]))
     return "divxs.w\\t%T2,%S0";
diff --git a/gcc/config/h8300/extensions.md b/gcc/config/h8300/extensions.md
index 6b69689cfd3..cf6fb6d1eb9 100644
--- a/gcc/config/h8300/extensions.md
+++ b/gcc/config/h8300/extensions.md
@@ -11,35 +11,15 @@
       operands[1] = force_reg (QImode, operands[1]);
   })
 
-(define_insn_and_split "*zero_extendqihi2"
+(define_insn "*zero_extendqihi2_h8300hs"
   [(set (match_operand:HI 0 "register_operand" "=r,r")
 	(zero_extend:HI (match_operand:QI 1 "general_operand_src" "0,g>")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (zero_extend:HI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*zero_extendqihi2_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r,r")
-	(zero_extend:HI (match_operand:QI 1 "general_operand_src" "0,g>")))
-   (clobber (reg:CC CC_REG))]
-  ""
   "@
   extu.w	%T0
   #"
-  [(set_attr "length" "2,10")])
-
-(define_insn "*zero_extendqihi2_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (zero_extend:HI (match_operand:QI 1 "register_operand" "0>"))
-	  (const_int 0)))
-   (set (match_operand:HI 0 "register_operand" "=r")
-	(zero_extend:HI (match_dup 1)))]
-  ""
-  "extu.w	%T0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2,10")
+   (set_attr "cc" "set_znv,set_znv")])
 
 ;; Split the zero extension of a general operand (actually a memory
 ;; operand) into a load of the operand and the actual zero extension
@@ -48,36 +28,34 @@
 
 (define_split
   [(set (match_operand:HI 0 "register_operand" "")
-	(zero_extend:HI (match_operand:QI 1 "general_operand_src" "")))
-   (clobber (reg:CC CC_REG))]
+	(zero_extend:HI (match_operand:QI 1 "general_operand_src" "")))]
   "reload_completed"
-  [(set (match_dup 2) (match_dup 1))
-   (parallel [(set (match_dup 0) (zero_extend:HI (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])]
+  [(set (match_dup 2)
+	(match_dup 1))
+   (set (match_dup 0)
+	(zero_extend:HI (match_dup 2)))]
   {
     operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));
   })
 
-(define_insn "*zero_extendqisi2"
+(define_insn "*zero_extendqisi2_h8300hs"
   [(set (match_operand:SI 0 "register_operand" "=r,r")
 	(zero_extend:SI (match_operand:QI 1 "general_operand_src" "0,g>")))]
-  "!reload_completed && !TARGET_H8300SX"
+  "!TARGET_H8300SX"
   "#")
 
-;; Two cases for the !H8/SX target.  One where there is an overlap
-;; between the source and destination, one where there is no overlap
 (define_split
   [(set (match_operand:SI 0 "register_operand" "")
 	(zero_extend:SI (match_operand:QI 1 "general_operand_src" "")))]
   "!TARGET_H8300SX
     && reg_overlap_mentioned_p (operands[0], operands[1])
     && reload_completed"
-  [(parallel [(set (match_dup 2) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 3) (zero_extend:HI (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0) (zero_extend:SI (match_dup 3)))
-	      (clobber (reg:CC CC_REG))])]
+  [(set (match_dup 2)
+	(match_dup 1))
+   (set (match_dup 3)
+	(zero_extend:HI (match_dup 2)))
+   (set (match_dup 0)
+	(zero_extend:SI (match_dup 3)))]
   {
     operands[2] = gen_lowpart (QImode, operands[0]);
     operands[3] = gen_lowpart (HImode, operands[0]);
@@ -89,41 +67,21 @@
   "!TARGET_H8300SX
     && !reg_overlap_mentioned_p (operands[0], operands[1])
     && reload_completed"
-  [(parallel [(set (match_dup 0) (const_int 0))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (strict_low_part (match_dup 2)) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])]
+  [(set (match_dup 0)
+	(const_int 0))
+   (set (strict_low_part (match_dup 2))
+	(match_dup 1))]
   {
     operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));
   })
 
-(define_insn_and_split "*zero_extendqisi2_h8sx"
+(define_insn "*zero_extendqisi2_h8sx"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(zero_extend:SI (match_operand:QI 1 "register_operand" "0")))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (zero_extend:SI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*zero_extendqisi2_h8sx_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(zero_extend:SI (match_operand:QI 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   "extu.l\t#2,%0"
-  [(set_attr "length" "2")])
-
-(define_insn "*zero_extendqisi2_h8sx_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (zero_extend:SI (match_operand:QI 1 "register_operand" "0"))
-	  (const_int 0)))
-   (set (match_operand:SI 0 "register_operand" "=r")
-	(zero_extend:SI (match_dup 1)))]
-  "TARGET_H8300SX"
-  "extu.l\t#2,%0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_znv")])
 
 (define_expand "zero_extendhisi2"
   [(set (match_operand:SI 0 "register_operand" "")
@@ -131,33 +89,13 @@
   ""
   "")
 
-(define_insn_and_split "*zero_extendhisi2"
+(define_insn "*zero_extendhisi2_h8300hs"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(zero_extend:SI (match_operand:HI 1 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (zero_extend:SI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*zero_extendhisi2_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(zero_extend:SI (match_operand:HI 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
-  "extu.l	%S0"
-  [(set_attr "length" "2")])
-
-(define_insn "*zero_extendhisi2_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (zero_extend:SI (match_operand:HI 1 "register_operand" "0"))
-	  (const_int 0)))
-   (set (match_operand:SI 0 "register_operand" "=r")
-	(zero_extend:SI (match_dup 1)))]
-  ""
   "extu.l	%S0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_znv")])
 
 (define_expand "extendqi<mode>2"
   [(set (match_operand:HSI 0 "register_operand" "")
@@ -165,79 +103,39 @@
   ""
   "")
 
-(define_insn_and_split "*extendqihi2"
+(define_insn "*extendqihi2_h8300hs"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(sign_extend:HI (match_operand:QI 1 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (sign_extend:HI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*extendqihi2_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(sign_extend:HI (match_operand:QI 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
-  "exts.w	%T0"
-  [(set_attr "length" "2")])
-
-(define_insn "*extendqihi2_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (sign_extend:HI (match_operand:QI 1 "register_operand" "0"))
-	  (const_int 0)))
-   (set (match_operand:HI 0 "register_operand" "=r")
-	(sign_extend:HI (match_dup 1)))]
-  ""
   "exts.w	%T0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_znv")])
 
 ;; The following pattern is needed because without the pattern, the
 ;; combiner would split (sign_extend:SI (reg:QI)) into two 24-bit
 ;; shifts, one ashift and one ashiftrt.
 
-(define_insn_and_split "*extendqisi2"
+(define_insn_and_split "*extendqisi2_h8300hs"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(sign_extend:SI (match_operand:QI 1 "register_operand" "0")))]
   "!TARGET_H8300SX"
   "#"
   "&& reload_completed"
-  [(parallel [(set (match_dup 2) (sign_extend:HI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0) (sign_extend:SI (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])]
+  [(set (match_dup 2)
+	(sign_extend:HI (match_dup 1)))
+   (set (match_dup 0)
+	(sign_extend:SI (match_dup 2)))]
   {
     operands[2] = gen_rtx_REG (HImode, REGNO (operands[0]));
   })
 
-(define_insn_and_split "*extendqisi2_h8sx"
+(define_insn "*extendqisi2_h8sx"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(sign_extend:SI (match_operand:QI 1 "register_operand" "0")))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (sign_extend:SI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*extendqisi2_h8sx_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(sign_extend:SI (match_operand:QI 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   "exts.l\t#2,%0"
-  [(set_attr "length" "2")])
-
-(define_insn "*extendqisi2_h8sx_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare
-	  (sign_extend:SI (match_operand:QI 1 "register_operand" "0"))
-	  (const_int 0)))
-   (set (match_operand:SI 0 "register_operand" "=r")
-	(sign_extend:SI (match_dup 1)))]
-  "TARGET_H8300SX"
-  "exts.l\t#2,%0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_znv")])
 
 (define_expand "extendhisi2"
   [(set (match_operand:SI 0 "register_operand" "")
@@ -245,31 +143,10 @@
   ""
   "")
 
-(define_insn_and_split "*extendhisi2"
+(define_insn "*extendhisi2_h8300hs"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(sign_extend:SI (match_operand:HI 1 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (sign_extend:SI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*extendhisi2_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(sign_extend:SI (match_operand:HI 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
-  "exts.l	%S0"
-  [(set_attr "length" "2")])
-
-(define_insn "*extendhisi2_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (sign_extend:SI (match_operand:HI 1 "register_operand" "0"))
-	  (const_int 0)))
-   (set (match_operand:SI 0 "register_operand" "=r")
-	(sign_extend:SI (match_dup 1)))]
-  ""
   "exts.l	%S0"
-  [(set_attr "length" "2")])
-
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_znv")])
diff --git a/gcc/config/h8300/genmova.sh b/gcc/config/h8300/genmova.sh
index 8ab018f70e1..22b01cc4e20 100644
--- a/gcc/config/h8300/genmova.sh
+++ b/gcc/config/h8300/genmova.sh
@@ -71,7 +71,8 @@ for s in QI HI; do
 		 (match_operand:$d 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/b.l @(%o2%C2,$src),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 EOF
 	;;
@@ -114,7 +115,8 @@ EOF
 		 (match_operand:$d 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/$opsize.l @(%o2%C2,$src),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 EOF
 	    ;;
@@ -132,7 +134,8 @@ EOF
 		  (const_int $amount)))]
   "TARGET_H8300SX"
   "mova/$opsize.l @(0,$src),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:$d 0 "register_operand" "=r,r")
@@ -141,7 +144,8 @@ EOF
 		 (match_operand:$d 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/$opsize.l @(%o2%C2,$src),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 EOF
 
@@ -170,7 +174,8 @@ EOF
 		(const_int $mask)))]
   "TARGET_H8300SX"
   "mova/$opsize.l @(0,$src),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:$d 0 "register_operand" "=r")
@@ -180,7 +185,8 @@ EOF
 		 (match_operand:$d 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/$opsize.l @(%o2%C2,$src),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 EOF
 	      done
diff --git a/gcc/config/h8300/h8300-modes.def b/gcc/config/h8300/h8300-modes.def
deleted file mode 100644
index 2f36c7ead8d..00000000000
--- a/gcc/config/h8300/h8300-modes.def
+++ /dev/null
@@ -1,21 +0,0 @@
-/* Definitions of target machine for GNU compiler. 
-   Copyright (C) 2020 Free Software Foundation, Inc.
-
-   This file is part of GCC.
-
-   GCC is free software; you can redistribute it and/or modify it
-   under the terms of the GNU General Public License as published
-   by the Free Software Foundation; either version 3, or (at your
-   option) any later version.
-
-   GCC is distributed in the hope that it will be useful, but WITHOUT
-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
-   License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GCC; see the file COPYING3.  If not see
-   <http://www.gnu.org/licenses/>.  */
-
-CC_MODE (CCZN);
-CC_MODE (CCZNV);
diff --git a/gcc/config/h8300/h8300-protos.h b/gcc/config/h8300/h8300-protos.h
index 0d3eda0611e..2416741e76a 100644
--- a/gcc/config/h8300/h8300-protos.h
+++ b/gcc/config/h8300/h8300-protos.h
@@ -26,8 +26,8 @@ along with GCC; see the file COPYING3.  If not see
 /* Declarations for functions used in insn-output.c.  */
 #ifdef RTX_CODE
 extern unsigned int compute_mov_length (rtx *);
-extern const char *output_plussi (rtx *, bool);
-extern unsigned int compute_plussi_length (rtx *, bool);
+extern const char *output_plussi (rtx *);
+extern unsigned int compute_plussi_length (rtx *);
 extern const char *output_a_shift (rtx *);
 extern unsigned int compute_a_shift_length (rtx, rtx *);
 extern const char *output_a_rotate (enum rtx_code, rtx *);
@@ -35,16 +35,14 @@ extern unsigned int compute_a_rotate_length (rtx *);
 extern const char *output_simode_bld (int, rtx[]);
 extern void final_prescan_insn (rtx_insn *, rtx *, int);
 extern int h8300_expand_movsi (rtx[]);
-extern machine_mode  h8300_select_cc_mode (RTX_CODE, rtx, rtx);
 extern void notice_update_cc (rtx, rtx_insn *);
 extern const char *output_logical_op (machine_mode, rtx *);
 extern unsigned int compute_logical_op_length (machine_mode,
 					       rtx *);
-
-extern int compute_logical_op_cc (machine_mode, rtx *);
-extern int compute_a_shift_cc (rtx, rtx *);
 #ifdef HAVE_ATTR_cc
 extern enum attr_cc compute_plussi_cc (rtx *);
+extern enum attr_cc compute_a_shift_cc (rtx, rtx *);
+extern enum attr_cc compute_logical_op_cc (machine_mode, rtx *);
 #endif
 extern void h8300_expand_branch (rtx[]);
 extern void h8300_expand_store (rtx[]);
diff --git a/gcc/config/h8300/h8300.c b/gcc/config/h8300/h8300.c
index 5e7a06bcd48..6875cd9b81a 100644
--- a/gcc/config/h8300/h8300.c
+++ b/gcc/config/h8300/h8300.c
@@ -132,13 +132,13 @@ static int pragma_interrupt;
 static int pragma_saveall;
 
 static const char *const names_big[] =
-{ "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "cc" };
+{ "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7" };
 
 static const char *const names_extended[] =
-{ "er0", "er1", "er2", "er3", "er4", "er5", "er6", "er7", "cc" };
+{ "er0", "er1", "er2", "er3", "er4", "er5", "er6", "er7" };
 
 static const char *const names_upper_extended[] =
-{ "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "cc" };
+{ "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7" };
 
 /* Points to one of the above.  */
 /* ??? The above could be put in an array indexed by CPU_TYPE.  */
@@ -469,11 +469,11 @@ h8300_emit_stack_adjustment (int sign, HOST_WIDE_INT size, bool in_prologue)
 					   stack_pointer_rtx,
 					    GEN_INT (sign * size)));
       if (size < 4)
-        F (x, 0);
+        F (x, in_prologue);
     }
   else
     F (emit_insn (gen_addsi3 (stack_pointer_rtx,
-			      stack_pointer_rtx, GEN_INT (sign * size))), 0);
+			      stack_pointer_rtx, GEN_INT (sign * size))), in_prologue);
 }
 
 /* Round up frame size SIZE.  */
@@ -520,7 +520,7 @@ push (int rn, bool in_prologue)
     x = gen_push_h8300hs_advanced (reg);
   else
     x = gen_push_h8300hs_normal (reg);
-  x = F (emit_insn (x), 0);
+  x = F (emit_insn (x), in_prologue);
   add_reg_note (x, REG_INC, stack_pointer_rtx);
   return x;
 }
@@ -756,7 +756,7 @@ h8300_expand_prologue (void)
     {
       /* Push fp.  */
       push (HARD_FRAME_POINTER_REGNUM, true);
-      F (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx), 0);
+      F (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx), true);
     }
 
   /* Push the rest of the registers in ascending order.  */
@@ -940,17 +940,11 @@ split_adds_subs (machine_mode mode, rtx *operands)
   switch (mode)
     {
     case E_HImode:
-      if (reload_completed)
-	gen_add = gen_addhi3_clobber_flags;
-      else
-	gen_add = gen_addhi3;
+      gen_add = gen_addhi3;
       break;
 
     case E_SImode:
-      if (reload_completed)
-	gen_add = gen_addsi3_clobber_flags;
-      else
-	gen_add = gen_addsi3;
+      gen_add = gen_addsi3;
       break;
 
     default:
@@ -1514,20 +1508,10 @@ h8300_print_operand (FILE *file, rtx x, int code)
 	}
       break;
     case 'j':
-      if (GET_CODE (x) == LT && GET_MODE (XEXP (x, 0)) == E_CCZNmode)
-	fputs ("mi", file);
-      else if (GET_CODE (x) == GE && GET_MODE (XEXP (x, 0)) == E_CCZNmode)
-	fputs ("pl", file);
-      else
-	fputs (cond_string (GET_CODE (x)), file);
+      fputs (cond_string (GET_CODE (x)), file);
       break;
     case 'k':
-      if (GET_CODE (x) == LT && GET_MODE (XEXP (x, 0)) == E_CCZNmode)
-	fputs ("pl", file);
-      else if (GET_CODE (x) == GE && GET_MODE (XEXP (x, 0)) == E_CCZNmode)
-	fputs ("mi", file);
-      else
-	fputs (cond_string (reverse_condition (GET_CODE (x))), file);
+      fputs (cond_string (reverse_condition (GET_CODE (x))), file);
       break;
     case 'm':
       gcc_assert (GET_CODE (x) == CONST_INT);
@@ -1936,23 +1920,6 @@ h8300_return_addr_rtx (int count, rtx frame)
   return ret;
 }
 
-
-machine_mode
-h8300_select_cc_mode (enum rtx_code cond, rtx op0, rtx op1)
-{
-  if (op1 == const0_rtx
-      && (cond == EQ || cond == NE || cond == LT || cond == GE)
-      && (GET_CODE (op0) == PLUS || GET_CODE (op0) == MINUS
-          || GET_CODE (op0) == NEG || GET_CODE (op0) == AND
-          || GET_CODE (op0) == IOR || GET_CODE (op0) == XOR
-          || GET_CODE (op0) == NOT || GET_CODE (op0) == ASHIFT
-	  || GET_CODE (op0) == REG || GET_CODE (op0) == MULT))
-    return CCZNmode;
-
-  return CCmode;
-}
-
-#if 0
 /* Update the condition code from the insn.  */
 
 void
@@ -2019,7 +1986,6 @@ notice_update_cc (rtx body, rtx_insn *insn)
       break;
     }
 }
-#endif
 
 /* Given that X occurs in an address of the form (plus X constant),
    return the part of X that is expected to be a register.  There are
@@ -2378,18 +2344,8 @@ static unsigned int
 h8300_binary_length (rtx_insn *insn, const h8300_length_table *table)
 {
   rtx set;
-  rtx pattern;
-
-  if (GET_CODE (insn) != INSN)
-    gcc_unreachable ();
 
-  pattern = PATTERN (insn);
-  if (GET_CODE (pattern) == PARALLEL
-      && GET_CODE (XVECEXP (pattern, 0, 0)) == SET
-      && GET_CODE (SET_SRC (XVECEXP (pattern, 0, 0))) == COMPARE)
-    set = XVECEXP (pattern, 0, 1);
-  else
-    set = single_set (insn);
+  set = single_set (insn);
   gcc_assert (set);
 
   if (BINARY_P (SET_SRC (set)))
@@ -2722,7 +2678,7 @@ compute_mov_length (rtx *operands)
 /* Output an addition insn.  */
 
 const char *
-output_plussi (rtx *operands, bool need_flags)
+output_plussi (rtx *operands)
 {
   machine_mode mode = GET_MODE (operands[0]);
 
@@ -2742,54 +2698,25 @@ output_plussi (rtx *operands, bool need_flags)
 
       switch ((unsigned int) intval & 0xffffffff)
 	{
-	/* INC/DEC set the flags, but adds/subs do not.  So if we
-	   need flags, use the former and not the latter.  */
 	case 0x00000001:
-	  if (need_flags)
-	    return "inc.l\t#1,%S0";
-	  else
-	    return "adds\t%2,%S0";
 	case 0x00000002:
-	  if (need_flags)
-	    return "inc.l\t#2,%S0";
-	  else
-	    return "adds\t%2,%S0";
-	case 0xffffffff:
-	  if (need_flags)
-	    return "dec.l\t#1,%S0";
-	  else
-	    return "subs\t%G2,%S0";
-	case 0xfffffffe:
-	  if (need_flags)
-	    return "dec.l\t#2,%S0";
-	  else
-	    return "subs\t%G2,%S0";
-
-	/* These six cases have optimized paths when we do not
-	   need flags.  Otherwise we let them fallthru.  */
 	case 0x00000004:
-	  if (!need_flags)
-	    return "adds\t%2,%S0";
+	  return "adds\t%2,%S0";
 
+	case 0xffffffff:
+	case 0xfffffffe:
 	case 0xfffffffc:
-	  if (!need_flags)
-	    return "subs\t%G2,%S0";
+	  return "subs\t%G2,%S0";
 
 	case 0x00010000:
 	case 0x00020000:
-	  if (!need_flags)
-	    {
-	      operands[2] = GEN_INT (intval >> 16);
-	      return "inc.w\t%2,%e0";
-	    }
+	  operands[2] = GEN_INT (intval >> 16);
+	  return "inc.w\t%2,%e0";
 
 	case 0xffff0000:
 	case 0xfffe0000:
-	  if (!need_flags)
-	    {
-	      operands[2] = GEN_INT (intval >> 16);
-	      return "dec.w\t%G2,%e0";
-	    }
+	  operands[2] = GEN_INT (intval >> 16);
+	  return "dec.w\t%G2,%e0";
 	}
 
       /* See if we can finish with 4 bytes.  */
@@ -2813,7 +2740,7 @@ output_plussi (rtx *operands, bool need_flags)
 /* Compute the length of an addition insn.  */
 
 unsigned int
-compute_plussi_length (rtx *operands, bool need_flags)
+compute_plussi_length (rtx *operands)
 {
   machine_mode mode = GET_MODE (operands[0]);
 
@@ -2835,31 +2762,21 @@ compute_plussi_length (rtx *operands, bool need_flags)
 	{
 	case 0x00000001:
 	case 0x00000002:
-	  return 2;
 	case 0x00000004:
-	  if (need_flags)
-	    return 6;
-	  else
-	    return 2;
+	  return 2;
 
 	case 0xffffffff:
 	case 0xfffffffe:
-	  return 2;
 	case 0xfffffffc:
-	  if (need_flags)
-	    return 6;
-	  else
-	    return 2;
+	  return 2;
 
 	case 0x00010000:
 	case 0x00020000:
-	  if (!need_flags)
-	    return 2;
+	  return 2;
 
 	case 0xffff0000:
 	case 0xfffe0000:
-	  if (!need_flags)
-	    return 2;
+	  return 2;
 	}
 
       /* See if we can finish with 4 bytes.  */
@@ -3205,7 +3122,7 @@ compute_logical_op_length (machine_mode mode, rtx *operands)
 
 /* Compute which flag bits are valid after a logical insn.  */
 
-int
+enum attr_cc
 compute_logical_op_cc (machine_mode mode, rtx *operands)
 {
   /* Figure out the logical op that we need to perform.  */
@@ -3278,7 +3195,6 @@ compute_logical_op_cc (machine_mode mode, rtx *operands)
   return cc;
 }
 
-#if 0
 /* Expand a conditional branch.  */
 
 void
@@ -3318,7 +3234,6 @@ h8300_expand_store (rtx operands[])
   tmp = gen_rtx_fmt_ee (code, GET_MODE (dest), cc0_rtx, const0_rtx);
   emit_insn (gen_rtx_SET (dest, tmp));
 }
-#endif
 
 /* Shifts.
 
@@ -4368,7 +4283,7 @@ compute_a_shift_length (rtx insn ATTRIBUTE_UNUSED, rtx *operands)
 
 /* Compute which flag bits are valid after a shift insn.  */
 
-int
+enum attr_cc
 compute_a_shift_cc (rtx insn ATTRIBUTE_UNUSED, rtx *operands)
 {
   rtx shift = operands[3];
@@ -5383,13 +5298,8 @@ h8300_move_ok (rtx dest, rtx src)
   else
     return true;
 
-  /* Validate that auto-inc doesn't affect OTHER.
-     But allow them post-reload.  Reload can create such RTL even
-     though it's not technically valid.  The semantics are well
-     defined by the hardware and match what one would expect
-     (the value pushed is the stack pointer's value at the start
-     of the instruction.  */
-  if (reload_completed || GET_RTX_CLASS (GET_CODE (addr)) != RTX_AUTOINC)
+  /* Validate that auto-inc doesn't affect OTHER.  */
+  if (GET_RTX_CLASS (GET_CODE (addr)) != RTX_AUTOINC)
     return true;
   addr = XEXP (addr, 0);
 
@@ -5607,7 +5517,4 @@ h8300_push_rounding (poly_int64 bytes)
 #undef TARGET_HAVE_SPECULATION_SAFE_VALUE
 #define TARGET_HAVE_SPECULATION_SAFE_VALUE speculation_safe_value_not_needed
 
-#undef TARGET_FLAGS_REGNUM
-#define TARGET_FLAGS_REGNUM 12
-
 struct gcc_target targetm = TARGET_INITIALIZER;
diff --git a/gcc/config/h8300/h8300.h b/gcc/config/h8300/h8300.h
index 99d85ff8138..bf20ce28e24 100644
--- a/gcc/config/h8300/h8300.h
+++ b/gcc/config/h8300/h8300.h
@@ -195,14 +195,14 @@ extern const char * const *h8_reg_names;
    eliminated during reloading in favor of either the stack or frame
    pointer.  */
 
-#define FIRST_PSEUDO_REGISTER 13
+#define FIRST_PSEUDO_REGISTER 12
 
 /* 1 for registers that have pervasive standard uses
    and are not available for the register allocator.  */
 
 #define FIXED_REGISTERS				\
-/* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap fp cc */	\
-  { 0, 0, 0, 0, 0, 0, 0, 1,  0, 1,  1, 1, 1 }
+/* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap fp */	\
+  { 0, 0, 0, 0, 0, 0, 0, 1,  0, 1,  1, 1 }
 
 /* 1 for registers not available across function calls.
    These must include the FIXED_REGISTERS and also any
@@ -216,11 +216,11 @@ extern const char * const *h8_reg_names;
 
 #define CALL_USED_REGISTERS			\
 /* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap fp */	\
-  { 1, 1, 1, 1, 0, 0, 0, 1,  1, 1,  1, 1, 1 }
+  { 1, 1, 1, 1, 0, 0, 0, 1,  1, 1,  1, 1 }
 
 #define REG_ALLOC_ORDER				\
 /* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap  fp */	\
-  { 2, 3, 0, 1, 4, 5, 6, 8,  7, 9, 10, 11, 12 }
+  { 2, 3, 0, 1, 4, 5, 6, 8,  7, 9, 10, 11 }
 
 /* A C expression that is nonzero if hard register NEW_REG can be
    considered for use as a rename register for OLD_REG register */
@@ -521,8 +521,6 @@ struct cum_arg
 #define MOVE_MAX	4
 #define MAX_MOVE_MAX	4
 
-#define SELECT_CC_MODE(OP, X, Y)       h8300_select_cc_mode (OP, X, Y)
-
 /* Nonzero if access to memory by bytes is slow and undesirable.  */
 #define SLOW_BYTE_ACCESS TARGET_SLOWBYTE
 
@@ -635,7 +633,7 @@ struct cum_arg
    This sequence is indexed by compiler's hard-register-number (see above).  */
 
 #define REGISTER_NAMES \
-{ "r0", "r1", "r2", "r3", "r4", "r5", "r6", "sp", "mac", "ap", "rap", "fp", "cc" }
+{ "r0", "r1", "r2", "r3", "r4", "r5", "r6", "sp", "mac", "ap", "rap", "fp" }
 
 #define ADDITIONAL_REGISTER_NAMES \
 { {"er0", 0}, {"er1", 1}, {"er2", 2}, {"er3", 3}, {"er4", 4}, \
diff --git a/gcc/config/h8300/h8300.md b/gcc/config/h8300/h8300.md
index 7ed2453f433..46ab2442576 100644
--- a/gcc/config/h8300/h8300.md
+++ b/gcc/config/h8300/h8300.md
@@ -65,8 +65,7 @@
    (MAC_REG	 8)
    (AP_REG	 9)
    (RAP_REG	10)
-   (FP_REG	11)
-   (CC_REG	12)])
+   (FP_REG	11)])
 
 ;; ----------------------------------------------------------------------
 ;; ATTRIBUTES
@@ -212,4 +211,4 @@
 (include "shiftrotate.md")
 (include "bitfield.md")
 (include "combiner.md")
-;;(include "peepholes.md")
+(include "peepholes.md")
diff --git a/gcc/config/h8300/jumpcall.md b/gcc/config/h8300/jumpcall.md
index b72a09e7eaf..3917cf18920 100644
--- a/gcc/config/h8300/jumpcall.md
+++ b/gcc/config/h8300/jumpcall.md
@@ -4,153 +4,79 @@
 
 ;; Conditional jump instructions
 
-(define_expand "cbranch<mode>4"
-  [(set (pc)
-	(if_then_else (match_operator 0 "ordered_comparison_operator"
-		        [(match_operand:QHSI 1 "h8300_dst_operand")
-			 (match_operand:QHSI 2 "h8300_src_operand")])
-		      (label_ref (match_operand 3 ""))
-		      (pc)))]
-  "")
-
-(define_insn_and_split "*branch_0"
-  [(set (pc)
-	(if_then_else (match_operator 0 "comparison_operator"
-		       [(match_operand:QHSI 1 "register_operand" "r")
-			(const_int 0)])
-		      (match_operand 2 "pc_or_label_operand" "")
-		      (match_operand 3 "pc_or_label_operand" "")))]
+(define_expand "cbranchqi4"
+  [(use (match_operator 0 "ordered_comparison_operator"
+         [(match_operand:QI 1 "h8300_dst_operand" "")
+          (match_operand:QI 2 "h8300_src_operand" "")]))
+   (use (match_operand 3 ""))]
   ""
-  "#"
-  "reload_completed"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (match_dup 1) (const_int 0)))
-   (set (pc)
-	(if_then_else (match_op_dup 0
-		       [(reg:CCZN CC_REG) (const_int 0)])
-		      (match_dup 2)
-		      (match_dup 3)))]
-  "")
+  {
+    h8300_expand_branch (operands);
+    DONE;
+  })
 
-(define_insn_and_split "*branch_65535"
-  [(set (pc)
-	(if_then_else (match_operator 0 "gtle_operator"
-		       [(match_operand:SI 1 "register_operand" "r")
-			(const_int 65535)])
-		      (match_operand 2 "pc_or_label_operand" "")
-		      (match_operand 3 "pc_or_label_operand" "")))]
+(define_expand "cbranchhi4"
+  [(use (match_operator 0 "ordered_comparison_operator"
+         [(match_operand:HI 1 "h8300_dst_operand" "")
+          (match_operand:HI 2 "h8300_src_operand" "")]))
+   (use (match_operand 3 ""))]
   ""
-  "#"
-  "reload_completed"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (and:SI (match_dup 1) (const_int -65536))
-		      (const_int 0)))
-   (set (pc)
-	(if_then_else (match_op_dup 0
-		       [(reg:CCZN CC_REG) (const_int 0)])
-		      (match_dup 2)
-		      (match_dup 3)))]
-  "")
+  {
+    h8300_expand_branch (operands);
+    DONE;
+  })
 
-(define_insn_and_split "*branch"
-  [(set (pc)
-	(if_then_else (match_operator 0 "comparison_operator"
-		       [(match_operand:QHSI 1 "h8300_dst_operand" "rQ")
-			(match_operand:QHSI 2 "h8300_src_operand" "rQi")])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+(define_expand "cbranchsi4"
+  [(use (match_operator 0 "ordered_comparison_operator"
+         [(match_operand:SI 1 "h8300_dst_operand" "")
+          (match_operand:SI 2 "h8300_src_operand" "")]))
+   (use (match_operand 3 ""))]
   ""
-  "#"
-  "reload_completed"
-  [(set (reg:CC CC_REG)
-	(compare:CC (match_dup 1) (match_dup 2)))
-   (set (pc)
-	(if_then_else (match_op_dup 0
-		       [(reg:CC CC_REG) (const_int 0)])
-		      (label_ref (match_dup 3)) (pc)))]
-  "")
+  {
+    h8300_expand_branch (operands);
+    DONE;
+  })
 
-(define_insn "*branch_1"
+(define_insn "branch"
   [(set (pc)
-	(if_then_else (match_operator 1 "comparison_operator"
-		       [(reg:CC CC_REG) (const_int 0)])
-		      (label_ref (match_operand 0 "" ""))
-		      (pc)))]
-  "reload_completed"
+	(if_then_else (match_operator 2 "comparison_operator"
+		       [(cc0) (const_int 0)])
+		      (match_operand 0 "pc_or_label_operand" "")
+		      (match_operand 1 "pc_or_label_operand" "")))]
+  "operands[0] == pc_rtx || operands[1] == pc_rtx"
 {
-  if (get_attr_length (insn) == 2)
-    return "b%j1	%l0";
-  else if (get_attr_length (insn) == 4)
-    return "b%j1	%l0:16";
-  else
-    return "b%k1	.Lh8BR%=\;jmp	@%l0\\n.Lh8BR%=:";
-}
- [(set_attr "type" "branch")
-   (set_attr "cc" "none")])
-
+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0
+      && (GET_CODE (operands[2]) == GT
+	  || GET_CODE (operands[2]) == GE
+	  || GET_CODE (operands[2]) == LE
+	  || GET_CODE (operands[2]) == LT))
+    {
+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;
+      return 0;
+    }
 
-(define_insn "*branch_1_false"
-  [(set (pc)
-	(if_then_else (match_operator 1 "comparison_operator"
-		       [(reg:CC CC_REG) (const_int 0)])
-		      (pc)
-		      (label_ref (match_operand 0 "" ""))))]
-  "reload_completed"
-{
-  if (get_attr_length (insn) == 2)
-    return "b%k1	%l0";
-  else if (get_attr_length (insn) == 4)
-    return "b%k1	%l0:16";
+  if (operands[0] != pc_rtx)
+    {
+      if (get_attr_length (insn) == 2)
+	return "b%j2	%l0";
+      else if (get_attr_length (insn) == 4)
+	return "b%j2	%l0:16";
+      else
+	return "b%k2	.Lh8BR%=\;jmp	@%l0\\n.Lh8BR%=:";
+    }
   else
-    return "b%j1	.Lh8BR%=\;jmp	@%l0\\n.Lh8BR%=:";
+    {
+      if (get_attr_length (insn) == 2)
+	return "b%k2	%l1";
+      else if (get_attr_length (insn) == 4)
+	return "b%k2	%l1:16";
+      else
+	return "b%j2	.Lh8BR%=\;jmp	@%l1\\n.Lh8BR%=:";
+    }
 }
  [(set_attr "type" "branch")
    (set_attr "cc" "none")])
 
-(define_insn_and_split ""
-  [(set (pc)
-	(if_then_else
-	  (match_operator 3 "comparison_operator"
-	    [(zero_extract:SI (match_operand:SI 1 "register_operand" "r")
-			      (const_int 1)
-			      (match_operand:QI 2 "immediate_operand" "n"))
-	     (const_int 0)])
-	  (label_ref (match_operand 0 "" ""))
-	  (pc)))]
-  "INTVAL (operands[2]) <= 15"
-  "#"
-  "reload_completed"
-  [(set (reg:CCZN CC_REG)
- 	(match_op_dup 3
-	  [(zero_extract:SI (match_dup 1) (const_int 1) (match_dup 2))
-	   (const_int 0)]))
-   (set (pc)
-	(if_then_else (match_op_dup 3 [(reg:CCZN CC_REG) (const_int 0)])
-		      (label_ref (match_dup 0))
-		      (pc)))])
-	      
-(define_insn_and_split ""
-  [(set (pc)
-	(if_then_else
-	  (match_operator 3 "comparison_operator"
-	    [(zero_extract:SI (match_operand:SI 1 "register_operand" "r")
-			      (const_int 1)
-			      (match_operand:QI 2 "immediate_operand" "n"))
-	     (const_int 0)])
-	  (pc)
-	  (label_ref (match_operand 0 "" ""))))]
-  "INTVAL (operands[2]) <= 15"
-  "#"
-  "reload_completed"
-  [(set (reg:CCZN CC_REG)
- 	(match_op_dup 3
-	  [(zero_extract:SI (match_dup 1) (const_int 1) (match_dup 2))
-	   (const_int 0)]))
-   (set (pc)
-	(if_then_else (match_op_dup 3 [(reg:CCZN CC_REG) (const_int 0)])
-		      (pc)
-		      (label_ref (match_dup 0))))])
-	      
 ;; The brabc/brabs patterns have been disabled because their length computation
 ;; is horribly broken.  When we call out to a function via a SYMBOL_REF we get
 ;; bogus default and minimum lengths.  The trick used by the PA port seems to
@@ -183,7 +109,8 @@
     }
 }
   [(set_attr "type" "bitbranch")
-   (set_attr "length_table" "bitbranch")])
+   (set_attr "length_table" "bitbranch")
+   (set_attr "cc" "none")])
 
 (define_insn "*brabs"
   [(set (pc)
@@ -207,7 +134,8 @@
     }
 }
   [(set_attr "type" "bitbranch")
-   (set_attr "length_table" "bitbranch")])
+   (set_attr "length_table" "bitbranch")
+   (set_attr "cc" "none")])
 
 ;; Unconditional and other jump instructions.
 
diff --git a/gcc/config/h8300/logical.md b/gcc/config/h8300/logical.md
index 41f64687352..7d24fad360a 100644
--- a/gcc/config/h8300/logical.md
+++ b/gcc/config/h8300/logical.md
@@ -24,84 +24,30 @@
     operands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);
   })
 
-(define_insn "bclrhi_msx"
-  [(set (match_operand:HI 0 "bit_register_indirect_operand" "=m")
-	(and:HI (match_operand:HI 1 "bit_register_indirect_operand" "%0")
-		(match_operand:HI 2 "single_zero_operand" "Y0")))]
-  "TARGET_H8300SX"
-  "bclr\\t%W2,%0"
-  [(set_attr "length" "8")])
-
-(define_insn_and_split "*andqi3_2"
+(define_insn "*andqi3_2"
   [(set (match_operand:QI 0 "bit_operand" "=U,rQ,r")
 	(and:QI (match_operand:QI 1 "bit_operand" "%0,0,WU")
 		(match_operand:QI 2 "h8300_src_operand" "Y0,rQi,IP1>X")))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (and:QI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*andqi3_2_clobber_flags"
-  [(set (match_operand:QI 0 "bit_operand" "=U,rQ,r")
-	(and:QI (match_operand:QI 1 "bit_operand" "%0,0,WU")
-		(match_operand:QI 2 "h8300_src_operand" "Y0,rQi,IP1>X")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   "@
    bclr\\t %W2,%R0
    and  %X2,%X0
    bfld %2,%1,%R0"
   [(set_attr "length" "8,*,8")
-   (set_attr "length_table" "*,logicb,*")])
-
-(define_insn "*andqi3_2_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (and:QI (match_operand:QI 1 "bit_operand" "%0")
-		  (match_operand:QI 2 "h8300_src_operand" "rQ"))
-	  (const_int 0)))
-   (set (match_operand:QI 0 "bit_operand" "=rQ")
-	(and:QI (match_dup 1) (match_dup 2)))]
-  "TARGET_H8300SX && !CONSTANT_P (operands[2])"
-  "and  %X2,%X0"
-  [(set_attr "length" "*")
-   (set_attr "length_table" "logicb")])
+   (set_attr "length_table" "*,logicb,*")
+   (set_attr "cc" "none_0hit,set_znv,none_0hit")])
 
-(define_insn_and_split "andqi3_1"
+(define_insn "andqi3_1"
   [(set (match_operand:QI 0 "bit_operand" "=U,r")
 	(and:QI (match_operand:QI 1 "bit_operand" "%0,0")
 		(match_operand:QI 2 "h8300_src_operand" "Y0,rn")))]
   "register_operand (operands[0], QImode)
    || single_zero_operand (operands[2], QImode)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (and:QI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "andqi3_1_clobber_flags"
-  [(set (match_operand:QI 0 "bit_operand" "=U,r")
-	(and:QI (match_operand:QI 1 "bit_operand" "%0,0")
-		(match_operand:QI 2 "h8300_src_operand" "Y0,rn")))
-   (clobber (reg:CC CC_REG))]
-  "register_operand (operands[0], QImode)
-   || single_zero_operand (operands[2], QImode)"
   "@
    bclr %W2,%R0
    and  %X2,%X0"
-  [(set_attr "length" "2,8")])
-
-(define_insn "andqi3_1_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (and:QI (match_operand:QI 1 "bit_operand" "%0")
-			      (match_operand:QI 2 "h8300_src_operand" "rn"))
-		      (const_int 0)))
-   (set (match_operand:QI 0 "bit_operand" "=r")
-	(and:QI (match_dup 1) (match_dup 2)))]
-  "(register_operand (operands[0], QImode)
-    && !single_zero_operand (operands[2], QImode))"
-  "and  %X2,%X0"
-  [(set_attr "length" "8")])
+  [(set_attr "length" "2,8")
+   (set_attr "cc" "none_0hit,set_znv")])
 
 (define_expand "and<mode>3"
   [(set (match_operand:QHSI 0 "register_operand" "")
@@ -110,7 +56,7 @@
   ""
   "")
 
-(define_insn_and_split "*andor<mode>3"
+(define_insn "*andor<mode>3"
   [(set (match_operand:QHSI 0 "register_operand" "=r")
 	(ior:QHSI (and:QHSI (match_operand:QHSI 2 "register_operand" "r")
 			    (match_operand:QHSI 3 "single_one_operand" "n"))
@@ -119,23 +65,6 @@
     || <MODE>mode == HImode
     || (<MODE>mode == SImode
 	&& (INTVAL (operands[3]) & 0xffff) != 0))"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (ior:QHSI (and:QHSI (match_dup 2)
-						     (match_dup 3))
-					   (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*andor<mode>3_clobber_flags"
-  [(set (match_operand:QHSI 0 "register_operand" "=r")
-	(ior:QHSI (and:QHSI (match_operand:QHSI 2 "register_operand" "r")
-			    (match_operand:QHSI 3 "single_one_operand" "n"))
-		  (match_operand:QHSI 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  "(<MODE>mode == QImode
-    || <MODE>mode == HImode
-    || (<MODE>mode == SImode
-	&& (INTVAL (operands[3]) & 0xffff) != 0))"
   {
     if (<MODE>mode == QImode)
       return "bld\\t%V3,%X2\;bor\\t%V3,%X0\;bst\\t%V3,%X0";
@@ -167,29 +96,13 @@
   }
   [(set_attr "length" "6")])
 
-(define_insn_and_split "*andorsi3_shift_8"
+(define_insn "*andorsi3_shift_8"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(ior:SI (and:SI (ashift:SI (match_operand:SI 2 "register_operand" "r")
 				   (const_int 8))
 			(const_int 65280))
 		(match_operand:SI 1 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (ior:SI (and:SI (ashift:SI (match_dup 2)
-							    (const_int 8))
-						 (const_int 65280))
-					 (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*andorsi3_shift_8_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(ior:SI (and:SI (ashift:SI (match_operand:SI 2 "register_operand" "r")
-				   (const_int 8))
-			(const_int 65280))
-		(match_operand:SI 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
   "or.b\\t%w2,%x0"
   [(set_attr "length" "2")])
 
@@ -205,57 +118,36 @@
   { return <CODE> == IOR ? "bset\\t%V2,%0" : "bnot\\t%V2,%0"; }
   [(set_attr "length" "8")])
 
-(define_insn "b<code>hi_msx"
-  [(set (match_operand:HI 0 "bit_register_indirect_operand" "=m")
-	(ors:HI (match_operand:HI 1 "bit_register_indirect_operand" "%0")
-		(match_operand:HI 2 "single_one_operand" "Y2")))]
-  "TARGET_H8300SX"
-  { return <CODE> == IOR ? "bset\\t%V2,%0" : "bnot\\t%V2,%0"; }
-  [(set_attr "length" "8")])
+(define_split
+  [(set (match_operand:HI 0 "bit_register_indirect_operand")
+	(ors:HI (match_operand:HI 1 "bit_register_indirect_operand")
+		(match_operand:HI 2 "single_one_operand")))]
+  "TARGET_H8300SX && abs (INTVAL (operands[2])) > 0xff"
+  [(set (match_dup 0)
+	(and:QI (match_dup 1)
+		(match_dup 2)))]
+  {
+    operands[0] = adjust_address (operands[0], QImode, 0);
+    operands[1] = adjust_address (operands[1], QImode, 0);
+    operands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);
+  })
 
-(define_insn_and_split "<code>qi3_1"
+(define_insn "<code>qi3_1"
   [(set (match_operand:QI 0 "bit_operand" "=U,rQ")
 	(ors:QI (match_operand:QI 1 "bit_operand" "%0,0")
 		(match_operand:QI 2 "h8300_src_operand" "Y2,rQi")))]
   "TARGET_H8300SX || register_operand (operands[0], QImode)
    || single_one_operand (operands[2], QImode)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (ors:QI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "<code>qi3_1_clobber_flags"
-  [(set (match_operand:QI 0 "bit_operand" "=U,rQ")
-	(ors:QI (match_operand:QI 1 "bit_operand" "%0,0")
-		(match_operand:QI 2 "h8300_src_operand" "Y2,rQi")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX || register_operand (operands[0], QImode)
-   || single_one_operand (operands[2], QImode)"
   {
     if (which_alternative == 0)
-      return <CODE> == IOR ? "bset\\t%V2,%R0" : "bnot\\t%V2,%R0";
+      return <CODE> == IOR ? "bset\\t%V2,%R0" : "bnot\\t%V2,%R0"; 
     else if (which_alternative == 1)
       return <CODE> == IOR ? "or\\t%X2,%X0" : "xor\\t%X2,%X0";
     gcc_unreachable ();
   }
   [(set_attr "length" "8,*")
-   (set_attr "length_table" "*,logicb")])
-
-(define_insn "<code>qi3_1_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (ors:QI (match_operand:QI 1 "bit_operand" "%0")
-		  (match_operand:QI 2 "h8300_src_operand" "rQi"))
-	  (const_int 0)))
-   (set (match_operand:QI 0 "bit_operand" "=rQ")
-	(ors:QI (match_dup 1) (match_dup 2)))]
-  "((TARGET_H8300SX || register_operand (operands[0], QImode))
-    && ! single_one_operand (operands[2], QImode))"
-  {
-    return <CODE> == IOR ? "or\\t%X2,%X0" : "xor\\t%X2,%X0";
-  }
-  [(set_attr "length" "*")
-   (set_attr "length_table" "logicb")])
+   (set_attr "length_table" "*,logicb")
+   (set_attr "cc" "none_0hit,set_znv")])
 
 (define_expand "<code><mode>3"
   [(set (match_operand:QHSI 0 "register_operand" "")
@@ -268,62 +160,27 @@
 ;; {AND,IOR,XOR}{HI3,SI3} PATTERNS
 ;; ----------------------------------------------------------------------
 
-(define_insn_and_split "*logical<mode>3"
+(define_insn "*logical<mode>3"
   [(set (match_operand:HSI 0 "h8300_dst_operand" "=rQ")
 	(match_operator:HSI 3 "bit_operator"
 	  [(match_operand:HSI 1 "h8300_dst_operand" "%0")
 	   (match_operand:HSI 2 "h8300_src_operand" "rQi")]))]
   "h8300_operands_match_p (operands)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*logical<mode>3_clobber_flags"
-  [(set (match_operand:HSI 0 "h8300_dst_operand" "=rQ")
-	(match_operator:HSI 3 "bit_operator"
-	  [(match_operand:HSI 1 "h8300_dst_operand" "%0")
-	   (match_operand:HSI 2 "h8300_src_operand" "rQi")]))
-   (clobber (reg:CC CC_REG))]
-  "h8300_operands_match_p (operands)"
-  { return output_logical_op (<MODE>mode, operands); }
-  [(set (attr "length")
-	(symbol_ref "compute_logical_op_length (<MODE>mode, operands)"))])
-
-(define_insn "*logical<mode>3_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operator:HSI 3 "bit_operator"
-	    [(match_operand:HSI 1 "h8300_dst_operand" "%0")
-	     (match_operand:HSI 2 "h8300_src_operand" "rQi")])
-	  (const_int 0)))
-   (set (match_operand:HSI 0 "h8300_dst_operand" "=rQ")
-	(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]
-  "compute_logical_op_cc (<MODE>mode, operands) == 2"
   { return output_logical_op (<MODE>mode, operands); }
   [(set (attr "length")
-	(symbol_ref "compute_logical_op_length (<MODE>mode, operands)"))])
+	(symbol_ref "compute_logical_op_length (<MODE>mode, operands)"))
+   (set (attr "cc")
+	(symbol_ref "compute_logical_op_cc (<MODE>mode, operands)"))])
 
 
 ;; ----------------------------------------------------------------------
 ;; NOT INSTRUCTIONS
 ;; ----------------------------------------------------------------------
 
-(define_insn_and_split "one_cmpl<mode>2"
+(define_insn "one_cmpl<mode>2"
   [(set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
 	(not:QHSI (match_operand:QHSI 1 "h8300_dst_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (not:QHSI (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "one_cmpl<mode>2_clobber_flags"
-  [(set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
-	(not:QHSI (match_operand:QHSI 1 "h8300_dst_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
   {
     if (<MODE>mode == E_QImode)
       return "not	%X0";
@@ -335,110 +192,3 @@
   }
   [(set_attr "length_table" "unary")
    (set_attr "cc" "set_znv")])
-
-(define_insn "one_cmpl<mode>2_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (not:QHSI (match_operand:QHSI 1 "h8300_dst_operand" "0"))
-		      (const_int 0)))
-   (set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
-	(not:QHSI (match_dup 1)))]
-  ""
-  {
-    if (<MODE>mode == E_QImode)
-      return "not	%X0";
-    if (<MODE>mode == E_HImode)
-      return "not.w	%T0";
-    if (<MODE>mode == E_SImode)
-      return "not.l	%S0";
-    gcc_unreachable ();
-  }
-  [(set_attr "length_table" "unary")])
-
-;; The next four peephole2's will try to transform
-;;
-;;   mov.b A,r0l    (or mov.l A,er0)
-;;   and.l #CST,er0
-;;
-;; into
-;;
-;;   sub.l er0
-;;   mov.b A,r0l
-;;   and.b #CST,r0l (if CST is not 255)
-
-(define_peephole2
-  [(parallel [(set (match_operand:QI 0 "register_operand" "")
-		   (match_operand:QI 1 "general_operand" ""))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_operand:SI 2 "register_operand" "")
-		   (and:SI (match_dup 2) (const_int 255)))
-	      (clobber (reg:CC CC_REG))])]
-  "!reg_overlap_mentioned_p (operands[2], operands[1])
-   && REGNO (operands[0]) == REGNO (operands[2])"
-  [(parallel [(set (match_dup 2) (const_int 0))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (strict_low_part (match_dup 0)) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_peephole2
-  [(parallel [(set (match_operand:SI 0 "register_operand" "")
-		   (match_operand:SI 1 "nonimmediate_operand" ""))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0)
-		   (and:SI (match_dup 0) (const_int 255)))
-	      (clobber (reg:CC CC_REG))])]
-  "!reg_overlap_mentioned_p (operands[0], operands[1])
-   && !(GET_CODE (operands[1]) == MEM && !offsettable_memref_p (operands[1]))
-   && !(GET_CODE (operands[1]) == MEM && MEM_VOLATILE_P (operands[1]))"
-  [(parallel [(set (match_dup 0) (const_int 0))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (strict_low_part (match_dup 2)) (match_dup 3))
-	      (clobber (reg:CC CC_REG))])]
-  {
-    operands[2] = gen_lowpart (QImode, operands[0]);
-    operands[3] = gen_lowpart (QImode, operands[1]);
-  })
-
-(define_peephole2
-  [(parallel [(set (match_operand 0 "register_operand" "")
-		   (match_operand 1 "nonimmediate_operand" ""))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_operand:SI 2 "register_operand" "")
-		   (and:SI (match_dup 2)
-			   (match_operand:SI 3 "const_int_qi_operand" "")))
-	      (clobber (reg:CC CC_REG))])]
-  "(GET_MODE (operands[0]) == QImode
-    || GET_MODE (operands[0]) == HImode
-    || GET_MODE (operands[0]) == SImode)
-   && GET_MODE (operands[0]) == GET_MODE (operands[1])
-   && REGNO (operands[0]) == REGNO (operands[2])
-   && !reg_overlap_mentioned_p (operands[2], operands[1])
-   && !(GET_MODE (operands[1]) != QImode
-	&& GET_CODE (operands[1]) == MEM
-	&& !offsettable_memref_p (operands[1]))
-   && !(GET_MODE (operands[1]) != QImode
-	&& GET_CODE (operands[1]) == MEM
-	&& MEM_VOLATILE_P (operands[1]))"
-  [(parallel [(set (match_dup 2) (const_int 0))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (strict_low_part (match_dup 4)) (match_dup 5))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 2) (and:SI (match_dup 2) (match_dup 6)))
-	      (clobber (reg:CC CC_REG))])]
-  {
-    operands[4] = gen_lowpart (QImode, operands[0]);
-    operands[5] = gen_lowpart (QImode, operands[1]);
-    operands[6] = GEN_INT (~0xff | INTVAL (operands[3]));
-  })
-
-(define_peephole2
-  [(parallel [(set (match_operand:SI 0 "register_operand" "")
-		   (match_operand:SI 1 "register_operand" ""))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (match_dup 0) (and:SI (match_dup 0) (const_int 65280)))
-	      (clobber (reg:CC CC_REG))])]
-  "!reg_overlap_mentioned_p (operands[0], operands[1])"
-  [(parallel [(set (match_dup 0) (const_int 0))
-	      (clobber (reg:CC CC_REG))])
-   (parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))
-		   (lshiftrt:SI (match_dup 1) (const_int 8)))
-	      (clobber (reg:CC CC_REG))])])
diff --git a/gcc/config/h8300/mova.md b/gcc/config/h8300/mova.md
index cdcd4b8f6a4..926edbb2c3c 100644
--- a/gcc/config/h8300/mova.md
+++ b/gcc/config/h8300/mova.md
@@ -24,7 +24,8 @@
 		 (match_operand:QI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:QI 0 "register_operand" "=r,r")
@@ -33,7 +34,8 @@
 		 (match_operand:QI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:QI 0 "register_operand" "=r,r")
@@ -42,7 +44,8 @@
 		 (match_operand:QI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:QI 0 "register_operand" "=r,r")
@@ -51,7 +54,8 @@
 		 (match_operand:QI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -59,7 +63,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/b.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -67,7 +72,8 @@
 		  (const_int 2)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -76,7 +82,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -85,7 +92,8 @@
 		(const_int 510)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -95,7 +103,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -104,7 +113,8 @@
 		(const_int 510)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -114,7 +124,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -122,7 +133,8 @@
 		  (const_int 1)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -131,7 +143,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -140,7 +153,8 @@
 		(const_int 510)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -150,7 +164,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -159,7 +174,8 @@
 		(const_int 510)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -169,7 +185,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -177,7 +194,8 @@
 		  (const_int 4)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -186,7 +204,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -195,7 +214,8 @@
 		(const_int 1020)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -205,7 +225,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -214,7 +235,8 @@
 		(const_int 1020)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -224,7 +246,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -232,7 +255,8 @@
 		  (const_int 2)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -241,7 +265,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -250,7 +275,8 @@
 		(const_int 1020)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -260,7 +286,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -269,7 +296,8 @@
 		(const_int 1020)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -279,7 +307,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -287,7 +316,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/b.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -295,7 +325,8 @@
 		  (const_int 2)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -304,7 +335,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -313,7 +345,8 @@
 		(const_int 510)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -323,7 +356,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -332,7 +366,8 @@
 		(const_int 510)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -342,7 +377,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -350,7 +386,8 @@
 		  (const_int 1)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -359,7 +396,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -368,7 +406,8 @@
 		(const_int 510)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -378,7 +417,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -387,7 +427,8 @@
 		(const_int 510)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -397,7 +438,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -405,7 +447,8 @@
 		  (const_int 4)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -414,7 +457,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -423,7 +467,8 @@
 		(const_int 1020)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -433,7 +478,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -442,7 +488,8 @@
 		(const_int 1020)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -452,7 +499,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -460,7 +508,8 @@
 		  (const_int 2)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -469,7 +518,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -478,7 +528,8 @@
 		(const_int 1020)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -488,7 +539,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -497,7 +549,8 @@
 		(const_int 1020)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%X1.b),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -507,7 +560,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%X1.b),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -516,7 +570,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -525,7 +580,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -534,7 +590,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:HI 0 "register_operand" "=r,r")
@@ -543,7 +600,8 @@
 		 (match_operand:HI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -551,7 +609,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/b.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -559,7 +618,8 @@
 		  (const_int 2)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -568,7 +628,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -577,7 +638,8 @@
 		(const_int 131070)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -587,7 +649,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -596,7 +659,8 @@
 		(const_int 131070)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -606,7 +670,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -614,7 +679,8 @@
 		  (const_int 1)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -623,7 +689,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -632,7 +699,8 @@
 		(const_int 131070)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -642,7 +710,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -651,7 +720,8 @@
 		(const_int 131070)))]
   "TARGET_H8300SX"
   "mova/w.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -661,7 +731,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/w.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -669,7 +740,8 @@
 		  (const_int 4)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -678,7 +750,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -687,7 +760,8 @@
 		(const_int 262140)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -697,7 +771,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -706,7 +781,8 @@
 		(const_int 262140)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -716,7 +792,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -724,7 +801,8 @@
 		  (const_int 2)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -733,7 +811,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i,i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -742,7 +821,8 @@
 		(const_int 262140)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -752,7 +832,8 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -761,7 +842,8 @@
 		(const_int 262140)))]
   "TARGET_H8300SX"
   "mova/l.l @(0,%T1.w),%S0"
-  [(set_attr "length_table" "mova_zero")])
+  [(set_attr "length_table" "mova_zero")
+   (set_attr "cc" "none")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -771,5 +853,6 @@
 		 (match_operand:SI 2 "immediate_operand" "i")))]
   "TARGET_H8300SX"
   "mova/l.l @(%o2%C2,%T1.w),%S0"
-  [(set_attr "length_table" "mova")])
+  [(set_attr "length_table" "mova")
+   (set_attr "cc" "none")])
 
diff --git a/gcc/config/h8300/movepush.md b/gcc/config/h8300/movepush.md
index 90a38ce5991..a8241b90a45 100644
--- a/gcc/config/h8300/movepush.md
+++ b/gcc/config/h8300/movepush.md
@@ -4,20 +4,11 @@
 
 ;; movqi
 
-(define_insn_and_split "*movqi"
+(define_insn "*movqi_h8nosx"
   [(set (match_operand:QI 0 "general_operand_dst" "=r,r ,<,r,r,m")
 	(match_operand:QI 1 "general_operand_src" " I,r>,r,n,m,r"))]
-  "!TARGET_H8300SX && h8300_move_ok (operands[0], operands[1])"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*movqi_clobber_flags"
-  [(set (match_operand:QI 0 "general_operand_dst" "=r,r ,<,r,r,m")
-	(match_operand:QI 1 "general_operand_src" " I,r>,r,n,m,r"))
-   (clobber (reg:CC CC_REG))]
-  "!TARGET_H8300SX && h8300_move_ok (operands[0], operands[1])"
+  "!TARGET_H8300SX
+    && h8300_move_ok (operands[0], operands[1])"
   "@
    sub.b	%X0,%X0
    mov.b	%R1,%X0
@@ -25,54 +16,19 @@
    mov.b	%R1,%X0
    mov.b	%R1,%X0
    mov.b	%X1,%R0"
-  [(set (attr "length") (symbol_ref "compute_mov_length (operands)"))])
+  [(set (attr "length")
+	(symbol_ref "compute_mov_length (operands)"))
+   (set_attr "cc" "set_zn,set_znv,set_znv,set_znv,set_znv,set_znv")])
 
-(define_insn "*movqi_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operand:QI 1 "general_operand_src" "r>,r,m,r")
-	  (const_int 0)))
-   (set (match_operand:QI 0 "general_operand_dst" "=r ,<,r,m")
-	(match_dup 1))]
-  "(!TARGET_H8300SX
-    && h8300_move_ok (operands[0], operands[1])
-    && !CONSTANT_P (operands[1]))"
-  "@
-   mov.b	%R1,%X0
-   mov.b	%X1,%R0
-   mov.b	%R1,%X0
-   mov.b	%X1,%R0"
-  [(set (attr "length") (symbol_ref "compute_mov_length (operands)"))])
-
-(define_insn_and_split "*movqi_h8sx"
+(define_insn "*movqi_h8sx"
   [(set (match_operand:QI 0 "general_operand_dst" "=Z,rQ")
 	(match_operand:QI 1 "general_operand_src" "P4>X,rQi"))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*movqi_h8sx_clobber_flags"
-  [(set (match_operand:QI 0 "general_operand_dst" "=Z,rQ")
-	(match_operand:QI 1 "general_operand_src" "P4>X,rQi"))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   "@
     mov.b	%X1:4,%X0
     mov.b	%X1,%X0"
-  [(set_attr "length_table" "mov_imm4,movb")])
-
-(define_insn "*movqi_h8sx_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operand:QI 1 "general_operand_src" ">X,rQ")
-	  (const_int 0)))
-   (set (match_operand:QI 0 "general_operand_dst" "=Z,rQ")
-	(match_dup 1))]
-  "TARGET_H8300SX && !CONSTANT_P (operands[1])"
-   "mov.b	%X1,%X0"
-  [(set_attr "length_table" "mov_imm4,movb")])
+  [(set_attr "length_table" "mov_imm4,movb")
+   (set_attr "cc" "set_znv")])
 
 (define_expand "mov<mode>"
   [(set (match_operand:QHSIF 0 "general_operand_dst" "")
@@ -92,45 +48,24 @@
       }
   })
 
-(define_insn_and_split "movstrictqi"
+(define_insn "movstrictqi"
   [(set (strict_low_part (match_operand:QI 0 "general_operand_dst" "+r,r"))
 			 (match_operand:QI 1 "general_operand_src" "I,rmi>"))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (strict_low_part (match_dup 0)) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-
-(define_insn "movstrictqi_clobber_flags"
-  [(set (strict_low_part (match_operand:QI 0 "general_operand_dst" "+r,r"))
-			 (match_operand:QI 1 "general_operand_src" "I,rmi>"))
-   (clobber (reg:CC CC_REG))]
-  ""
   "@
    sub.b	%X0,%X0
    mov.b	%X1,%X0"
   [(set_attr "length" "2,*")
-   (set_attr "length_table" "*,movb")])
+   (set_attr "length_table" "*,movb")
+   (set_attr "cc" "set_zn,set_znv")])
 
 ;; movhi
 
-(define_insn_and_split "*movhi"
+(define_insn "*movhi_h8nosx"
   [(set (match_operand:HI 0 "general_operand_dst" "=r,r,<,r,r,m")
 	(match_operand:HI 1 "general_operand_src" "I,r>,r,i,m,r"))]
   "!TARGET_H8300SX
     && h8300_move_ok (operands[0], operands[1])"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*movhi_clobber_flags"
-  [(set (match_operand:HI 0 "general_operand_dst" "=r,r,<,r,r,m")
-	(match_operand:HI 1 "general_operand_src" "I,r>,r,i,m,r"))
-   (clobber (reg:CC CC_REG))]
-  "!TARGET_H8300SX
-    && h8300_move_ok (operands[0], operands[1])"
   "@
    sub.w	%T0,%T0
    mov.w	%T1,%T0
@@ -138,39 +73,14 @@
    mov.w	%T1,%T0
    mov.w	%T1,%T0
    mov.w	%T1,%T0"
-  [(set (attr "length") (symbol_ref "compute_mov_length (operands)"))])
+  [(set (attr "length")
+	(symbol_ref "compute_mov_length (operands)"))
+   (set_attr "cc" "set_zn,set_znv,set_znv,set_znv,set_znv,set_znv")])
 
-(define_insn "*movhi_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operand:HI 1 "general_operand_src" "r>,r,m,r")
-	  (const_int 0)))
-   (set (match_operand:HI 0 "general_operand_dst" "=r,<,r,m")
-	(match_dup 1))]
-  "(!TARGET_H8300SX
-    && h8300_move_ok (operands[0], operands[1])
-    && !CONSTANT_P (operands[1]))"
-  "@
-   mov.w	%T1,%T0
-   mov.w	%T1,%T0
-   mov.w	%T1,%T0
-   mov.w	%T1,%T0"
-  [(set (attr "length") (symbol_ref "compute_mov_length (operands)"))])
-
-(define_insn_and_split "*movhi_h8sx"
+(define_insn "*movhi_h8sx"
   [(set (match_operand:HI 0 "general_operand_dst" "=r,r,Z,Q,rQ")
 	(match_operand:HI 1 "general_operand_src" "I,P3>X,P4>X,IP8>X,rQi"))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-  
-(define_insn "*movhi_h8sx_clobber_flags"
-  [(set (match_operand:HI 0 "general_operand_dst" "=r,r,Z,Q,rQ")
-	(match_operand:HI 1 "general_operand_src" "I,P3>X,P4>X,IP8>X,rQi"))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   "@
    sub.w	%T0,%T0
    mov.w	%T1:3,%T0
@@ -178,58 +88,27 @@
    mov.w	%T1,%T0
    mov.w	%T1,%T0"
   [(set_attr "length_table" "*,*,mov_imm4,short_immediate,movw")
-   (set_attr "length" "2,2,*,*,*")])
-
-(define_insn "*movhi_h8sx_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operand:HI 1 "general_operand_src" ">X,>X,>X,rQ")
-	  (const_int 0)))
-   (set (match_operand:HI 0 "general_operand_dst" "=r,Z,Q,rQ")
-	(match_dup 1))]
-  "TARGET_H8300SX && !CONSTANT_P (operands[1])"
-  "mov.w	%T1,%T0"
-  [(set_attr "length_table" "*,mov_imm4,short_immediate,movw")
-   (set_attr "length" "2,*,*,*")])
+   (set_attr "length" "2,2,*,*,*")
+   (set_attr "cc" "set_zn,set_znv,set_znv,set_znv,set_znv")])
 
-(define_insn_and_split "movstricthi"
+(define_insn "movstricthi"
   [(set (strict_low_part (match_operand:HI 0 "general_operand_dst" "+r,r,r"))
 			 (match_operand:HI 1 "general_operand_src" "I,P3>X,rmi"))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (strict_low_part (match_dup 0)) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "movstricthi_clobber_flags"
-  [(set (strict_low_part (match_operand:HI 0 "general_operand_dst" "+r,r,r"))
-			 (match_operand:HI 1 "general_operand_src" "I,P3>X,rmi"))
-   (clobber (reg:CC CC_REG))]
-  ""
   "@
    sub.w	%T0,%T0
    mov.w	%T1,%T0
    mov.w	%T1,%T0"
   [(set_attr "length" "2,2,*")
-   (set_attr "length_table" "*,*,movw")])
+   (set_attr "length_table" "*,*,movw")
+   (set_attr "cc" "set_zn,set_znv,set_znv")])
 
 ;; movsi
-(define_insn_and_split "*movsi"
+(define_insn "*movsi_h8300hs"
   [(set (match_operand:SI 0 "general_operand_dst" "=r,r,r,<,r,r,m,*a,*a,r")
 	(match_operand:SI 1 "general_operand_src" "I,r,i,r,>,m,r,I,r,*a"))]
   "(TARGET_H8300S || TARGET_H8300H) && !TARGET_H8300SX
     && h8300_move_ok (operands[0], operands[1])"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*movsi_clobber_flags"
-  [(set (match_operand:SI 0 "general_operand_dst" "=r,r,r,<,r,r,m,*a,*a,r")
-	(match_operand:SI 1 "general_operand_src" "I,r,i,r,>,m,r,I,r,*a"))
-   (clobber (reg:CC CC_REG))]
-  "(TARGET_H8300S || TARGET_H8300H) && !TARGET_H8300SX
-    && h8300_move_ok (operands[0], operands[1])"
 {
   switch (which_alternative)
     {
@@ -290,39 +169,14 @@
     }
    return "mov.l	%S1,%S0";
 }
-  [(set (attr "length") (symbol_ref "compute_mov_length (operands)"))])
+  [(set (attr "length")
+	(symbol_ref "compute_mov_length (operands)"))
+   (set_attr "cc" "set_zn,set_znv,clobber,set_znv,set_znv,set_znv,set_znv,none_0hit,none_0hit,set_znv")])
 
-(define_insn "*movsi_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operand:SI 1 "general_operand_src" "r,r,>,m,r,r,*a")
-	  (const_int 0)))
-   (set (match_operand:SI 0 "general_operand_dst" "=r,<,r,r,m,*a,r")
-	(match_dup 1))]
-  "(!TARGET_H8300SX
-    && h8300_move_ok (operands[0], operands[1])
-    && !CONSTANT_P (operands[1])
-    && (GET_CODE (operands[0]) != REG
-	|| REGNO (operands[0]) != MAC_REG)
-    && (GET_CODE (operands[1]) != REG
-	|| REGNO (operands[1]) != MAC_REG))"
-  "mov.l	%S1,%S0"
-  [(set (attr "length") (symbol_ref "compute_mov_length (operands)"))])
-
-(define_insn_and_split "*movsi_h8sx"
+(define_insn "*movsi_h8sx"
   [(set (match_operand:SI 0 "general_operand_dst" "=r,r,Q,rQ,*a,*a,r")
 	(match_operand:SI 1 "general_operand_src" "I,P3>X,IP8>X,rQi,I,r,*a"))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*movsi_h8sx_clobber_flags"
-  [(set (match_operand:SI 0 "general_operand_dst" "=r,r,Q,rQ,*a,*a,r")
-	(match_operand:SI 1 "general_operand_src" "I,P3>X,IP8>X,rQi,I,r,*a"))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   "@
    sub.l	%S0,%S0
    mov.l	%S1:3,%S0
@@ -332,63 +186,26 @@
    clrmac\;ldmac	%1,macl
    stmac	macl,%0"
   [(set_attr "length_table" "*,*,short_immediate,movl,*,*,*")
-   (set_attr "length" "2,2,*,*,2,6,4")])
-
-(define_insn "*movsi_h8sx_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operand:SI 1 "general_operand_src" ">X,>X,rQ")
-	  (const_int 0)))
-   (set (match_operand:SI 0 "general_operand_dst" "=r,Q,rQ")
-	(match_dup 1))]
-  "(TARGET_H8300SX
-    && !CONSTANT_P (operands[1])
-    && (GET_CODE (operands[0]) != REG
-	|| REGNO (operands[0]) != MAC_REG)
-    && (GET_CODE (operands[1]) != REG
-	|| REGNO (operands[1]) != MAC_REG))"
-  "mov.l	%S1,%S0"
-  [(set_attr "length_table" "*,short_immediate,movl")
-   (set_attr "length" "2,*,*")])
+   (set_attr "length" "2,2,*,*,2,6,4")
+   (set_attr "cc" "set_zn,set_znv,set_znv,set_znv,none_0hit,none_0hit,set_znv")])
 
-(define_insn_and_split "*movsf_h8sx"
+(define_insn "*movsf_h8sx"
   [(set (match_operand:SF 0 "general_operand_dst" "=r,rQ")
 	(match_operand:SF 1 "general_operand_src" "G,rQi"))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*movsf_h8sx_clobber_flags"
-  [(set (match_operand:SF 0 "general_operand_dst" "=r,rQ")
-	(match_operand:SF 1 "general_operand_src" "G,rQi"))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
   "@
     sub.l	%S0,%S0
     mov.l	%S1,%S0"
   [(set_attr "length" "2,*")
-   (set_attr "length_table" "*,movl")])
+   (set_attr "length_table" "*,movl")
+   (set_attr "cc" "set_zn,set_znv")])
 
-(define_insn_and_split "*movsf"
+(define_insn "*movsf_h8300hs"
   [(set (match_operand:SF 0 "general_operand_dst" "=r,r,r,m,<,r")
 	(match_operand:SF 1 "general_operand_src" "G,r,im,r,r,>"))]
   "!TARGET_H8300SX
     && (register_operand (operands[0], SFmode)
 	|| register_operand (operands[1], SFmode))"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_dup 1))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*movsf_clobber_flags"
-  [(set (match_operand:SF 0 "general_operand_dst" "=r,r,r,m,<,r")
-	(match_operand:SF 1 "general_operand_src" "G,r,im,r,r,>"))
-   (clobber (reg:CC CC_REG))]
-  "!TARGET_H8300SX
-    && (register_operand (operands[0], SFmode)
-	|| register_operand (operands[1], SFmode))"
   "@
    sub.l	%S0,%S0
    mov.l	%S1,%S0
@@ -396,35 +213,21 @@
    mov.l	%S1,%S0
    mov.l	%S1,%S0
    mov.l	%S1,%S0"
-  [(set (attr "length") (symbol_ref "compute_mov_length (operands)"))])
+  [(set (attr "length")
+	(symbol_ref "compute_mov_length (operands)"))
+   (set_attr "cc" "set_zn,set_znv,set_znv,set_znv,set_znv,set_znv")])
 
 ;; ----------------------------------------------------------------------
 ;; PUSH INSTRUCTIONS
 ;; ----------------------------------------------------------------------
 
-(define_insn_and_split "*push1_<QHI:mode>"
+(define_insn "*push1_h8300hs_<QHI:mode>"
   [(set (mem:QHI
 	(pre_modify:P
 	  (reg:P SP_REG)
 	  (plus:P (reg:P SP_REG) (const_int -4))))
 	(match_operand:QHI 0 "register_no_sp_elim_operand" "r"))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (mem:QHI
-		     (pre_modify:P (reg:P SP_REG)
-				   (plus:P (reg:P SP_REG) (const_int -4))))
-		   (match_dup 0))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*push1_<QHI:mode>_clobber_flags"
-  [(set (mem:QHI
-	(pre_modify:P
-	  (reg:P SP_REG)
-	  (plus:P (reg:P SP_REG) (const_int -4))))
-	(match_operand:QHI 0 "register_no_sp_elim_operand" "r"))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mov.l\\t%S0,@-er7"
   [(set_attr "length" "4")])
 
diff --git a/gcc/config/h8300/multiply.md b/gcc/config/h8300/multiply.md
index 839798dd547..4e9112f970c 100644
--- a/gcc/config/h8300/multiply.md
+++ b/gcc/config/h8300/multiply.md
@@ -15,71 +15,23 @@
       operands[2] = gen_rtx_SIGN_EXTEND (HImode, operands[2]);
   })
 
-(define_insn_and_split "*mulqihi3_const"
+(define_insn "*mulqihi3_const"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(mult:HI (sign_extend:HI (match_operand:QI 1 "register_operand" "%0"))
 		 (match_operand:QI 2 "nibble_operand" "IP4>X")))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (mult:HI (sign_extend:HI (match_dup 1)) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*mulqihi3_const_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(mult:HI (sign_extend:HI (match_operand:QI 1 "register_operand" "%0"))
-		 (match_operand:QI 2 "nibble_operand" "IP4>X")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
-  "mulxs.b	%X2,%T0"
-  [(set_attr "length" "4")])
-
-(define_insn "*mulqihi3_const_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (mult:HI (sign_extend:HI (match_operand:QI 1 "register_operand" "%0"))
-		   (match_operand:QI 2 "nibble_operand" "IP4>X"))
-	  (const_int 0)))
-   (set (match_operand:HI 0 "register_operand" "=r")
-	(mult:HI (sign_extend:HI (match_dup 1)) (match_dup 2)))]
-  "TARGET_H8300SX"
   "mulxs.b	%X2,%T0"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_zn")])
 
-(define_insn_and_split "*mulqihi3"
+(define_insn "*mulqihi3"
   [(set (match_operand:HI 0 "register_operand" "=r")
 	(mult:HI (sign_extend:HI (match_operand:QI 1 "register_operand" "%0"))
 		 (sign_extend:HI (match_operand:QI 2 "register_operand" "r"))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (mult:HI (sign_extend:HI (match_dup 1))
-			    (sign_extend:HI (match_dup 2))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*mulqihi3_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r")
-	(mult:HI (sign_extend:HI (match_operand:QI 1 "register_operand" "%0"))
-		 (sign_extend:HI (match_operand:QI 2 "register_operand" "r"))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mulxs.b	%X2,%T0"
-  [(set_attr "length" "4")])
-
-(define_insn "*mulqihi3_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (mult:HI
-	    (sign_extend:HI (match_operand:QI 1 "register_operand" "%0"))
-	    (sign_extend:HI (match_operand:QI 2 "register_operand" "r")))
-	  (const_int 0)))
-   (set (match_operand:HI 0 "register_operand" "=r")
-	(mult:HI (sign_extend:HI (match_dup 1)) (sign_extend (match_dup 2))))]
-  ""
-  "mulxs.b	%X2,%T0"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_zn")])
 
 (define_expand "mulhisi3"
   [(set (match_operand:SI 0 "register_operand" "")
@@ -92,71 +44,23 @@
       operands[2] = gen_rtx_SIGN_EXTEND (SImode, operands[2]);
   })
 
-(define_insn_and_split "*mulhisi3_const"
+(define_insn "*mulhisi3_const"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(mult:SI (sign_extend:SI (match_operand:HI 1 "register_operand" "%0"))
 		 (match_operand:SI 2 "nibble_operand" "IP4>X")))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (mult:SI (sign_extend:SI (match_dup 1)) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*mulhisi3_const_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(mult:SI (sign_extend:SI (match_operand:HI 1 "register_operand" "%0"))
-		 (match_operand:SI 2 "nibble_operand" "IP4>X")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
-  "mulxs.w	%T2,%S0"
-  [(set_attr "length" "4")])
-
-(define_insn "*mulhisi3_const_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (mult:SI (sign_extend:SI (match_operand:HI 1 "register_operand" "%0"))
-		   (match_operand:SI 2 "nibble_operand" "IP4>X"))
-	  (const_int 0)))
-   (set (match_operand:SI 0 "register_operand" "=r")
-	(mult:SI (sign_extend:SI (match_dup 1)) (match_dup 2)))]
-  "TARGET_H8300SX"
   "mulxs.w	%T2,%S0"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_zn")])
 
-(define_insn_and_split "*mulhisi3"
+(define_insn "*mulhisi3"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(mult:SI (sign_extend:SI (match_operand:HI 1 "register_operand" "%0"))
 		 (sign_extend:SI (match_operand:HI 2 "register_operand" "r"))))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (mult:SI (sign_extend:SI (match_dup 1))
-			    (sign_extend:SI (match_dup 2))))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*mulhisi3_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(mult:SI (sign_extend:SI (match_operand:HI 1 "register_operand" "%0"))
-		 (sign_extend:SI (match_operand:HI 2 "register_operand" "r"))))
-   (clobber (reg:CC CC_REG))]
-  ""
   "mulxs.w	%T2,%S0"
-  [(set_attr "length" "4")])
-
-(define_insn "*mulhisi3_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (mult:SI (sign_extend:SI (match_operand:HI 1 "register_operand" "%0"))
-		   (sign_extend:SI (match_operand:HI 2 "register_operand" "r")))
-	  (const_int 0)))
-   (set (match_operand:SI 0 "register_operand" "=r")
-	(mult:SI (sign_extend:SI (match_dup 1))
-		 (sign_extend:SI (match_dup 2))))]
-  ""
-  "mulxs.w	%T2,%S0"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_zn")])
 
 (define_expand "umulqihi3"
   [(set (match_operand:HI 0 "register_operand" "")
@@ -175,7 +79,8 @@
 		 (match_operand:QI 2 "nibble_operand" "IP4>X")))]
   "TARGET_H8300SX"
   "mulxu.b	%X2,%T0"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_zn")])
 
 (define_insn "*umulqihi3"
   [(set (match_operand:HI 0 "register_operand" "=r")
@@ -183,7 +88,8 @@
 		 (zero_extend:HI (match_operand:QI 2 "register_operand" "r"))))]
   ""
   "mulxu.b	%X2,%T0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "none_0hit")])
 
 (define_expand "umulhisi3"
   [(set (match_operand:SI 0 "register_operand" "")
@@ -202,7 +108,8 @@
 		 (match_operand:SI 2 "nibble_operand" "IP4>X")))]
   "TARGET_H8300SX"
   "mulxu.w	%T2,%S0"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_zn")])
 
 (define_insn "*umulhisi3"
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -210,92 +117,34 @@
 		 (zero_extend:SI (match_operand:HI 2 "register_operand" "r"))))]
   ""
   "mulxu.w	%T2,%S0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "none_0hit")])
 
 ;; We could have used mulu.[wl] here, but mulu.[lw] is only available
 ;; on a H8SX with a multiplier, whereas muls.w seems to be available
 ;; on all H8SX variants.
 
-(define_insn_and_split "mul<mode>3"
+(define_insn "mul<mode>3"
   [(set (match_operand:HSI 0 "register_operand" "=r")
         (mult:HSI (match_operand:HSI 1 "register_operand" "%0")
 		  (match_operand:HSI 2 "reg_or_nibble_operand" "r IP4>X")))]
   "TARGET_H8300SX"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (mult:HSI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "mul<mode>3_clobber_flags"
-  [(set (match_operand:HSI 0 "register_operand" "=r")
-        (mult:HSI (match_operand:HSI 1 "register_operand" "%0")
-		  (match_operand:HSI 2 "reg_or_nibble_operand" "r IP4>X")))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SX"
-  { return <MODE>mode == HImode ? "muls.w\\t%T2,%T0" : "muls.l\\t%S2,%S0"; }
-  [(set_attr "length" "4")])
-
-(define_insn "mul<mode>3_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (mult:HSI (match_operand:HSI 1 "register_operand" "%0")
-		    (match_operand:HSI 2 "reg_or_nibble_operand" "r IP4>X"))
-	  (const_int 0)))
-   (set (match_operand:HSI 0 "register_operand" "=r")
-        (mult:HSI (match_dup 1) (match_dup 2)))]
-  "TARGET_H8300SX"
   { return <MODE>mode == HImode ? "muls.w\\t%T2,%T0" : "muls.l\\t%S2,%S0"; }
-  [(set_attr "length" "4")])
-
-(define_insn_and_split "smulsi3_highpart"
-  [(set (match_operand:SI 0 "register_operand" "=r")
-	(truncate:SI
-	 (lshiftrt:DI
-	  (mult:DI
-	   (sign_extend:DI (match_operand:SI 1 "register_operand" "%0"))
-	   (sign_extend:DI (match_operand:SI 2 "reg_or_nibble_operand" "r IP4>X")))
-	  (const_int 32))))]
-  "TARGET_H8300SXMUL"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0)
-		   (truncate:SI (lshiftrt:DI (mult:DI
-					       (sign_extend:DI (match_dup 1))
-					       (sign_extend:DI (match_dup 2)))
-					     (const_int 32))))
-	      (clobber (reg:CC CC_REG))])])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_zn")])
 
-(define_insn "smulsi3_highpart_clobber_flags"
+(define_insn "smulsi3_highpart"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(truncate:SI
 	 (lshiftrt:DI
 	  (mult:DI
 	   (sign_extend:DI (match_operand:SI 1 "register_operand" "%0"))
 	   (sign_extend:DI (match_operand:SI 2 "reg_or_nibble_operand" "r IP4>X")))
-	  (const_int 32))))
-   (clobber (reg:CC CC_REG))]
-  "TARGET_H8300SXMUL"
-  "muls/u.l\\t%S2,%S0"
-  [(set_attr "length" "4")])
-
-(define_insn "smulsi3_highpart_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (truncate:SI
-	    (lshiftrt:DI
-	      (mult:DI
-	        (sign_extend:DI (match_operand:SI 1 "register_operand" "%0"))
-	        (sign_extend:DI (match_operand:SI 2 "reg_or_nibble_operand" "r IP4>X")))
-	      (const_int 32)))
-	  (const_int 0)))
-    (set (match_operand:SI 0 "register_operand" "=r")
-	(truncate:SI
-	 (lshiftrt:DI
-	  (mult:DI (sign_extend:DI (match_dup 1)) (sign_extend:DI (match_dup 2)))
 	  (const_int 32))))]
   "TARGET_H8300SXMUL"
   "muls/u.l\\t%S2,%S0"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_zn")])
 
 (define_insn "umulsi3_highpart"
   [(set (match_operand:SI 0 "register_operand" "=r")
@@ -307,7 +156,8 @@
 	    (const_int 32))))]
   "TARGET_H8300SX"
   "mulu/u.l\\t%S2,%S0"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "none_0hit")])
 
 ;; This is a "bridge" instruction.  Combine can't cram enough insns
 ;; together to crate a MAC instruction directly, but it can create
@@ -326,7 +176,8 @@
 	    (mem:HI (post_inc:SI (match_operand:SI 2 "register_operand" "r"))))))]
   "TARGET_MAC"
   "clrmac\;mac	@%2+,@%1+"
-  [(set_attr "length" "6")])
+  [(set_attr "length" "6")
+   (set_attr "cc" "none_0hit")])
 
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=a")
@@ -338,5 +189,6 @@
 	      (match_operand:SI 3 "register_operand" "0")))]
   "TARGET_MAC"
   "mac	@%2+,@%1+"
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "none_0hit")])
 
diff --git a/gcc/config/h8300/other.md b/gcc/config/h8300/other.md
index 572a29fb2d9..4b96a7c4a40 100644
--- a/gcc/config/h8300/other.md
+++ b/gcc/config/h8300/other.md
@@ -2,20 +2,10 @@
 ;; ABSOLUTE VALUE INSTRUCTIONS
 ;; ----------------------------------------------------------------------
 
-(define_insn_and_split "abssf2"
+(define_insn "abssf2"
   [(set (match_operand:SF 0 "register_operand" "=r")
 	(abs:SF (match_operand:SF 1 "register_operand" "0")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (abs:SF (match_dup 1)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "abssf2_clobber_flags"
-  [(set (match_operand:SF 0 "register_operand" "=r")
-	(abs:SF (match_operand:SF 1 "register_operand" "0")))
-   (clobber (reg:CC CC_REG))]
-  ""
   "and.w\\t#32767,%e0"
   [(set_attr "length" "4")])
 
@@ -23,4 +13,5 @@
   [(const_int 0)]
   ""
   "nop"
-  [(set_attr "length" "2")])
+  [(set_attr "cc" "none")
+   (set_attr "length" "2")])
diff --git a/gcc/config/h8300/peepholes.md b/gcc/config/h8300/peepholes.md
index 80330e2dccc..8442cd80a5e 100644
--- a/gcc/config/h8300/peepholes.md
+++ b/gcc/config/h8300/peepholes.md
@@ -367,10 +367,10 @@
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   ""
   [(set (match_operand:HI 0 "register_operand" "")
 	(unspec:HI [(match_dup 0)
@@ -379,10 +379,9 @@
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
-  "")
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))])
 
 ;; The SImode version of the previous pattern.
 
@@ -393,10 +392,10 @@
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   ""
   [(set (match_operand:SI 0 "register_operand" "")
 	(unspec:SI [(match_dup 0)
@@ -405,10 +404,9 @@
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
-  "")
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))])
 
 (define_peephole2
   [(parallel [(set (cc0)
@@ -418,23 +416,113 @@
 			    (const_int 0)))
 	      (clobber (scratch:QI))])
    (set (pc)
-	(if_then_else (match_operator 1 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   ""
   [(set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[3] = ((GET_CODE (operands[1]) == EQ)
+    operands[4] = ((GET_CODE (operands[4]) == EQ)
 		   ? gen_rtx_GE (VOIDmode, cc0_rtx, const0_rtx)
 		   : gen_rtx_LT (VOIDmode, cc0_rtx, const0_rtx));
   })
 
+;; The next three peephole2's will try to transform
+;;
+;;   mov.b A,r0l    (or mov.l A,er0)
+;;   and.l #CST,er0
+;;
+;; into
+;;
+;;   sub.l er0
+;;   mov.b A,r0l
+;;   and.b #CST,r0l (if CST is not 255)
+
+(define_peephole2
+  [(set (match_operand:QI 0 "register_operand" "")
+	(match_operand:QI 1 "general_operand" ""))
+   (set (match_operand:SI 2 "register_operand" "")
+	(and:SI (match_dup 2)
+		(const_int 255)))]
+  "!reg_overlap_mentioned_p (operands[2], operands[1])
+   && REGNO (operands[0]) == REGNO (operands[2])"
+  [(set (match_dup 2)
+	(const_int 0))
+   (set (strict_low_part (match_dup 0))
+	(match_dup 1))]
+  "")
+
+(define_peephole2
+  [(set (match_operand:SI 0 "register_operand" "")
+	(match_operand:SI 1 "nonimmediate_operand" ""))
+   (set (match_dup 0)
+	(and:SI (match_dup 0)
+		(const_int 255)))]
+  "!reg_overlap_mentioned_p (operands[0], operands[1])
+   && !(GET_CODE (operands[1]) == MEM && !offsettable_memref_p (operands[1]))
+   && !(GET_CODE (operands[1]) == MEM && MEM_VOLATILE_P (operands[1]))"
+  [(set (match_dup 0)
+	(const_int 0))
+   (set (strict_low_part (match_dup 2))
+	(match_dup 3))]
+  {
+    operands[2] = gen_lowpart (QImode, operands[0]);
+    operands[3] = gen_lowpart (QImode, operands[1]);
+  })
+
+(define_peephole2
+  [(set (match_operand 0 "register_operand" "")
+	(match_operand 1 "nonimmediate_operand" ""))
+   (set (match_operand:SI 2 "register_operand" "")
+	(and:SI (match_dup 2)
+		(match_operand:SI 3 "const_int_qi_operand" "")))]
+  "(GET_MODE (operands[0]) == QImode
+    || GET_MODE (operands[0]) == HImode
+    || GET_MODE (operands[0]) == SImode)
+   && GET_MODE (operands[0]) == GET_MODE (operands[1])
+   && REGNO (operands[0]) == REGNO (operands[2])
+   && !reg_overlap_mentioned_p (operands[2], operands[1])
+   && !(GET_MODE (operands[1]) != QImode
+	&& GET_CODE (operands[1]) == MEM
+	&& !offsettable_memref_p (operands[1]))
+   && !(GET_MODE (operands[1]) != QImode
+	&& GET_CODE (operands[1]) == MEM
+	&& MEM_VOLATILE_P (operands[1]))"
+  [(set (match_dup 2)
+	(const_int 0))
+   (set (strict_low_part (match_dup 4))
+	(match_dup 5))
+   (set (match_dup 2)
+	(and:SI (match_dup 2)
+		(match_dup 6)))]
+  {
+    operands[4] = gen_lowpart (QImode, operands[0]);
+    operands[5] = gen_lowpart (QImode, operands[1]);
+    operands[6] = GEN_INT (~0xff | INTVAL (operands[3]));
+  })
+
+(define_peephole2
+  [(set (match_operand:SI 0 "register_operand" "")
+	(match_operand:SI 1 "register_operand" ""))
+   (set (match_dup 0)
+	(and:SI (match_dup 0)
+		(const_int 65280)))]
+  "!reg_overlap_mentioned_p (operands[0], operands[1])"
+  [(set (match_dup 0)
+	(const_int 0))
+   (set (zero_extract:SI (match_dup 0)
+			 (const_int 8)
+			 (const_int 8))
+	(lshiftrt:SI (match_dup 1)
+		     (const_int 8)))]
+  "")
+
 ;; If a load of mem:SI is followed by an AND that turns off the upper
 ;; half, then we can load mem:HI instead.
 
@@ -458,6 +546,20 @@
     operands[4] = gen_lowpart (HImode, operands[1]);
   })
 
+;; Convert a memory comparison to a move if there is a scratch register.
+
+(define_peephole2
+  [(match_scratch:QHSI 1 "r")
+   (set (cc0)
+	(compare (match_operand:QHSI 0 "memory_operand" "")
+		 (const_int 0)))]
+  ""
+  [(set (match_dup 1)
+	(match_dup 0))
+   (set (cc0) (compare (match_dup 1)
+		       (const_int 0)))]
+  "")
+
 ;; (compare (reg:HI) (const_int)) takes 4 bytes, so we try to achieve
 ;; the equivalent with shorter sequences.  Here is the summary.  Cases
 ;; are grouped for each define_peephole2.
@@ -494,23 +596,23 @@
 	(compare (match_operand:HI 0 "register_operand" "")
 		 (match_operand:HI 1 "incdec_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "INTVAL (operands[1]) != 0 && peep2_reg_dead_p (1, operands[0])"
   [(set (match_dup 0)
 	(unspec:HI [(match_dup 0)
-		    (match_dup 4)]
+		    (match_dup 5)]
 		   UNSPEC_INCDEC))
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (- INTVAL (operands[1]));
+    operands[5] = GEN_INT (- INTVAL (operands[1]));
   })
 
 ;; Transform
@@ -528,25 +630,25 @@
 	(compare (match_operand:HI 0 "register_operand" "")
 		 (match_operand:HI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 2 "gtle_operator"
+	(if_then_else (match_operator 4 "gtle_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == 1
        || (TARGET_H8300S && INTVAL (operands[1]) == 3))"
   [(parallel [(set (match_dup 0)
 		   (ashiftrt:HI (match_dup 0)
-				(match_dup 4)))
+				(match_dup 5)))
 	      (clobber (scratch:QI))])
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 2)
-		      (label_ref (match_dup 3))
-		      (pc)))]
+	(if_then_else (match_dup 4)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
+    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
   })
 
 ;; Transform
@@ -564,26 +666,26 @@
 	(compare (match_operand:HI 0 "register_operand" "")
 		 (match_operand:HI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 2 "gtuleu_operator"
+	(if_then_else (match_operator 4 "gtuleu_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == 1
        || (TARGET_H8300S && INTVAL (operands[1]) == 3))"
   [(parallel [(set (match_dup 0)
 		   (ashiftrt:HI (match_dup 0)
-				(match_dup 4)))
+				(match_dup 5)))
 	      (clobber (scratch:QI))])
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 5)
-		      (label_ref (match_dup 3))
-		      (pc)))]
+	(if_then_else (match_dup 6)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
-    operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[2]) == GTU ? NE : EQ,
+    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
+    operands[6] = gen_rtx_fmt_ee (GET_CODE (operands[4]) == GTU ? NE : EQ,
 				  VOIDmode, cc0_rtx, const0_rtx);
   })
 
@@ -604,17 +706,16 @@
    (set (pc)
 	(if_then_else (match_operator 1 "gtle_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   ""
   [(set (cc0) (compare (and:HI (match_dup 0)
 			       (const_int -256))
 		       (const_int 0)))
    (set (pc)
 	(if_then_else (match_dup 1)
-		      (label_ref (match_dup 2))
-		      (pc)))]
-  "")
+		      (match_dup 2)
+		      (match_dup 3)))])
 
 ;; Transform
 ;;
@@ -633,18 +734,18 @@
    (set (pc)
 	(if_then_else (match_operator 1 "gtuleu_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   ""
   [(set (cc0) (compare (and:HI (match_dup 0)
 			       (const_int -256))
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 3)
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_dup 4)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[3] = gen_rtx_fmt_ee (GET_CODE (operands[1]) == GTU ? NE : EQ,
+    operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[1]) == GTU ? NE : EQ,
 				  VOIDmode, cc0_rtx, const0_rtx);
   })
 
@@ -725,23 +826,23 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "incdec_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "INTVAL (operands[1]) != 0 && peep2_reg_dead_p (1, operands[0])"
   [(set (match_dup 0)
 	(unspec:SI [(match_dup 0)
-		    (match_dup 4)]
+		    (match_dup 5)]
 		   UNSPEC_INCDEC))
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (- INTVAL (operands[1]));
+    operands[5] = GEN_INT (- INTVAL (operands[1]));
   })
 
 ;; Transform
@@ -759,10 +860,10 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == -131072
        || INTVAL (operands[1]) == -65536
@@ -770,15 +871,15 @@
        || INTVAL (operands[1]) == 131072)"
   [(set (match_dup 0)
 	(plus:SI (match_dup 0)
-		 (match_dup 4)))
+		 (match_dup 5)))
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (- INTVAL (operands[1]));
+    operands[5] = GEN_INT (- INTVAL (operands[1]));
   })
 
 ;; Transform
@@ -797,10 +898,10 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && ((INTVAL (operands[1]) & 0x00ff) == INTVAL (operands[1])
        || (INTVAL (operands[1]) & 0xff00) == INTVAL (operands[1])
@@ -814,10 +915,9 @@
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
-  "")
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))])
 
 ;; Transform
 ;;
@@ -835,10 +935,10 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && ((INTVAL (operands[1]) | 0x00ff) == -1
        || (INTVAL (operands[1]) | 0xff00) == -1)
@@ -846,17 +946,17 @@
    && INTVAL (operands[1]) != -2"
   [(set (match_dup 0)
 	(xor:SI (match_dup 0)
-		(match_dup 4)))
+		(match_dup 5)))
    (set (match_dup 0)
 	(not:SI (match_dup 0)))
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (INTVAL (operands[1]) ^ -1);
+    operands[5] = GEN_INT (INTVAL (operands[1]) ^ -1);
   })
 
 ;; Transform
@@ -875,16 +975,16 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == -2147483647 - 1
        || (TARGET_H8300S && INTVAL (operands[1]) == 1073741824))"
   [(set (match_dup 0)
 	(rotate:SI (match_dup 0)
-		   (match_dup 4)))
+		   (match_dup 5)))
    (set (match_dup 0)
 	(unspec:SI [(match_dup 0)
 		    (const_int -1)]
@@ -892,11 +992,11 @@
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (INTVAL (operands[1]) == -2147483647 - 1 ? 1 : 2);
+    operands[5] = GEN_INT (INTVAL (operands[1]) == -2147483647 - 1 ? 1 : 2);
   })
 
 ;; Transform
@@ -914,33 +1014,33 @@
 ;; same compare insn immediately before this one.
 
 (define_peephole2
-  [(match_scratch:SI 4 "r")
+  [(match_scratch:SI 5 "r")
    (set (cc0)
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 2 "gtle_operator"
+	(if_then_else (match_operator 4 "gtle_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "!peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == 1
        || (TARGET_H8300S && INTVAL (operands[1]) == 3))
    && !same_cmp_preceding_p (insn)"
-  [(set (match_dup 4)
+  [(set (match_dup 5)
 	(match_dup 0))
-   (parallel [(set (match_dup 4)
-		   (ashiftrt:SI (match_dup 4)
-				(match_dup 5)))
+   (parallel [(set (match_dup 5)
+		   (ashiftrt:SI (match_dup 5)
+				(match_dup 6)))
 	      (clobber (scratch:QI))])
-   (set (cc0) (compare (match_dup 4)
+   (set (cc0) (compare (match_dup 5)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 2)
-		      (label_ref (match_dup 3))
-		      (pc)))]
+	(if_then_else (match_dup 4)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
+    operands[6] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
   })
 
 ;; Transform
@@ -958,34 +1058,34 @@
 ;; same compare insn immediately before this one.
 
 (define_peephole2
-  [(match_scratch:SI 4 "r")
+  [(match_scratch:SI 5 "r")
    (set (cc0)
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 2 "gtuleu_operator"
+	(if_then_else (match_operator 4 "gtuleu_operator"
 		         [(cc0) (const_int 0)])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "!peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == 1
        || (TARGET_H8300S && INTVAL (operands[1]) == 3))
    && !same_cmp_preceding_p (insn)"
-  [(set (match_dup 4)
+  [(set (match_dup 5)
 	(match_dup 0))
-   (parallel [(set (match_dup 4)
-		   (ashiftrt:SI (match_dup 4)
-				(match_dup 5)))
+   (parallel [(set (match_dup 5)
+		   (ashiftrt:SI (match_dup 5)
+				(match_dup 6)))
 	      (clobber (scratch:QI))])
-   (set (cc0) (compare (match_dup 4)
+   (set (cc0) (compare (match_dup 5)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 6)
-		      (label_ref (match_dup 3))
-		      (pc)))]
+	(if_then_else (match_dup 7)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
-    operands[6] = gen_rtx_fmt_ee (GET_CODE (operands[2]) == GTU ? NE : EQ,
+    operands[6] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
+    operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[4]) == GTU ? NE : EQ,
 				  VOIDmode, cc0_rtx, const0_rtx);
   })
 
@@ -1004,25 +1104,25 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 2 "gtle_operator"
+	(if_then_else (match_operator 4 "gtle_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == 1
        || (TARGET_H8300S && INTVAL (operands[1]) == 3))"
   [(parallel [(set (match_dup 0)
 		   (ashiftrt:SI (match_dup 0)
-				(match_dup 4)))
+				(match_dup 5)))
 	      (clobber (scratch:QI))])
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 2)
-		      (label_ref (match_dup 3))
-		      (pc)))]
+	(if_then_else (match_dup 4)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
+    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
   })
 
 ;; Transform
@@ -1040,26 +1140,26 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 2 "gtuleu_operator"
+	(if_then_else (match_operator 4 "gtuleu_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == 1
        || (TARGET_H8300S && INTVAL (operands[1]) == 3))"
   [(parallel [(set (match_dup 0)
 		   (ashiftrt:SI (match_dup 0)
-				(match_dup 4)))
+				(match_dup 5)))
 	      (clobber (scratch:QI))])
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 5)
-		      (label_ref (match_dup 3))
-		      (pc)))]
+	(if_then_else (match_dup 6)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
-    operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[2]) == GTU ? NE : EQ,
+    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));
+    operands[6] = gen_rtx_fmt_ee (GET_CODE (operands[4]) == GTU ? NE : EQ,
 				  VOIDmode, cc0_rtx, const0_rtx);
   })
 
@@ -1079,10 +1179,10 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 2 "gtle_operator"
+	(if_then_else (match_operator 4 "gtle_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && (INTVAL (operands[1]) == 3
        || INTVAL (operands[1]) == 7
@@ -1093,15 +1193,15 @@
        || INTVAL (operands[1]) == 255)"
   [(set (match_dup 0)
 	(and:SI (match_dup 0)
-		(match_dup 4)))
+		(match_dup 5)))
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 2)
-		      (label_ref (match_dup 3))
-		      (pc)))]
+	(if_then_else (match_dup 4)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (~INTVAL (operands[1]));
+    operands[5] = GEN_INT (~INTVAL (operands[1]));
   })
 
 ;; Transform
@@ -1120,10 +1220,10 @@
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "const_int_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 2 "gtuleu_operator"
+	(if_then_else (match_operator 4 "gtuleu_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 3 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "peep2_reg_dead_p (1, operands[0])
    && ((TARGET_H8300H && INTVAL (operands[1]) == 3)
 	|| INTVAL (operands[1]) == 7
@@ -1134,16 +1234,16 @@
 	|| INTVAL (operands[1]) == 255)"
   [(set (match_dup 0)
 	(and:SI (match_dup 0)
-		(match_dup 4)))
+		(match_dup 5)))
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 5)
-		      (label_ref (match_dup 3))
-		      (pc)))]
+	(if_then_else (match_dup 6)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[4] = GEN_INT (~INTVAL (operands[1]));
-    operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[2]) == GTU ? NE : EQ,
+    operands[5] = GEN_INT (~INTVAL (operands[1]));
+    operands[6] = gen_rtx_fmt_ee (GET_CODE (operands[4]) == GTU ? NE : EQ,
 				  VOIDmode, cc0_rtx, const0_rtx);
   })
 
@@ -1164,17 +1264,16 @@
    (set (pc)
 	(if_then_else (match_operator 1 "gtle_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   ""
   [(set (cc0) (compare (and:SI (match_dup 0)
 			       (const_int -65536))
 		       (const_int 0)))
    (set (pc)
 	(if_then_else (match_dup 1)
-		      (label_ref (match_dup 2))
-		      (pc)))]
-  "")
+		      (match_dup 2)
+		      (match_dup 3)))])
 
 ;; Transform
 ;;
@@ -1193,18 +1292,18 @@
    (set (pc)
 	(if_then_else (match_operator 1 "gtuleu_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   ""
   [(set (cc0) (compare (and:SI (match_dup 0)
 			       (const_int -65536))
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_dup 3)
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_dup 4)
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[3] = gen_rtx_fmt_ee (GET_CODE (operands[1]) == GTU ? NE : EQ,
+    operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[1]) == GTU ? NE : EQ,
 				  VOIDmode, cc0_rtx, const0_rtx);
   })
 
@@ -1223,32 +1322,32 @@
 ;; same compare insn.
 
 (define_peephole2
-  [(match_scratch:SI 4 "r")
+  [(match_scratch:SI 5 "r")
    (set (cc0)
 	(compare (match_operand:SI 0 "register_operand" "")
 		 (match_operand:SI 1 "incdec_operand" "")))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "INTVAL (operands[1]) != 0
    && !peep2_reg_dead_p (1, operands[0])
    && !same_cmp_following_p (insn)"
-  [(set (match_dup 4)
+  [(set (match_dup 5)
 	(match_dup 0))
-   (set (match_dup 4)
-	(unspec:SI [(match_dup 4)
-		    (match_dup 5)]
+   (set (match_dup 5)
+	(unspec:SI [(match_dup 5)
+		    (match_dup 6)]
 		   UNSPEC_INCDEC))
-   (set (cc0) (compare (match_dup 4)
+   (set (cc0) (compare (match_dup 5)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
-    operands[5] = GEN_INT (- INTVAL (operands[1]));
+    operands[6] = GEN_INT (- INTVAL (operands[1]));
   })
 
 ;; Narrow the mode of testing if possible.
@@ -1260,28 +1359,28 @@
    (set (cc0) (compare (match_dup 0)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_operator 3 "eqne_operator"
+	(if_then_else (match_operator 4 "eqne_operator"
 		       [(cc0) (const_int 0)])
-		      (label_ref (match_operand 2 "" ""))
-		      (pc)))]
+		      (match_operand 2 "pc_or_label_operand" "")
+		      (match_operand 3 "pc_or_label_operand" "")))]
   "((const_int_qi_operand (operands[1], QImode)
      || (GET_MODE (operands[0]) == SImode
 	 && const_int_hi_operand (operands[1], HImode)))
     && peep2_reg_dead_p (2, operands[0]))"
-  [(set (match_dup 4) (match_dup 6))
-   (set (cc0) (compare (match_dup 4)
+  [(set (match_dup 5) (match_dup 7))
+   (set (cc0) (compare (match_dup 5)
 		       (const_int 0)))
    (set (pc)
-	(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])
-		      (label_ref (match_dup 2))
-		      (pc)))]
+	(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])
+		      (match_dup 2)
+		      (match_dup 3)))]
   {
     enum machine_mode mode;
 
     mode = const_int_qi_operand (operands[1], QImode) ? QImode : HImode;
-    operands[4] = gen_rtx_REG (mode, REGNO (operands[0]));
-    operands[5] = gen_int_mode (INTVAL (operands[1]), mode);
-    operands[6] = gen_rtx_AND (mode, operands[4], operands[5]);
+    operands[5] = gen_rtx_REG (mode, REGNO (operands[0]));
+    operands[6] = gen_int_mode (INTVAL (operands[1]), mode);
+    operands[7] = gen_rtx_AND (mode, operands[5], operands[6]);
   })
 
 ;; These triggers right at the end of allocation of locals in the
diff --git a/gcc/config/h8300/predicates.md b/gcc/config/h8300/predicates.md
index fc1dda3e485..b530c2cb23e 100644
--- a/gcc/config/h8300/predicates.md
+++ b/gcc/config/h8300/predicates.md
@@ -496,12 +496,8 @@
   return (code == IOR || code == XOR);
 })
 
-(define_predicate "simple_memory_operand"
-  (match_code "mem")
-{
-  if (GET_MODE (op) == mode
-      && (GET_CODE (XEXP (op, 0)) != PRE_DEC
-	  && GET_CODE (XEXP (op, 0)) != POST_INC))
-    return 1;
-  return 0;
-})
+;; Used to detect valid targets for conditional branches
+;; Used to detect (pc) or (label_ref) in some jumping patterns
+(define_predicate "pc_or_label_operand"
+  (match_code "pc,label_ref"))
+
diff --git a/gcc/config/h8300/proepi.md b/gcc/config/h8300/proepi.md
index 44d59682496..9d19ff54084 100644
--- a/gcc/config/h8300/proepi.md
+++ b/gcc/config/h8300/proepi.md
@@ -36,7 +36,8 @@
 				   XVECLEN (operands[0], 0) - 2));
   return "ldm.l\t@er7+,%S1-%S3";
 }
-  [(set_attr "length" "4")])
+  [(set_attr "cc" "none")
+   (set_attr "length" "4")])
 
 (define_insn "stm_h8300sx"
   [(match_parallel           0 "h8300_stm_parallel"
@@ -48,7 +49,8 @@
 				  XVECLEN (operands[0], 0) - 2));
   return "stm.l\t%S2-%S3,@-er7";
 }
-  [(set_attr "length" "4")])
+  [(set_attr "cc" "none")
+   (set_attr "length" "4")])
 
 (define_insn "return_h8sx"
   [(match_parallel           0 "h8300_return_parallel"
@@ -65,7 +67,8 @@
   else
     return "rts/l\t%S1-%S3";
 }
-  [(set_attr "can_delay" "no")
+  [(set_attr "cc" "none")
+   (set_attr "can_delay" "no")
    (set_attr "length" "2")])
 
 (define_expand "return"
@@ -83,7 +86,8 @@
   else
     return "rts";
 }
-  [(set_attr "can_delay" "no")
+  [(set_attr "cc" "none")
+   (set_attr "can_delay" "no")
    (set_attr "length" "2")])
 
 (define_expand "prologue"
diff --git a/gcc/config/h8300/shiftrotate.md b/gcc/config/h8300/shiftrotate.md
index 2dfffbf4d94..75606d7c50b 100644
--- a/gcc/config/h8300/shiftrotate.md
+++ b/gcc/config/h8300/shiftrotate.md
@@ -50,23 +50,11 @@
 
 ;; QI/HI/SI BIT SHIFTS
 
-(define_insn_and_split ""
-  [(set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
-	(match_operator:QHSI 3 "h8sx_unary_shift_operator"
-	 [(match_operand:QHSI 1 "h8300_dst_operand" "0")
-	  (match_operand:QI 2 "const_int_operand" "")]))]
-  "h8300_operands_match_p (operands)"
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-	      (clobber (reg:CC CC_REG))])])
-
 (define_insn ""
   [(set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
 	(match_operator:QHSI 3 "h8sx_unary_shift_operator"
 	 [(match_operand:QHSI 1 "h8300_dst_operand" "0")
-	  (match_operand:QI 2 "const_int_operand" "")]))
-   (clobber (reg:CC CC_REG))]
+	  (match_operand:QI 2 "const_int_operand" "")]))]
   "h8300_operands_match_p (operands)"
 {
   if (<MODE>mode == E_QImode)
@@ -77,68 +65,15 @@
     return output_h8sx_shift (operands, 'l', 'S');
   gcc_unreachable ();
 }
-  [(set_attr "length_table" "unary")])
+  [(set_attr "length_table" "unary")
+   (set_attr "cc" "set_znv")])
 
 (define_insn ""
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operator:QHSI 3 "h8sx_unary_shift_operator"
-	    [(match_operand:QHSI 1 "h8300_dst_operand" "0")
-	     (match_operand:QI 2 "const_int_operand" "")])
-	  (const_int 0)))
-   (set (match_operand:QHSI 0 "h8300_dst_operand" "=rQ")
-	(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]
-  "h8300_operands_match_p (operands)"
-{
-  if (<MODE>mode == E_QImode)
-    return output_h8sx_shift (operands, 'b', 'X');
-  if (<MODE>mode == E_HImode)
-    return output_h8sx_shift (operands, 'w', 'T');
-  if (<MODE>mode == E_SImode)
-    return output_h8sx_shift (operands, 'l', 'S');
-  gcc_unreachable ();
-}
-  [(set_attr "length_table" "unary")])
-
-(define_insn_and_split ""
   [(set (match_operand:QHSI 0 "register_operand" "=r")
 	(match_operator:QHSI 3 "h8sx_binary_shift_operator"
 	 [(match_operand:QHSI 1 "register_operand" "0")
 	  (match_operand:QI 2 "nonmemory_operand" "r P5>X")]))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn ""
-  [(set (match_operand:QHSI 0 "register_operand" "=r")
-	(match_operator:QHSI 3 "h8sx_binary_shift_operator"
-	 [(match_operand:QHSI 1 "register_operand" "0")
-	  (match_operand:QI 2 "nonmemory_operand" "r P5>X")]))
-   (clobber (reg:CC CC_REG))]
-  ""
-{
-  if (<MODE>mode == QImode)
-    return output_h8sx_shift (operands, 'b', 'X');
-  if (<MODE>mode == HImode)
-    return output_h8sx_shift (operands, 'w', 'T');
-  if (<MODE>mode == SImode)
-    return output_h8sx_shift (operands, 'l', 'S');
-  gcc_unreachable ();
-}
-  [(set_attr "length" "4")])
-
-(define_insn ""
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operator:QHSI 3 "h8sx_binary_shift_operator"
-	   [(match_operand:QHSI 1 "register_operand" "0")
-	    (match_operand:QI 2 "nonmemory_operand" "r P5>X")])
-	  (const_int 0)))
-   (set (match_operand:QHSI 0 "register_operand" "=r")
-	(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]
-  ""
 {
   if (<MODE>mode == QImode)
     return output_h8sx_shift (operands, 'b', 'X');
@@ -148,97 +83,38 @@
     return output_h8sx_shift (operands, 'l', 'S');
   gcc_unreachable ();
 }
-  [(set_attr "length" "4")])
+  [(set_attr "length" "4")
+   (set_attr "cc" "set_znv")])
 
-(define_insn_and_split "*shiftqi"
+(define_insn "*shiftqi"
   [(set (match_operand:QI 0 "register_operand" "=r,r")
 	(match_operator:QI 3 "nshift_operator"
 	 [(match_operand:QI 1 "register_operand" "0,0")
 	  (match_operand:QI 2 "nonmemory_operand" "R,rn")]))
    (clobber (match_scratch:QI 4 "=X,&r"))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-	      (clobber (match_dup 4))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*shiftqi_clobber_flags"
-  [(set (match_operand:QI 0 "register_operand" "=r,r")
-	(match_operator:QI 3 "nshift_operator"
-	 [(match_operand:QI 1 "register_operand" "0,0")
-	  (match_operand:QI 2 "nonmemory_operand" "R,rn")]))
-   (clobber (match_scratch:QI 4 "=X,&r"))
-   (clobber (reg:CC CC_REG))]
-  ""
-{
-  return output_a_shift (operands);
-}
-  [(set (attr "length")
-	(symbol_ref "compute_a_shift_length (insn, operands)"))])
-
-(define_insn "*shiftqi_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operator:QI 3 "nshift_operator"
-	   [(match_operand:QI 1 "register_operand" "0,0")
-	    (match_operand:QI 2 "nonmemory_operand" "R,rn")])
-	(const_int 0)))
-   (set (match_operand:QI 0 "register_operand" "=r,r")
-	(match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-   (clobber (match_scratch:QI 4 "=X,&r"))]
-  "(compute_a_shift_cc (insn, operands) == 2
-    || compute_a_shift_cc (insn, operands) == 3)"
 {
   return output_a_shift (operands);
 }
   [(set (attr "length")
-	(symbol_ref "compute_a_shift_length (insn, operands)"))])
+	(symbol_ref "compute_a_shift_length (insn, operands)"))
+   (set (attr "cc")
+	(symbol_ref "compute_a_shift_cc (insn, operands)"))])
 
-(define_insn_and_split "*shifthi"
+(define_insn "*shifthi"
   [(set (match_operand:HI 0 "register_operand" "=r,r")
 	(match_operator:HI 3 "nshift_operator"
 	 [(match_operand:HI 1 "register_operand" "0,0")
 	  (match_operand:QI 2 "nonmemory_operand" "S,rn")]))
    (clobber (match_scratch:QI 4 "=X,&r"))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-	      (clobber (match_dup 4))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "*shifthi_clobber_flags"
-  [(set (match_operand:HI 0 "register_operand" "=r,r")
-	(match_operator:HI 3 "nshift_operator"
-	 [(match_operand:HI 1 "register_operand" "0,0")
-	  (match_operand:QI 2 "nonmemory_operand" "S,rn")]))
-   (clobber (match_scratch:QI 4 "=X,&r"))
-   (clobber (reg:CC CC_REG))]
-  ""
-{
-  return output_a_shift (operands);
-}
-  [(set (attr "length")
-	(symbol_ref "compute_a_shift_length (insn, operands)"))])
-
-(define_insn "*shifthi_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operator:HI 3 "nshift_operator"
-	   [(match_operand:HI 1 "register_operand" "0,0")
-	    (match_operand:QI 2 "nonmemory_operand" "S,rn")])
-	  (const_int 0)))
-   (set (match_operand:HI 0 "register_operand" "=r,r")
-	(match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-   (clobber (match_scratch:QI 4 "=X,&r"))]
-  "(compute_a_shift_cc (insn, operands) == 2
-    || compute_a_shift_cc (insn, operands) == 3)"
 {
   return output_a_shift (operands);
 }
   [(set (attr "length")
-	(symbol_ref "compute_a_shift_length (insn, operands)"))])
+	(symbol_ref "compute_a_shift_length (insn, operands)"))
+   (set (attr "cc")
+	(symbol_ref "compute_a_shift_cc (insn, operands)"))])
 
 (define_insn "*shiftsi"
   [(set (match_operand:SI 0 "register_operand" "=r,r")
@@ -247,39 +123,14 @@
 	  (match_operand:QI 2 "nonmemory_operand" "T,rn")]))
    (clobber (match_scratch:QI 4 "=X,&r"))]
   ""
-  "#")
-
-(define_insn "*shiftsi_clobber_flags"
-  [(set (match_operand:SI 0 "register_operand" "=r,r")
-	(match_operator:SI 3 "nshift_operator"
-	 [(match_operand:SI 1 "register_operand" "0,0")
-	  (match_operand:QI 2 "nonmemory_operand" "T,rn")]))
-   (clobber (match_scratch:QI 4 "=X,&r"))
-   (clobber (reg:CC CC_REG))]
-  ""
 {
   return output_a_shift (operands);
 }
   [(set (attr "length")
-	(symbol_ref "compute_a_shift_length (insn, operands)"))])
+	(symbol_ref "compute_a_shift_length (insn, operands)"))
+   (set (attr "cc")
+	(symbol_ref "compute_a_shift_cc (insn, operands)"))])
 
-(define_insn "*shiftsi_set_flags"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN
-	  (match_operator:SI 3 "nshift_operator"
-	   [(match_operand:SI 1 "register_operand" "0,0")
-	    (match_operand:QI 2 "nonmemory_operand" "T,rn")])
-	  (const_int 0)))
-   (set (match_operand:SI 0 "register_operand" "=r,r")
-	(match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-   (clobber (match_scratch:QI 4 "=X,&r"))]
-  "(compute_a_shift_cc (insn, operands) == 2
-    || compute_a_shift_cc (insn, operands) == 3)"
-{
-  return output_a_shift (operands);
-}
-  [(set (attr "length")
-	(symbol_ref "compute_a_shift_length (insn, operands)"))])
 
 ;; Split a variable shift into a loop.  If the register containing
 ;; the shift count dies, then we just use that register.
@@ -289,12 +140,12 @@
 	(match_operator 2 "nshift_operator"
 	 [(match_dup 0)
 	  (match_operand:QI 1 "register_operand" "")]))
-   (clobber (match_operand:QI 3 "register_operand" ""))
-   (clobber (reg:CC CC_REG))]
+   (clobber (match_operand:QI 3 "register_operand" ""))]
   "epilogue_completed
    && find_regno_note (insn, REG_DEAD, REGNO (operands[1]))"
-  [(set (pc)
-        (if_then_else (le (match_dup 1) (const_int 0))
+  [(set (cc0) (compare (match_dup 1) (const_int 0)))
+   (set (pc)
+        (if_then_else (le (cc0) (const_int 0))
 		      (label_ref (match_dup 5))
 		      (pc)))
    (match_dup 4)
@@ -302,13 +153,10 @@
      [(set (match_dup 0)
 	   (match_op_dup 2 [(match_dup 0) (const_int 1)]))
       (clobber (scratch:QI))])
-   (parallel [(set (reg:CCZN CC_REG)
-		   (compare:CCZN
-		     (plus:QI (match_dup 1) (const_int -1))
-		     (const_int 0)))
-	      (set (match_dup 1) (plus:QI (match_dup 1) (const_int -1)))])
+   (set (match_dup 1) (plus:QI (match_dup 1) (const_int -1)))
+   (set (cc0) (compare (match_dup 1) (const_int 0)))
    (set (pc)
-        (if_then_else (ne (reg:CCZN CC_REG) (const_int 0))
+        (if_then_else (ne (cc0) (const_int 0))
 		      (label_ref (match_dup 4))
 		      (pc)))
    (match_dup 5)]
@@ -322,15 +170,14 @@
 	(match_operator 2 "nshift_operator"
 	 [(match_dup 0)
 	  (match_operand:QI 1 "register_operand" "")]))
-   (clobber (match_operand:QI 3 "register_operand" ""))
-   (clobber (reg:CC CC_REG))]
+   (clobber (match_operand:QI 3 "register_operand" ""))]
   "epilogue_completed
    && !find_regno_note (insn, REG_DEAD, REGNO (operands[1]))"
-  [(parallel
-     [(set (reg:CCZN CC_REG) (compare:CCZN (match_dup 1) (const_int 0)))
-      (set (match_dup 3) (match_dup 1))])
+  [(set (match_dup 3)
+	(match_dup 1))
+   (set (cc0) (compare (match_dup 3) (const_int 0)))
    (set (pc)
-        (if_then_else (le (reg:CCZN CC_REG) (const_int 0))
+        (if_then_else (le (cc0) (const_int 0))
 		      (label_ref (match_dup 5))
 		      (pc)))
    (match_dup 4)
@@ -338,13 +185,10 @@
      [(set (match_dup 0)
 	   (match_op_dup 2 [(match_dup 0) (const_int 1)]))
       (clobber (scratch:QI))])
-   (parallel [(set (reg:CCZN CC_REG)
-		   (compare:CCZN
-		     (plus:QI (match_dup 3) (const_int -1))
-		     (const_int 0)))
-	      (set (match_dup 3) (plus:QI (match_dup 3) (const_int -1)))])
+   (set (match_dup 3) (plus:QI (match_dup 3) (const_int -1)))
+   (set (cc0) (compare (match_dup 3) (const_int 0)))
    (set (pc)
-        (if_then_else (ne (reg:CCZN CC_REG) (const_int 0))
+        (if_then_else (ne (cc0) (const_int 0))
 		      (label_ref (match_dup 4))
 		      (pc)))
    (match_dup 5)]
@@ -352,18 +196,6 @@
     operands[4] = gen_label_rtx ();
     operands[5] = gen_label_rtx ();
   })
-
-(define_split
-  [(set (match_operand:SI 0 "register_operand")
-	(match_operator:SI 3 "nshift_operator"
-	 [(match_operand:SI 1 "register_operand")
-	  (match_operand:QI 2 "nonmemory_operand")]))
-   (clobber (match_scratch:QI 4))]
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))
-	      (clobber (match_dup 4))
-	      (clobber (reg:CC CC_REG))])])
-
 
 ;; ----------------------------------------------------------------------
 ;; ROTATIONS
@@ -379,22 +211,11 @@
     DONE;
   })
 
-(define_insn_and_split "rotl<mode>3_1"
+(define_insn "rotl<mode>3_1"
   [(set (match_operand:QHSI 0 "register_operand" "=r")
 	(rotate:QHSI (match_operand:QHSI 1 "register_operand" "0")
 		     (match_operand:QI 2 "immediate_operand" "")))]
   ""
-  "#"
-  "reload_completed"
-  [(parallel [(set (match_dup 0) (rotate:QHSI (match_dup 1) (match_dup 2)))
-	      (clobber (reg:CC CC_REG))])])
-
-(define_insn "rotl<mode>3_1_clobber_flags"
-  [(set (match_operand:QHSI 0 "register_operand" "=r")
-	(rotate:QHSI (match_operand:QHSI 1 "register_operand" "0")
-		     (match_operand:QI 2 "immediate_operand" "")))
-   (clobber (reg:CC CC_REG))]
-  ""
 {
   return output_a_rotate (ROTATE, operands);
 }
diff --git a/gcc/config/h8300/testcompare.md b/gcc/config/h8300/testcompare.md
index e966f37d261..118db145a8a 100644
--- a/gcc/config/h8300/testcompare.md
+++ b/gcc/config/h8300/testcompare.md
@@ -2,204 +2,164 @@
 ;; TEST INSTRUCTIONS
 ;; ----------------------------------------------------------------------
 
-;; (define_insn_and_split "*tst_extzv_1_n"
-;;   [(set (cc0)
-;; 	(compare (zero_extract:SI (match_operand:QI 0 "general_operand_src" "r,U,mn>")
-;; 				  (const_int 1)
-;; 				  (match_operand 1 "const_int_operand" "n,n,n"))
-;; 		 (const_int 0)))
-;;   (clobber (match_scratch:QI 2 "=X,X,&r"))]
-;;  "!CONSTANT_P (operands[0])"
-;;  "@
-;;   btst\\t%Z1,%Y0
-;;   btst\\t%Z1,%Y0
-;;   #"
-;;  "&& reload_completed
-;;   && !satisfies_constraint_U (operands[0])"
-;;  [(set (match_dup 2)
-;;	(match_dup 0))
-;;   (parallel [(set (cc0) (compare (zero_extract:SI (match_dup 2)
-;;						   (const_int 1)
-;;						   (match_dup 1))
-;;				  (const_int 0)))
-;;	      (clobber (scratch:QI))])]
-;;  ""
-;;  [(set_attr "length" "2,8,10")
-;;   (set_attr "cc" "set_zn,set_zn,set_zn")])
-;;
-;;(define_insn ""
-;;  [(set (cc0)
-;;	(compare (zero_extract:HSI (match_operand:HSI 0 "register_operand" "r")
-;;				   (const_int 1)
-;;				   (match_operand 1 "const_int_operand" "n"))
-;;		 (const_int 0)))]
-;;  "INTVAL (operands[1]) <= 15"
-;;  "btst	%Z1,%Y0"
-;;  [(set_attr "length" "2")
-;;   (set_attr "cc" "set_zn")])
-;;
-;;(define_insn_and_split "*tstsi_upper_bit"
-;;  [(set (cc0)
-;;	(compare (zero_extract:SI (match_operand:SI 0 "register_operand" "r")
-;;				  (const_int 1)
-;;				  (match_operand 1 "const_int_operand" "n"))
-;;		 (const_int 0)))
-;;   (clobber (match_scratch:SI 2 "=&r"))]
-;;  "INTVAL (operands[1]) >= 16"
-;;  "#"
-;;  "&& reload_completed"
-;;  [(set (match_dup 2)
-;;	(ior:SI (and:SI (match_dup 2)
-;;			(const_int -65536))
-;;		(lshiftrt:SI (match_dup 0)
-;;			     (const_int 16))))
-;;   (set (cc0)
-;;	(compare (zero_extract:SI (match_dup 2)
-;;				  (const_int 1)
-;;				  (match_dup 3))
-;;		 (const_int 0)))]
-;;  {
-;;    operands[3] = GEN_INT (INTVAL (operands[1]) - 16);
-;;  })
-;;
-;;(define_insn "*tstsi_variable_bit"
-;;  [(set (cc0)
-;;	(compare (zero_extract:SI (match_operand:SI 0 "register_operand" "r")
-;;				  (const_int 1)
-;;				  (and:SI (match_operand:SI 1 "register_operand" "r")
-;;					  (const_int 7)))
-;;		 (const_int 0)))]
-;;  ""
-;;  "btst	%w1,%w0"
-;;  [(set_attr "length" "2")
-;;   (set_attr "cc" "set_zn")])
-;;
-;;(define_insn_and_split "*tstsi_variable_bit_qi"
-;;  [(set (cc0)
-;;	(compare (zero_extract:SI (zero_extend:SI (match_operand:QI 0 "general_operand_src" "r,U,mn>"))
-;;				  (const_int 1)
-;;				  (and:SI (match_operand:SI 1 "register_operand" "r,r,r")
-;;					  (const_int 7)))
-;;		 (const_int 0)))
-;;   (clobber (match_scratch:QI 2 "=X,X,&r"))]
-;;  "!CONSTANT_P (operands[0])"
-;;  "@
-;;   btst\\t%w1,%X0
-;;   btst\\t%w1,%X0
-;;   #"
-;;  "&& reload_completed
-;;   && !satisfies_constraint_U (operands[0])"
-;;  [(set (match_dup 2)
-;;	(match_dup 0))
-;;   (parallel [(set (cc0)
-;;		   (compare (zero_extract:SI (zero_extend:SI (match_dup 2))
-;;					     (const_int 1)
-;;					     (and:SI (match_dup 1)
-;;						     (const_int 7)))
-;;			    (const_int 0)))
-;;	      (clobber (scratch:QI))])]
-;;  ""
-;;  [(set_attr "length" "2,8,10")
-;;   (set_attr "cc" "set_zn,set_zn,set_zn")])
+(define_insn_and_split "*tst_extzv_1_n"
+  [(set (cc0)
+	(compare (zero_extract:SI (match_operand:QI 0 "general_operand_src" "r,U,mn>")
+				  (const_int 1)
+				  (match_operand 1 "const_int_operand" "n,n,n"))
+		 (const_int 0)))
+   (clobber (match_scratch:QI 2 "=X,X,&r"))]
+  "!CONSTANT_P (operands[0])"
+  "@
+   btst\\t%Z1,%Y0
+   btst\\t%Z1,%Y0
+   #"
+  "&& reload_completed
+   && !satisfies_constraint_U (operands[0])"
+  [(set (match_dup 2)
+	(match_dup 0))
+   (parallel [(set (cc0) (compare (zero_extract:SI (match_dup 2)
+						   (const_int 1)
+						   (match_dup 1))
+				  (const_int 0)))
+	      (clobber (scratch:QI))])]
+  ""
+  [(set_attr "length" "2,8,10")
+   (set_attr "cc" "set_zn,set_zn,set_zn")])
 
-;; XXX are we getting the test/compare right for these 3 patterns?
-(define_insn "tst<mode>_bit"
-  [(set (reg:CCZN CC_REG)
-	(match_operator 2 "comparison_operator"
-	  [(zero_extract:HSI (match_operand:HSI 0 "register_operand" "r")
-			     (const_int 1)
-			     (match_operand 1 "const_int_operand" "n"))
-	   (const_int 0)]))]
-  "reload_completed && INTVAL (operands[1]) <= 15"
+(define_insn ""
+  [(set (cc0)
+	(compare (zero_extract:HSI (match_operand:HSI 0 "register_operand" "r")
+				   (const_int 1)
+				   (match_operand 1 "const_int_operand" "n"))
+		 (const_int 0)))]
+  "INTVAL (operands[1]) <= 15"
   "btst	%Z1,%Y0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_zn")])
 
 (define_insn_and_split "*tstsi_upper_bit"
-  [(set (reg:CCZN CC_REG)
-	(match_operator 3 "comparison_operator"
-	  [(zero_extract:SI (match_operand:SI 0 "register_operand" "r")
-			    (const_int 1)
-			    (match_operand 1 "const_int_operand" "n"))
-	   (const_int 0)]))
+  [(set (cc0)
+	(compare (zero_extract:SI (match_operand:SI 0 "register_operand" "r")
+				  (const_int 1)
+				  (match_operand 1 "const_int_operand" "n"))
+		 (const_int 0)))
    (clobber (match_scratch:SI 2 "=&r"))]
-  "reload_completed && INTVAL (operands[1]) >= 16"
+  "INTVAL (operands[1]) >= 16"
   "#"
-  "reload_completed"
+  "&& reload_completed"
   [(set (match_dup 2)
 	(ior:SI (and:SI (match_dup 2)
 			(const_int -65536))
 		(lshiftrt:SI (match_dup 0)
 			     (const_int 16))))
-   (set (reg:CCZN CC_REG)
-	(match_op_dup 3
-	  [(zero_extract:SI (match_dup 2) (const_int 1) (match_dup 3))
-	   (const_int 0)]))]
+   (set (cc0)
+	(compare (zero_extract:SI (match_dup 2)
+				  (const_int 1)
+				  (match_dup 3))
+		 (const_int 0)))]
   {
     operands[3] = GEN_INT (INTVAL (operands[1]) - 16);
   })
 
 (define_insn "*tstsi_variable_bit"
-  [(set (reg:CCZN CC_REG)
-	(match_operator 2 "comparison_operator"
-	  [(zero_extract:SI (match_operand:SI 0 "register_operand" "r")
-			    (const_int 1)
-			    (and:SI (match_operand:SI 1 "register_operand" "r")
-				    (const_int 7)))
-	   (const_int 0)]))]
-  "reload_completed"
+  [(set (cc0)
+	(compare (zero_extract:SI (match_operand:SI 0 "register_operand" "r")
+				  (const_int 1)
+				  (and:SI (match_operand:SI 1 "register_operand" "r")
+					  (const_int 7)))
+		 (const_int 0)))]
+  ""
   "btst	%w1,%w0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_zn")])
 
+(define_insn_and_split "*tstsi_variable_bit_qi"
+  [(set (cc0)
+	(compare (zero_extract:SI (zero_extend:SI (match_operand:QI 0 "general_operand_src" "r,U,mn>"))
+				  (const_int 1)
+				  (and:SI (match_operand:SI 1 "register_operand" "r,r,r")
+					  (const_int 7)))
+		 (const_int 0)))
+   (clobber (match_scratch:QI 2 "=X,X,&r"))]
+  "!CONSTANT_P (operands[0])"
+  "@
+   btst\\t%w1,%X0
+   btst\\t%w1,%X0
+   #"
+  "&& reload_completed
+   && !satisfies_constraint_U (operands[0])"
+  [(set (match_dup 2)
+	(match_dup 0))
+   (parallel [(set (cc0)
+		   (compare (zero_extract:SI (zero_extend:SI (match_dup 2))
+					     (const_int 1)
+					     (and:SI (match_dup 1)
+						     (const_int 7)))
+			    (const_int 0)))
+	      (clobber (scratch:QI))])]
+  ""
+  [(set_attr "length" "2,8,10")
+   (set_attr "cc" "set_zn,set_zn,set_zn")])
 
 (define_insn "*tst<mode>"
-  [(set (reg:CCZN CC_REG)
-	(compare:CCZN (match_operand:QHSI 0 "register_operand" "r")
-		      (const_int 0)))]
+  [(set (cc0)
+	(compare (match_operand:QHI 0 "register_operand" "r")
+		 (const_int 0)))]
   ""
   {
     if (<MODE>mode == QImode)
       return "mov.b	%X0,%X0";
     else if (<MODE>mode == HImode)
       return "mov.w	%T0,%T0";
-    else if (<MODE>mode == SImode)
-      return "mov.l	%S0,%S0";
     gcc_unreachable ();
   }
   [(set_attr "length" "2")
    (set_attr "cc" "set_znv")])
 
 (define_insn "*tsthi_upper"
-  [(set (reg:CCZN CC_REG)
+  [(set (cc0)
 	(compare (and:HI (match_operand:HI 0 "register_operand" "r")
 			 (const_int -256))
 		 (const_int 0)))]
-  "reload_completed"
+  ""
   "mov.b	%t0,%t0"
-  [(set_attr "length" "2")])
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_znv")])
+
+(define_insn "*tstsi"
+  [(set (cc0)
+	(compare (match_operand:SI 0 "register_operand" "r")
+		 (const_int 0)))]
+  ""
+  "mov.l	%S0,%S0"
+  [(set_attr "length" "2")
+   (set_attr "cc" "set_znv")])
 
 (define_insn "*tstsi_upper"
-  [(set (reg:CCZN CC_REG)
+  [(set (cc0)
 	(compare (and:SI (match_operand:SI 0 "register_operand" "r")
 			 (const_int -65536))
 		 (const_int 0)))]
-  "reload_completed"
+  ""
   "mov.w	%e0,%e0"
   [(set_attr "length" "2")
    (set_attr "cc" "set_znv")])
 
 (define_insn "*cmpqi"
-  [(set (reg:CC CC_REG)
+  [(set (cc0)
 	(compare (match_operand:QI 0 "h8300_dst_operand" "rQ")
 		 (match_operand:QI 1 "h8300_src_operand" "rQi")))]
-  "reload_completed"
+  ""
   "cmp.b	%X1,%X0"
-  [(set_attr "length_table" "add")])
+  [(set_attr "length_table" "add")
+   (set_attr "cc" "compare")])
 
-(define_insn "*cmphi"
-  [(set (reg:CC CC_REG)
+(define_insn "*cmphi_h8300hs_znvc"
+  [(set (cc0)
 	(compare (match_operand:HI 0 "h8300_dst_operand" "rU,rQ")
 		 (match_operand:HI 1 "h8300_src_operand" "P3>X,rQi")))]
-  "reload_completed"
+  ""
 {
   switch (which_alternative)
     {
@@ -214,13 +174,14 @@
       gcc_unreachable ();
       }
 }
-  [(set_attr "length_table" "short_immediate,add")])
+  [(set_attr "length_table" "short_immediate,add")
+   (set_attr "cc" "compare,compare")])
 
 (define_insn "cmpsi"
-  [(set (reg:CC CC_REG)
+  [(set (cc0)
 	(compare (match_operand:SI 0 "h8300_dst_operand" "r,rQ")
 		 (match_operand:SI 1 "h8300_src_operand" "P3>X,rQi")))]
-  "reload_completed"
+  ""
 {
   switch (which_alternative)
     {
@@ -236,28 +197,5 @@
     }
 }
   [(set_attr "length" "2,*")
-   (set_attr "length_table" "*,add")])
-
-;; Convert a memory comparison to a move if there is a scratch register.
-
-(define_peephole2
-  [(match_scratch:QHSI 1 "r")
-   (set (reg:CC CC_REG)
-	(compare (match_operand:QHSI 0 "memory_operand" "")
-		 (const_int 0)))]
-  ""
-  [(parallel [(set (match_dup 1) (match_dup 0)) (clobber (reg:CC CC_REG))])
-   (set (reg:CC CC_REG) (compare:CC (match_dup 1) (const_int 0)))])
-
-;; The compare-elimination pass does not handle memory reference.  So this
-;; little peephole helps fill the gap and avoid code quality regressions.
-(define_peephole2
-  [(parallel [(set (match_operand:QHSI 0 "register_operand" "")
-		   (match_operand:QHSI 1 "simple_memory_operand" ""))
-	      (clobber (reg:CC CC_REG))])
-   (set (reg:CCZN CC_REG)
-	(compare:CCZN (match_dup 0) (const_int 0)))]
-  ""
-  [(parallel [(set (reg:CCZN CC_REG) (compare:CCZN (match_dup 1) (const_int 0)))
-	      (set (match_dup 0) (match_dup 1))])])
-
+   (set_attr "length_table" "*,add")
+   (set_attr "cc" "compare,compare")])
