From gcc-patches-bounces@gcc.gnu.org Sat Aug 22 19:24:28 2020
Return-Path: gcc-patches-bounces@gcc.gnu.org
Received: from zmta04.collab.prod.int.phx2.redhat.com (LHLO
 zmta04.collab.prod.int.phx2.redhat.com) (10.5.81.11) by
 zmail22.collab.prod.int.phx2.redhat.com with LMTP; Sat, 22 Aug 2020
 19:24:28 -0400 (EDT)
Received: from smtp.corp.redhat.com
 (int-mx06.intmail.prod.int.rdu2.redhat.com [10.11.54.6]) by
 zmta04.collab.prod.int.phx2.redhat.com (Postfix) with ESMTP id 1F0EDD1D3A
 for <law@mail.corp.redhat.com>; Sat, 22 Aug 2020 19:24:28 -0400 (EDT)
Received: by smtp.corp.redhat.com (Postfix)
	id E968E2166BA2; Sat, 22 Aug 2020 23:24:27 +0000 (UTC)
Delivered-To: law@redhat.com
Received: from mimecast-mx02.redhat.com
 (mimecast03.extmail.prod.ext.rdu2.redhat.com [10.11.55.19]) by
 smtp.corp.redhat.com (Postfix) with ESMTPS id E39D32166B27 for
 <law@redhat.com>; Sat, 22 Aug 2020 23:24:27 +0000 (UTC)
Received: from us-smtp-1.mimecast.com (us-smtp-2.mimecast.com
 [207.211.31.81]) (using TLSv1.2 with cipher ECDHE-RSA-AES256-SHA384
 (256/256 bits)) (No client certificate requested) by
 mimecast-mx02.redhat.com (Postfix) with ESMTPS id C6B16811E7A for
 <law@redhat.com>; Sat, 22 Aug 2020 23:24:27 +0000 (UTC)
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
	d=dkim.mimecast.com; s=201903; t=1598138667;
	h=from:from:sender:sender:reply-to:subject:subject:date:date:
	 message-id:message-id:to:to:cc:mime-version:mime-version:
	 content-type:content-type:in-reply-to:in-reply-to:
	 references:references:list-id:list-help:list-unsubscribe:
	 list-subscribe:list-post:dkim-signature;
	bh=sYSY/csEud4m/rpKdsNR1u4R1gc3/wBy2PixbWdhYrw=;
	b=dXMNvblSh1Hws2giHMe74M4fy36uMdtAGnEz9ZvngluzzFvl6IuHKswgrwM90V4g7Iq/Jf
	vkpww7OHqpPNiYzBhR671Pcw7LNXi7otIRqJMS+dOsS1Yb0YMp1pjNlYlanBETUAME5GnI
	g0yJ5v1deSdsAY3UTmVGf8L+gokDhutffSWeRPtA01F8A796AXhLKF+ClzXRO2Ub+yp4mf
	8/CldJGU9ygDR59ITTBc1/3nME54DwgBdI4GIvxqLBVYk1+/utndjC3keqMK63aLdLfj4H
	+YUJjB0C6fKivUfW8ebmfjLjNqYgegO6JTESlw7zOoxiJXpcCxqKzX/rc1bOtA==
ARC-Seal: i=1; s=201903; d=dkim.mimecast.com; t=1598138667; a=rsa-sha256;
	cv=none;
	b=G9TiQsFxrsNAOkcJ2sGU+oKGkq7bKxOsY4yAJsLGmW1fo8we6iYjXr2i0Se5HdBduZ87uR
	gh2m4x7ev9r+qsoOdFHhzAWWYV7iMpL/S9a/mQpzOgbFuYexVhnpearoYVP7MicWG3n6Jm
	kxK2MpF99gmzjHc29DuxENGnON2z57G1qLZxgLFYO/l3ijtTIItYpAsrfVhNC1HHM47W6c
	NSM6uwB7ZkIynQqqk958Eae/RWz6IgsPUu0AU7IO7OcD6APtvSQEUWVtMiTVCZFi/AYL/e
	S5huQYt6i2AZunAhW6oQDexHFQCLIIubIp8dB0E9RK60PSjUzOzi5es1jYtuJg==
ARC-Authentication-Results: i=1; relay.mimecast.com; dkim=fail (headers rsa
 verify failed) header.d=nextmovesoftware.com header.s=default
 header.b=CzSCaYQU; dmarc=none; spf=pass (relay.mimecast.com: domain of
 gcc-patches-bounces@gcc.gnu.org designates 8.43.85.97 as permitted sender)
 smtp.mailfrom=gcc-patches-bounces@gcc.gnu.org
Received: from sourceware.org (server2.sourceware.org [8.43.85.97]) (Using
 TLS) by relay.mimecast.com with ESMTP id
 us-mta-19-LIo1h4JjNaSbaZ6w1L89YA-1; Sat, 22 Aug 2020 19:24:19 -0400
X-MC-Unique: LIo1h4JjNaSbaZ6w1L89YA-1
Received: from server2.sourceware.org (localhost [IPv6:::1])
	by sourceware.org (Postfix) with ESMTP id 5983F3987C3F;
	Sat, 22 Aug 2020 23:24:14 +0000 (GMT)
X-Original-To: gcc-patches@gcc.gnu.org
Delivered-To: gcc-patches@gcc.gnu.org
Received: from server.nextmovesoftware.com (server.nextmovesoftware.com
 [162.254.253.69])
 by sourceware.org (Postfix) with ESMTPS id 4B0713987C2A
 for <gcc-patches@gcc.gnu.org>; Sat, 22 Aug 2020 23:24:11 +0000 (GMT)
DMARC-Filter: OpenDMARC Filter v1.3.2 sourceware.org 4B0713987C2A
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
 d=nextmovesoftware.com; s=default; h=Content-Type:MIME-Version:Message-ID:
 Date:Subject:In-Reply-To:References:To:From:Sender:Reply-To:Cc:
 Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
 Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
 List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
 bh=1yBzDxknHBoZ1Om92z2gcsddjOQwXhveGD8r4oCkIS8=;
 b=CzSCaYQUjlAuioQA634hoxZkH
 URP/zG+sSoBzuwD6adv2LWaS20JDQOn6gl7B8/nAM3OplZ1LnaRFaAroK7iZA5+FEK/dzQcX94+Ba
 dRh9ltSm9mw0cTJLwuIz0T5pPFc0ALtXhN1PThO0EO89bWlLve+GkqeKuhUo3fl/cN25s/fV1dyc1
 2Q4MLLT+uy6FY/JcqvqmRE8H/c5WLSskI4r8GjRnKhbdSvyBQxaPpCyVMTAKYyTLp/OAgqOPgZXvg
 pBvfJbKgMFgTkRy12Tv+mwAj8jOAyA1bVd7HB4oDco/WTjtgqfLOLQtqUI4w3+tCP4wdk89k3XOY0
 q9Xo0QSvQ==;
Received: from host86-137-89-56.range86-137.btcentralplus.com
 ([86.137.89.56]:62809 helo=Dell)
 by server.nextmovesoftware.com with esmtpsa (TLS1.2) tls
 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (Exim 4.93)
 (envelope-from <roger@nextmovesoftware.com>)
 id 1k9crq-0003IZ-Lc; Sat, 22 Aug 2020 19:24:10 -0400
From: "Roger Sayle" <roger@nextmovesoftware.com>
To: "'John David Anglin'" <dave.anglin@bell.net>,
 "'GCC Patches'" <gcc-patches@gcc.gnu.org>
References: <044501d677ba$099a5520$1cceff60$@nextmovesoftware.com>
 <6942a7b4-ec9b-0278-21e0-fa2f6a13b09b@bell.net>
 <00c701d67861$a1c37370$e54a5a50$@nextmovesoftware.com>
 <42249873-db65-322f-1305-3295e8ca27f6@bell.net>
 <000901d6789d$8bdd40e0$a397c2a0$@nextmovesoftware.com>
 <cdf449ac-6949-1ad4-8bab-3791e073ce60@bell.net>
In-Reply-To: <cdf449ac-6949-1ad4-8bab-3791e073ce60@bell.net>
Subject: RE: [PATCH] hppa: Improve expansion of ashldi3 when !TARGET_64BIT
Date: Sun, 23 Aug 2020 00:24:08 +0100
Message-ID: <001501d678db$56a34580$03e9d080$@nextmovesoftware.com>
MIME-Version: 1.0
Content-Language: en-gb
Thread-Index:
 AQGF8CgDC2pHirXFzXzK0tkk6lcviAJXwaLAAY9MpdEBXc/7FgF+NIb5AfdB/ImpoAA+oA==
X-AntiAbuse: This header was added to track abuse,
 please include it with any abuse report
X-AntiAbuse: Primary Hostname - server.nextmovesoftware.com
X-AntiAbuse: Original Domain - gcc.gnu.org
X-AntiAbuse: Originator/Caller UID/GID - [47 12] / [47 12]
X-AntiAbuse: Sender Address Domain - nextmovesoftware.com
X-Get-Message-Sender-Via: server.nextmovesoftware.com: authenticated_id:
 roger@nextmovesoftware.com
X-Authenticated-Sender: server.nextmovesoftware.com:
 roger@nextmovesoftware.com
X-Source: 
X-Source-Args: 
X-Source-Dir: 
X-Spam-Status: No, score=-11.0 required=5.0 tests=BAYES_00, DKIM_SIGNED,
 DKIM_VALID, DKIM_VALID_AU, DKIM_VALID_EF, GIT_PATCH_0, SPF_HELO_NONE,
 SPF_PASS, TXREP autolearn=ham autolearn_force=no version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on
 server2.sourceware.org
X-BeenThere: gcc-patches@gcc.gnu.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Gcc-patches mailing list <gcc-patches.gcc.gnu.org>
List-Unsubscribe: <https://gcc.gnu.org/mailman/options/gcc-patches>,
 <mailto:gcc-patches-request@gcc.gnu.org?subject=unsubscribe>
List-Archive: <https://gcc.gnu.org/pipermail/gcc-patches/>
List-Post: <mailto:gcc-patches@gcc.gnu.org>
List-Help: <mailto:gcc-patches-request@gcc.gnu.org?subject=help>
List-Subscribe: <https://gcc.gnu.org/mailman/listinfo/gcc-patches>,
 <mailto:gcc-patches-request@gcc.gnu.org?subject=subscribe>
Errors-To: gcc-patches-bounces@gcc.gnu.org
Sender: "Gcc-patches" <gcc-patches-bounces@gcc.gnu.org>
Authentication-Results: relay.mimecast.com; dkim=fail (headers rsa verify
 failed) header.d=nextmovesoftware.com header.s=default header.b=CzSCaYQU;
 dmarc=none; spf=pass (relay.mimecast.com: domain of
 gcc-patches-bounces@gcc.gnu.org designates 8.43.85.97 as permitted sender)
 smtp.mailfrom=gcc-patches-bounces@gcc.gnu.org
X-Mimecast-Spam-Score: -3.115
X-Mimecast-Impersonation-Protect: Policy=CLT - Impersonation Protection
 Definition;Similar Internal Domain=false;Similar Monitored External
 Domain=false;Custom External Domain=false;Mimecast External
 Domain=false;Newly Observed Domain=false;Internal User Name=false;Custom
 Display Name List=false;Reply-to Address Mismatch=false;Targeted Threat
 Dictionary=false;Mimecast Threat Dictionary=false;Custom Threat
 Dictionary=false;
X-Mimecast-Bulk-Signature: yes
X-Mimecast-Spam-Signature: bulk
Content-Type: multipart/mixed;
 boundary="----=_NextPart_000_0016_01D678E3.B869F770"
X-Scanned-By: MIMEDefang 2.78 on 10.11.54.6
X-Evolution-Source: c7a8bea51dc340263fb5562dcfccd2a5085155c1

This is a multipart message in MIME format.
------=_NextPart_000_0016_01D678E3.B869F770
Content-Type: text/plain;
	charset="utf-8"
Content-Transfer-Encoding: 8bit


Hi Dave,
I actually think using plus_xor_ior operator is useful.  It means that if combine,
inlining or some other RTL simplification generates these variants, these forms
will still be recognized by the backend.  It's more typing, but the compiler produces
better code.

Here's what I have so far, but please feel free to modify anything.  I'll leave the
rest to you.

With this patch:

unsigned long long rotl4(unsigned long long x)
{
  return (x<<4) | (x>>60);
}

unsigned long long rotr4(unsigned long long x)
{
  return (x<<60) | (x>>4);
}

which previously generated:

rotl4:	depd,z %r26,59,60,%r28
	extrd,u %r26,3,4,%r26
	bve (%r2)
	or %r26,%r28,%r28

rotr4:	extrd,u %r26,59,60,%r28
	depd,z %r26,3,4,%r26
	bve (%r2)
	or %r26,%r28,%r28

now produces:

rotl4:	bve (%r2)
	shrpd %r26,%r26,60,%r28

rotr4:	bve (%r2)
	shrpd %r26,%r26,4,%r28


I'm guessing this is very similar to what you were thinking (or what I described previously).

Many thanks again for trying out these patches/suggestions for me.

Best regards,
Roger
--

-----Original Message-----
From: John David Anglin <dave.anglin@bell.net> 
Sent: 22 August 2020 23:09
To: Roger Sayle <roger@nextmovesoftware.com>; 'GCC Patches' <gcc-patches@gcc.gnu.org>
Cc: 'Jeff Law' <law@redhat.com>
Subject: Re: [PATCH] hppa: Improve expansion of ashldi3 when !TARGET_64BIT

On 2020-08-22 12:01 p.m., Roger Sayle wrote:
> I suspect that the issue with the 64-bit patterns is that the second 
> variant of pa.md's define_insn "shrpdi4" is unlikely ever to match as 
> (minus:DI (const_int 64) x) is never "canonical" when x is itself a 
> CONST_INT.  Splitting this define_insn into two (or three see below) 
> separate forms; the first as it currently is and the second (as you 
> suggest) with
> 	"TARGET_64BIT
> 	  && INTVAL (operands[3]) + INTVAL (operands[4]) == 64"
> should do the trick.
I will go ahead and add the basic patterns.  It seems it would be best if I avoid using the "plus_xor_ior_operator".  It also seems the 32-bit patterns should avoid it.
>
> My first impression was that the DImode shrpd instructions would be 
> most useful for implementing TI mode shifts, but that TI mode isn't 
> supported by hppa64.  But then I noticed that the more immediate 
> benefit would be in supporting rotrdi3 and rotldi3 on TARGET_64BIT 
> that currently don't have expanders nor insns defined.  Here GCC 
> currently generates three instructions where a single shrpd would be 
> optimal.
It turns out we now need to support TI mode and __int128 for libgomp.  The hppa64-hpux target won't boot without it.  I had just added a change to support TI mode but it's untested.

Regards,
Dave

--
John David Anglin  dave.anglin@bell.net


------=_NextPart_000_0016_01D678E3.B869F770
Content-Type: application/octet-stream;
	name="patchh3.log"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="patchh3.log"

2020-08-23  Roger Sayle  <roger@nextmovesoftware.com>=0A=09    John David A=
nglin  <danglin@gcc.gnu.org>=0A=0Agcc/ChangeLog=0A=09* config/pa/pa.md (shr=
psi4_1, shrpsi4_2): New define_insns split=0A=09out from previous shrpsi4 p=
roviding two commutitive variants using=0A=09plus_xor_ior_operator as a pre=
dicate.=0A=09(shrpdi4_1, shrpdi4_2, shrpdi_3, shrpdi_4): Likewise DImode ve=
rsions=0A=09where _1 and _2 take register shifts, and _3 and _4 for integer=
s.=0A=09(rotlsi3_internal): Name this anonymous instruction.=0A=09(rotrdi3)=
: New DImode insn copied from rotrsi3.=0A=09(rotldi3): New DImode expander =
copied from rotlsi3.=0A=09(rotldi4_internal): New DImode insn copied from r=
otsi3_internal.=0A=0A
------=_NextPart_000_0016_01D678E3.B869F770
Content-Type: text/plain;
	name="patchh3.txt"
Content-Disposition: attachment;
	filename="patchh3.txt"
Content-Transfer-Encoding: 8bit

diff --git a/gcc/config/pa/pa.md b/gcc/config/pa/pa.md
index 6350c68..5f04c02 100644
--- a/gcc/config/pa/pa.md
+++ b/gcc/config/pa/pa.md
@@ -6604,32 +6604,82 @@
    (set_attr "length" "4")])
 
 ; Shift right pair word 0 to 31 bits.
-(define_insn "shrpsi4"
-  [(set (match_operand:SI 0 "register_operand" "=r,r")
-	(ior:SI (ashift:SI (match_operand:SI 1 "register_operand" "r,r")
-			   (minus:SI (const_int 32)
-			     (match_operand:SI 3 "shift5_operand" "q,n")))
-		(lshiftrt:SI (match_operand:SI 2 "register_operand" "r,r")
-			     (match_dup 3))))]
+(define_insn "*shrpsi4_1"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(match_operator:SI 4 "plus_xor_ior_operator"
+	  [(ashift:SI (match_operand:SI 1 "register_operand" "r")
+		      (minus:SI (const_int 32)
+				(match_operand:SI 3 "register_operand" "q")))
+	   (lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
+			(match_dup 3))]))]
   ""
-  "@
-   {vshd %1,%2,%0|shrpw %1,%2,%%sar,%0}
-   {shd|shrpw} %1,%2,%3,%0"
+  "{vshd %1,%2,%0|shrpw %1,%2,%%sar,%0}"
+  [(set_attr "type" "shift")
+   (set_attr "length" "4")])
+
+(define_insn "*shrpsi4_2"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(match_operator:SI 4 "plus_xor_ior_operator"
+	  [(lshiftrt:SI (match_operand:SI 2 "register_operand" "r")
+			(match_operand:SI 3 "register_operand" "q"))
+	   (ashift:SI (match_operand:SI 1 "register_operand" "r")
+		      (minus:SI (const_int 32)
+				(match_dup 3)))]))]
+  ""
+  "{vshd %1,%2,%0|shrpw %1,%2,%%sar,%0}"
   [(set_attr "type" "shift")
    (set_attr "length" "4")])
 
 ; Shift right pair doubleword 0 to 63 bits.
-(define_insn "shrpdi4"
-  [(set (match_operand:DI 0 "register_operand" "=r,r")
-	(ior:DI (ashift:DI (match_operand:SI 1 "register_operand" "r,r")
-			   (minus:DI (const_int 64)
-			     (match_operand:DI 3 "shift6_operand" "q,n")))
-		(lshiftrt:DI (match_operand:DI 2 "register_operand" "r,r")
-			     (match_dup 3))))]
+(define_insn "*shrpdi4_1"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(match_operator:DI 4 "plus_xor_ior_operator"
+	  [(ashift:DI (match_operand:DI 1 "register_operand" "r")
+		      (minus:DI (const_int 64)
+				(match_operand:DI 3 "register_operand" "q")))
+	   (lshiftrt:DI (match_operand:DI 2 "register_operand" "r")
+			(match_dup 3))]))]
   "TARGET_64BIT"
-  "@
-   shrpd %1,%2,%%sar,%0
-   shrpd %1,%2,%3,%0"
+  "shrpd %1,%2,%%sar,%0"
+  [(set_attr "type" "shift")
+   (set_attr "length" "4")])
+
+(define_insn "*shrpdi4_2"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(match_operator:DI 4 "plus_xor_ior_operator"
+	  [(lshiftrt:DI (match_operand:DI 2 "register_operand" "r")
+			(match_operand:DI 3 "shift6_operand" "q"))
+	   (ashift:DI (match_operand:SI 1 "register_operand" "r")
+		      (minus:DI (const_int 64)
+				(match_dup 3)))]))]
+  "TARGET_64BIT"
+  "shrpd %1,%2,%%sar,%0"
+  [(set_attr "type" "shift")
+   (set_attr "length" "4")])
+
+(define_insn "*shrpdi4_3"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(match_operator:DI 5 "plus_xor_ior_operator"
+	  [(ashift:DI (match_operand:DI 1 "register_operand" "r")
+		      (match_operand:DI 3 "const_int_operand" "n"))
+	   (lshiftrt:DI (match_operand:DI 2 "register_operand" "r")
+			(match_operand:DI 4 "const_int_operand" "n"))]))]
+  "TARGET_64BIT
+   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64"
+  "shrpd %1,%2,%4,%0"
+  [(set_attr "type" "shift")
+   (set_attr "length" "4")])
+
+(define_insn "*shrpdi4_4"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(match_operator:DI 5 "plus_xor_ior_operator"
+	  [(lshiftrt:DI (match_operand:DI 2 "register_operand" "r")
+			(match_operand:DI 4 "const_int_operand" "n"))
+	   (ashift:DI (match_operand:DI 1 "register_operand" "r")
+		      (match_operand:DI 3 "const_int_operand" "n"))]))]
+  "TARGET_64BIT
+   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64"
+  "shrpd %1,%2,%4,%0"
   [(set_attr "type" "shift")
    (set_attr "length" "4")])
 
@@ -6668,7 +6718,7 @@
   /* Else expand normally.  */
 }")
 
-(define_insn ""
+(define_insn "*rotlsi3_internal"
   [(set (match_operand:SI 0 "register_operand" "=r")
         (rotate:SI (match_operand:SI 1 "register_operand" "r")
                    (match_operand:SI 2 "const_int_operand" "n")))]
@@ -6681,6 +6731,54 @@
   [(set_attr "type" "shift")
    (set_attr "length" "4")])
 
+(define_insn "rotrdi3"
+  [(set (match_operand:DI 0 "register_operand" "=r,r")
+	(rotatert:DI (match_operand:DI 1 "register_operand" "r,r")
+		     (match_operand:DI 2 "shift6_operand" "q,n")))]
+  "TARGET_64BIT"
+  "*
+{
+  if (GET_CODE (operands[2]) == CONST_INT)
+    {
+      operands[2] = GEN_INT (INTVAL (operands[2]) & 63);
+      return \"shrpd %1,%1,%2,%0\";
+    }
+  else
+    return \"shrpd %1,%1,%%sar,%0\";
+}"
+  [(set_attr "type" "shift")
+   (set_attr "length" "4")])
+
+(define_expand "rotldi3"
+  [(set (match_operand:DI 0 "register_operand" "")
+        (rotate:DI (match_operand:DI 1 "register_operand" "")
+                   (match_operand:DI 2 "arith32_operand" "")))]
+  "TARGET_64BIT"
+  "
+{
+  if (GET_CODE (operands[2]) != CONST_INT)
+    {
+      rtx temp = gen_reg_rtx (DImode);
+      emit_insn (gen_subdi3 (temp, GEN_INT (64), operands[2]));
+      emit_insn (gen_rotrdi3 (operands[0], operands[1], temp));
+      DONE;
+    }
+  /* Else expand normally.  */
+}")
+
+(define_insn "*rotldi3_internal"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+        (rotate:DI (match_operand:DI 1 "register_operand" "r")
+                   (match_operand:DI 2 "const_int_operand" "n")))]
+  "TARGET_64BIT"
+  "*
+{
+  operands[2] = GEN_INT ((64 - INTVAL (operands[2])) & 63);
+  return \"shrpd %1,%1,%2,%0\";
+}"
+  [(set_attr "type" "shift")
+   (set_attr "length" "4")])
+
 (define_insn ""
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(match_operator:SI 5 "plus_xor_ior_operator"

------=_NextPart_000_0016_01D678E3.B869F770--


