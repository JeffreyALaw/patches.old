diff --git a/gcc/c/c-decl.c b/gcc/c/c-decl.c
index 80fe3186759..ed5163dd465 100644
--- a/gcc/c/c-decl.c
+++ b/gcc/c/c-decl.c
@@ -9851,7 +9851,7 @@ temp_pop_parm_decls (void)
    This is called after parsing the body of the function definition.  */
 
 void
-finish_function (location_t end_loc)
+finish_function (void)
 {
   tree fndecl = current_function_decl;
   
@@ -9947,7 +9947,7 @@ finish_function (location_t end_loc)
 
   /* Store the end of the function, so that we get good line number
      info for the epilogue.  */
-  cfun->function_end_locus = end_loc;
+  cfun->function_end_locus = input_location;
 
   /* Finalize the ELF visibility for the function.  */
   c_determine_visibility (fndecl);
diff --git a/gcc/c/c-parser.c b/gcc/c/c-parser.c
index 4b068a938fb..1e8f2f7108d 100644
--- a/gcc/c/c-parser.c
+++ b/gcc/c/c-parser.c
@@ -1487,8 +1487,8 @@ static struct c_expr c_parser_braced_init (c_parser *, tree, bool,
 static void c_parser_initelt (c_parser *, struct obstack *);
 static void c_parser_initval (c_parser *, struct c_expr *,
 			      struct obstack *);
-static tree c_parser_compound_statement (c_parser *, location_t * = NULL);
-static location_t c_parser_compound_statement_nostart (c_parser *);
+static tree c_parser_compound_statement (c_parser *);
+static void c_parser_compound_statement_nostart (c_parser *);
 static void c_parser_label (c_parser *);
 static void c_parser_statement (c_parser *, bool *, location_t * = NULL);
 static void c_parser_statement_after_labels (c_parser *, bool *,
@@ -1583,7 +1583,8 @@ static void c_parser_objc_at_synthesize_declaration (c_parser *);
 static void c_parser_objc_at_dynamic_declaration (c_parser *);
 static bool c_parser_objc_diagnose_bad_element_prefix
   (c_parser *, struct c_declspecs *);
-static location_t c_parser_parse_rtl_body (c_parser *, char *);
+
+static void c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass);
 
 /* Parse a translation unit (C90 6.7, C99 6.9, C11 6.9).
 
@@ -2471,13 +2472,12 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
 	c_finish_oacc_routine (oacc_routine_data, current_function_decl, true);
       DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus
 	= c_parser_peek_token (parser)->location;
-      location_t endloc;
 
       /* If the definition was marked with __RTL, use the RTL parser now,
 	 consuming the function body.  */
       if (specs->declspec_il == cdil_rtl)
 	{
-	  endloc = c_parser_parse_rtl_body (parser, specs->gimple_or_rtl_pass);
+	  c_parser_parse_rtl_body (parser, specs->gimple_or_rtl_pass);
 
 	  /* Normally, store_parm_decls sets next_is_function_body,
 	     anticipating a function body.  We need a push_scope/pop_scope
@@ -2486,7 +2486,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
 	  push_scope ();
 	  pop_scope ();
 
-	  finish_function (endloc);
+	  finish_function ();
 	  return;
 	}
       /* If the definition was marked with __GIMPLE then parse the
@@ -2499,11 +2499,9 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
 				      specs->declspec_il,
 				      specs->entry_bb_count);
 	  in_late_binary_op = saved;
-	  struct function *fun = DECL_STRUCT_FUNCTION (current_function_decl);
-	  endloc = fun->function_start_locus;
 	}
       else
-	fnbody = c_parser_compound_statement (parser, &endloc);
+	fnbody = c_parser_compound_statement (parser);
       tree fndecl = current_function_decl;
       if (nested)
 	{
@@ -2514,7 +2512,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
 	     by initializer_constant_valid_p.  See gcc.dg/nested-fn-2.c.  */
 	  DECL_STATIC_CHAIN (decl) = 1;
 	  add_stmt (fnbody);
-	  finish_function (endloc);
+	  finish_function ();
 	  c_pop_function_context ();
 	  add_stmt (build_stmt (DECL_SOURCE_LOCATION (decl), DECL_EXPR, decl));
 	}
@@ -2522,7 +2520,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
 	{
 	  if (fnbody)
 	    add_stmt (fnbody);
-	  finish_function (endloc);
+	  finish_function ();
 	}
       /* Get rid of the empty stmt list for GIMPLE/RTL.  */
       if (specs->declspec_il != cdil_none)
@@ -5601,7 +5599,7 @@ c_parser_initval (c_parser *parser, struct c_expr *after,
      cancellation-point-directive  */
 
 static tree
-c_parser_compound_statement (c_parser *parser, location_t *endlocp)
+c_parser_compound_statement (c_parser *parser)
 {
   tree stmt;
   location_t brace_loc;
@@ -5615,9 +5613,7 @@ c_parser_compound_statement (c_parser *parser, location_t *endlocp)
       return error_mark_node;
     }
   stmt = c_begin_compound_stmt (true);
-  location_t end_loc = c_parser_compound_statement_nostart (parser);
-  if (endlocp)
-    *endlocp = end_loc;
+  c_parser_compound_statement_nostart (parser);
 
   return c_end_compound_stmt (brace_loc, stmt, true);
 }
@@ -5626,7 +5622,7 @@ c_parser_compound_statement (c_parser *parser, location_t *endlocp)
    used for parsing both compound statements and statement expressions
    (which follow different paths to handling the opening).  */
 
-static location_t
+static void
 c_parser_compound_statement_nostart (c_parser *parser)
 {
   bool last_stmt = false;
@@ -5635,10 +5631,9 @@ c_parser_compound_statement_nostart (c_parser *parser)
   location_t label_loc = UNKNOWN_LOCATION;  /* Quiet warning.  */
   if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))
     {
-      location_t endloc = c_parser_peek_token (parser)->location;
-      add_debug_begin_stmt (endloc);
+      add_debug_begin_stmt (c_parser_peek_token (parser)->location);
       c_parser_consume_token (parser);
-      return endloc;
+      return;
     }
   mark_valid_location_for_stdc_pragma (true);
   if (c_parser_next_token_is_keyword (parser, RID_LABEL))
@@ -5679,9 +5674,8 @@ c_parser_compound_statement_nostart (c_parser *parser)
     {
       mark_valid_location_for_stdc_pragma (save_valid_for_pragma);
       c_parser_error (parser, "expected declaration or statement");
-      location_t endloc = c_parser_peek_token (parser)->location;
       c_parser_consume_token (parser);
-      return endloc;
+      return;
     }
   while (c_parser_next_token_is_not (parser, CPP_CLOSE_BRACE))
     {
@@ -5779,7 +5773,7 @@ c_parser_compound_statement_nostart (c_parser *parser)
 	{
 	  mark_valid_location_for_stdc_pragma (save_valid_for_pragma);
 	  c_parser_error (parser, "expected declaration or statement");
-	  return c_parser_peek_token (parser)->location;
+	  return;
 	}
       else if (c_parser_next_token_is_keyword (parser, RID_ELSE))
         {
@@ -5787,7 +5781,7 @@ c_parser_compound_statement_nostart (c_parser *parser)
             {
 	      mark_valid_location_for_stdc_pragma (save_valid_for_pragma);
 	      error_at (loc, "expected %<}%> before %<else%>");
-	      return c_parser_peek_token (parser)->location;
+              return;
             }
           else
             {
@@ -5810,11 +5804,9 @@ c_parser_compound_statement_nostart (c_parser *parser)
     }
   if (last_label)
     error_at (label_loc, "label at end of compound statement");
-  location_t endloc = c_parser_peek_token (parser)->location;
   c_parser_consume_token (parser);
   /* Restore the value we started with.  */
   mark_valid_location_for_stdc_pragma (save_valid_for_pragma);
-  return endloc;
 }
 
 /* Parse all consecutive labels, possibly preceded by standard
@@ -21733,13 +21725,13 @@ c_parse_file (void)
 
    Take ownership of START_WITH_PASS, if non-NULL.  */
 
-location_t
+void
 c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass)
 {
   if (!c_parser_require (parser, CPP_OPEN_BRACE, "expected %<{%>"))
     {
       free (start_with_pass);
-      return c_parser_peek_token (parser)->location;
+      return;
     }
 
   location_t start_loc = c_parser_peek_token (parser)->location;
@@ -21761,7 +21753,7 @@ c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass)
 	case CPP_EOF:
 	  error_at (start_loc, "no closing brace");
 	  free (start_with_pass);
-	  return c_parser_peek_token (parser)->location;
+	  return;
 	default:
 	  break;
 	}
@@ -21779,13 +21771,12 @@ c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass)
   if (!read_rtl_function_body_from_file_range (start_loc, end_loc))
     {
       free (start_with_pass);
-      return end_loc;
+      return;
     }
 
  /*  Run the backend on the cfun created above, transferring ownership of
      START_WITH_PASS.  */
   run_rtl_passes (start_with_pass);
-  return end_loc;
 }
 
 #include "gt-c-c-parser.h"
diff --git a/gcc/c/c-tree.h b/gcc/c/c-tree.h
index 2015827dbb1..364d7e03398 100644
--- a/gcc/c/c-tree.h
+++ b/gcc/c/c-tree.h
@@ -580,7 +580,7 @@ extern bool c_check_switch_jump_warnings (struct c_spot_bindings *,
 					  location_t, location_t);
 extern void finish_decl (tree, location_t, tree, tree, tree);
 extern tree finish_enum (tree, tree, tree);
-extern void finish_function (location_t = input_location);
+extern void finish_function (void);
 extern tree finish_struct (location_t, tree, tree, tree,
 			   class c_struct_parse_info *);
 extern tree c_simulate_enum_decl (location_t, const char *,
* Unmerged path gcc/testsuite/ChangeLog
diff --git a/gcc/testsuite/gcc.misc-tests/gcov-pr94029.c b/gcc/testsuite/gcc.misc-tests/gcov-pr94029.c
deleted file mode 100644
index 84d9b9b2749..00000000000
--- a/gcc/testsuite/gcc.misc-tests/gcov-pr94029.c
+++ /dev/null
@@ -1,14 +0,0 @@
-/* PR gcov-profile/94029 */
-/* { dg-options "-ftest-coverage" } */
-/* { dg-do compile } */
-
-#define impl_test(name) void test_##name() { }
-impl_test(t1
-) impl_test(t2)
-
-int main()
-{
-  return 0;
-}
-
-/* { dg-final { run-gcov remove-gcda gcov-pr94029.c } } */
